<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tektosyne.Core</name>
    </assembly>
    <members>
        <member name="T:Tektosyne.ArgumentNullOrEmptyException">
            <summary>
            The exception that is thrown when a null reference or an empty object is passed to a method
            that does not accept them as a valid argument.</summary>
            <remarks><para>
            <b>ArgumentNullOrEmptyException</b> offers the same functionality as the standard class <see
            cref="T:System.ArgumentNullException"/>.
            </para><para>
            Methods should raise this exception to indicate an invalid argument of a composite type that
            is either a null reference or does not contain any elements. Such composite types include
            the <see cref="T:System.String"/> and <see cref="T:System.Array"/> classes, as well as any collection classes.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.ArgumentNullOrEmptyException.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/> class with
            default properties.</summary>
            <remarks>
            Please refer to <see cref="M:System.ArgumentNullException.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.ArgumentNullOrEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/> class with
            the name of the parameter that caused the exception.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <remarks>
            Please refer to <see cref="M:System.ArgumentNullException.#ctor(System.String)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.ArgumentNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/> class with
            the specified error message and with the previous exception that is the cause of this
            <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current <see
            cref="T:Tektosyne.ArgumentNullOrEmptyException"/>.</param>
            <remarks>
            Please refer to <see cref="M:System.ArgumentNullException.#ctor(System.String,System.Exception)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.ArgumentNullOrEmptyException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/> class with
            the name of the parameter that caused the exception and with the specified error
            message.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks>
            Please refer to <see cref="M:System.ArgumentNullException.#ctor(System.String,System.String)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.ArgumentNullOrEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/> class with
            serialized data.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object providing serialized object data for the <see
            cref="T:Tektosyne.ArgumentNullOrEmptyException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.ArgumentNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for details.</remarks>
        </member>
        <member name="T:Tektosyne.AssemblyExtensions">
            <summary>
            Provides extension methods for <b>System.Reflection.Assembly</b>.</summary>
            <remarks>
            <b>AssemblyExtensions</b> allows convenient retrieval of informational attributes and public
            key tokens from a specified <see cref="T:System.Reflection.Assembly"/>.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.Company(System.Reflection.Assembly)">
            <summary>
            Gets the company name for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The content of the <see cref="T:System.Reflection.AssemblyCompanyAttribute"/> attribute for the specified
            <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>Company</b> returns an empty string if the specified <paramref name="assembly"/> does
            not define an <see cref="T:System.Reflection.AssemblyCompanyAttribute"/>.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.Copyright(System.Reflection.Assembly)">
            <summary>
            Gets the copyright notice for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The content of the <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/> attribute for the specified
            <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>Copyright</b> returns an empty string if the specified <paramref name="assembly"/>
            does not define an <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/>.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.Description(System.Reflection.Assembly)">
            <summary>
            Gets description information for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The content of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/> attribute for the
            specified <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>Description</b> returns an empty string if the specified <paramref name="assembly"/>
            does not define an <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/>.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.FileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the file version number for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The content of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/> attribute for the
            specified <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>FileVersion</b> returns the value of <see cref="M:Tektosyne.AssemblyExtensions.Version(System.Reflection.Assembly)"/> if the specified <paramref
            name="assembly"/> does not define an <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.InformationalVersion(System.Reflection.Assembly)">
            <summary>
            Gets version information for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The content of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> attribute for the
            specified <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>InformationalVersion</b> returns the value of <see cref="M:Tektosyne.AssemblyExtensions.Version(System.Reflection.Assembly)"/> if the specified
            <paramref name="assembly"/> does not define an <see
            cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.Product(System.Reflection.Assembly)">
            <summary>
            Gets the product name for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The content of the <see cref="T:System.Reflection.AssemblyProductAttribute"/> attribute for the specified
            <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>Product</b> returns an empty string if the specified <paramref name="assembly"/> does
            not define an <see cref="T:System.Reflection.AssemblyProductAttribute"/>.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.PublicKeyToken(System.Reflection.Assembly)">
            <summary>
            Gets the public key token for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            A string of hexadecimal digits representing the public key token of the <see
            cref="T:System.Reflection.AssemblyName"/> for the specified <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>PublicKeyToken</b> returns a null reference if the specified <paramref
            name="assembly"/> is not signed with a strong name.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.Title(System.Reflection.Assembly)">
            <summary>
            Gets title information for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The content of the <see cref="T:System.Reflection.AssemblyTitleAttribute"/> attribute for the specified
            <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>Title</b> returns an empty string if the specified <paramref name="assembly"/> does
            not define an <see cref="T:System.Reflection.AssemblyTitleAttribute"/>.</remarks>
        </member>
        <member name="M:Tektosyne.AssemblyExtensions.Version(System.Reflection.Assembly)">
            <summary>
            Gets the version number for the specified <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to examine.</param>
            <returns>
            The <see cref="P:System.Reflection.AssemblyName.Version"/> of the <see cref="T:System.Reflection.AssemblyName"/> for the
            specified <paramref name="assembly"/>, formatted with all four components.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is a null reference.</exception>
            <remarks>
            <b>Version</b> returns the literal string “0.0.0.0” if the specified <paramref
            name="assembly"/> does not define an <see cref="T:System.Reflection.AssemblyVersionAttribute"/> or otherwise
            specify a non-default <see cref="P:System.Reflection.AssemblyName.Version"/>.</remarks>
        </member>
        <member name="T:Tektosyne.AssertionException">
            <summary>
            Represents errors that occur as a result of assertion failures.</summary>
            <remarks>
            <b>AssertionException</b> is identical to the basic <see cref="T:System.Exception"/> class. Its sole
            purpose is to identify exceptions thrown by the <see cref="M:Tektosyne.ThrowHelper.Assert(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="M:Tektosyne.AssertionException.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.AssertionException"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.AssertionException"/> class with default
            properties.</summary>
            <remarks>
            Please refer to <see cref="M:System.Exception.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.AssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.AssertionException"/> class with the
            specified error message.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks>
            Please refer to <see cref="M:System.Exception.#ctor(System.String)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.AssertionException"/> class with the
            specified error message and with the previous exception that is the cause of this <see
            cref="T:Tektosyne.AssertionException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current <see
            cref="T:Tektosyne.AssertionException"/>.</param>
            <remarks>
            Please refer to <see cref="M:System.Exception.#ctor(System.String,System.Exception)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.AssertionException"/> class with serialized
            data.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object providing serialized object data for the <see
            cref="T:Tektosyne.AssertionException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for
            details.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.ArrayEx`1">
            <summary>
            Provides a fixed-size generic collection of elements that are accessible by
            multi-dimensional index.</summary>
            <typeparam name="T">
            The type of all elements in the collection. If <typeparamref name="T"/> is a reference type,
            elements may be null references.</typeparam>
            <remarks><para>
            <b>ArrayEx</b> provides an <see cref="T:System.Array"/> of arbitrary rank. The implementation uses
            custom index transformation with a one-dimensional backing <see cref="T:System.Array"/>. Compared to
            the standard class, <b>ArrayEx</b> offers a few extra features:
            </para><list type="bullet"><item>
            One-dimensional indexing is available regardless of <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>, using the
            same order as enumeration through a multi-dimensional standard <see cref="T:System.Array"/>. <see
            cref="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)"/> and <see cref="M:Tektosyne.Collections.ArrayEx`1.GetIndices(System.Int32)"/> convert indices between
            their equivalent one-dimensional and multi-dimensional representations.
            </item><item>
            <see cref="M:Tektosyne.Collections.ArrayEx`1.AsReadOnly"/> returns a read-only wrapper that has the same public
            type as the original collection. Attempting to modify the collection through such a
            read-only view will raise a <see cref="T:System.NotSupportedException"/>.
            </item><item>
            <see cref="M:Tektosyne.Collections.ArrayEx`1.Copy"/> creates a deep copy of the collection by invoking <see
            cref="M:System.ICloneable.Clone"/> on each element. This feature requires that all copied elements
            implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="M:Tektosyne.Collections.ArrayEx`1.CopyFrom(System.Collections.Generic.IEnumerable{`0})"/> copies elements from a specified one-dimensional <see
            cref="T:System.Array"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection to the <b>ArrayEx</b> collection.
            </item><item>
            <see cref="F:Tektosyne.Collections.ArrayEx`1.Empty"/> returns an immutable empty collection that is cached for
            repeated access.
            </item><item>
            <see cref="M:Tektosyne.Collections.ArrayEx`1.Equals(System.Collections.Generic.ICollection{`0})"/> compares two collections with identical element types for
            value equality of all elements. The collections compare as equal if they contain the same
            elements in the same order.
            </item><item>
            <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValueOrDefault(System.Int32)"/> returns the default value for <typeparamref
            name="T"/> rather than throwing an exception when a specified index is invalid.
            </item><item>
            <see cref="M:Tektosyne.Collections.ArrayEx`1.ToArrayWithShape"/> copies the entire <b>ArrayEx</b> to a standard
            multi-dimensional <see cref="T:System.Array"/> with the same dimension lengths.
            </item><item>
            Many utility methods replicate those defined by the standard <see cref="T:System.Array"/> class.
            While the standard methods only accept one-dimensional arrays, the <b>ArrayEx</b> methods
            work regardless of <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>.
            </item></list><para>
            <b>ArrayEx</b> implements the <see cref="T:System.Collections.Generic.IList`1"/> and <see cref="T:System.Collections.IList"/> interfaces. As
            with the standard <see cref="T:System.Array"/> class, any members that attempt to add or remove
            elements are implemented explicitly and always throw a <see cref="T:System.NotSupportedException"/>.
            Other members are implemented implicitly.
            </para><para>
            Unfortunately, <b>ArrayEx</b> also has several significant drawbacks compared to the
            standard <see cref="T:System.Array"/> class:
            </para><list type="bullet"><item>
            The indices of all dimensions must be zero-based. Arbitrary lower bounds are not supported.
            </item><item>
            You cannot use C# 3 collection initializers to define the elements of an <b>ArrayEx</b> upon
            construction because there is no working <b>Add</b> method.
            </item><item>
            Accessing individual elements is slower by a factor of two or more. Use <see
            cref="M:Tektosyne.Collections.ArrayEx`1.GetValueOrDefault(System.Int32)"/> where possible to avoid double-checking indices.
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.#ctor(System.Int32[])">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> class with the specified
            dimension lengths.</summary>
            <param name="lengths">
            An <see cref="T:System.Array"/> containing the number of elements in each dimension.</param>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="lengths"/> is a null reference or an empty <see cref="T:System.Array"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lengths"/> contains one or more negative values.</exception>
            <remarks>
            If any element in the <paramref name="lengths"/> equals zero, the new <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> will contain zero elements.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.#ctor(System.Array,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> class with the dimension
            lengths of the specified <see cref="T:System.Array"/>, and optionally copies its elements.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> whose dimension lengths to copy.</param>
            <param name="copying">
            <c>true</c> to also copy all elements from the specified <paramref name="array"/>;
            <c>false</c> to leave the elements of the new <see cref="T:Tektosyne.Collections.ArrayEx`1"/> at their default
            values.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="copying"/> is <c>true</c>, and at least one element in <paramref
            name="array"/> cannot be cast to <typeparamref name="T"/>.</exception>
            <remarks>
            The specified <paramref name="array"/> may have non-zero lower bounds in one or more
            dimensions. These are ignored, and the new <see cref="T:Tektosyne.Collections.ArrayEx`1"/> will contain the
            same number of elements starting from a zero-based index in each dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.#ctor(Tektosyne.Collections.ArrayEx{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> class that has the same 
            dimension lengths and contains elements copied from the specified instance.</summary>
            <param name="array">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> collection whose elements are copied to the new collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <remarks>
            This constructor also copies all dimension lengths of the specified <paramref
            name="array"/>, but not the value of the <see cref="P:Tektosyne.Collections.ArrayEx`1.IsReadOnly"/> property.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.#ctor(Tektosyne.Collections.ArrayEx{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> class that is a read-only
            view of the specified instance.</summary>
            <param name="array">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> collection that provides the initial values for the <see
            cref="F:Tektosyne.Collections.ArrayEx`1.InnerArray"/> and <see cref="F:Tektosyne.Collections.ArrayEx`1.Lengths"/> fields.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.ArrayEx`1.IsReadOnly"/> property. This argument must be
            <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="array"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.ArrayEx`1.InnerArray">
            <summary>
            The one-dimensional <see cref="T:System.Array"/> that holds the <typeparamref name="T"/> elements
            of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ArrayEx`1.Lengths">
            <summary>
            The number of elements in all dimensions of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ArrayEx`1.ReadOnlyFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.ArrayEx`1.IsReadOnly"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ArrayEx`1.ReadOnlyWrapper">
            <summary>
            The read-only <see cref="T:Tektosyne.Collections.ArrayEx`1"/> collection that is returned by the <see
            cref="M:Tektosyne.Collections.ArrayEx`1.AsReadOnly"/> method.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ArrayEx`1.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <remarks>
            <b>Empty</b> is a read-only one-dimensional <see cref="T:Tektosyne.Collections.ArrayEx`1"/> whose only
            dimension length equals zero. <b>Empty</b> is therefore guaranteed to never change.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.Count">
            <summary>
            Gets the total number of elements in all dimensions of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </summary>
            <value>
            The total number of elements in all dimensions of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</value>
            <remarks>
            <b>Count</b> returns the value of the <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/> property.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> has a fixed size.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> has a fixed size; otherwise, <c>false</c>.
            The default is <c>true</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.
            </para><para>
            This property always returns <c>true</c> since <see cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always
            have a fixed size, even when they are not read-only.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only; otherwise, <c>false</c>. The
            default is <c>false</c>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is synchronized
            (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is synchronized (thread-safe);
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.Item(System.Int32)">
            <overloads>
            Gets or sets the element at the specified index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </overloads>
            <summary>
            Gets or sets the element at the specified one-dimensional index.</summary>
            <param name="index">
            The zero-based one-dimensional index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>.</value>
            <exception cref="T:System.IndexOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> for details. One-dimensional indexing is
            always possible, regardless of the <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified one-dimensional index.</summary>
            <param name="index">
            The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>. When the property is set, this
            value must be compatible with <typeparamref name="T"/>.</value>
            <exception cref="T:System.IndexOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.InvalidCastException">
            The property is set to a value that is not compatible with <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified two-dimensional index.</summary>
            <param name="i">
            The zero-based first-dimension index of the element to get or set.</param>
            <param name="j">
            The zero-based second-dimension index of the element to get or set.</param>
            <value>
            The element at the index position specified by <paramref name="i"/> and <paramref
            name="j"/>.</value>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal two.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/> or <paramref name="j"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/> or <paramref name="j"/> is equal to or greater than the number of
            elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Getting this property calls <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32,System.Int32)"/>, and setting this
            property calls <see cref="M:Tektosyne.Collections.ArrayEx`1.SetValue(`0,System.Int32,System.Int32)"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified three-dimensional index.</summary>
            <param name="i">
            The zero-based first-dimension index of the element to get or set.</param>
            <param name="j">
            The zero-based second-dimension index of the element to get or set.</param>
            <param name="k">
            The zero-based third-dimension index of the element to get or set.</param>
            <value>
            The element at the index position specified by <paramref name="i"/>, <paramref
            name="j"/>, and <paramref name="k"/>.</value>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal three.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is equal to or
            greater than the number of elements in the corresponding dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Getting this property calls <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32,System.Int32,System.Int32)"/>, and setting
            this property calls <see cref="M:Tektosyne.Collections.ArrayEx`1.SetValue(`0,System.Int32,System.Int32,System.Int32)"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.Item(System.Int32[])">
            <summary>
            Gets or sets the element at the specified multi-dimensional index.</summary>
            <param name="indices">
            An <see cref="T:System.Array"/> containing one zero-based index for each dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <value>
            The element at the specified <paramref name="indices"/>.</value>
            <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="indices"/> differs from <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="indices"/> contains a value that is less than zero.
            </para><para>-or-</para><para>
            <paramref name="indices"/> contains a value that is equal to or greater than the number
            of elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Getting this property calls <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32[])"/>, and setting this property
            calls <see cref="M:Tektosyne.Collections.ArrayEx`1.SetValue(`0,System.Int32[])"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.Length">
            <summary>
            Gets the total number of elements in all dimensions of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </summary>
            <value>
            The total number of elements in all dimensions of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Array.Length"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.Rank">
            <summary>
            Gets the rank (number of dimensions) of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <value>
            The rank (number of dimensions) of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Array.Rank"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ArrayEx`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, obtain a lock
            on the <b>SyncRoot</b> object rather than the collection itself. A read-only view always
            returns the same <b>SyncRoot</b> object as the underlying writable collection.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.CheckLengths(System.Int32[])">
            <summary>
            Checks that the specified dimension lengths are valid.</summary>
            <param name="lengths">
            An <see cref="T:System.Array"/> containing the number of elements in each dimension.</param>
            <returns>
            The total number of elements in all dimensions of the specified <paramref
            name="lengths"/>.</returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="lengths"/> is a null reference or an empty <see cref="T:System.Array"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lengths"/> contains one or more negative values.</exception>
            <remarks>
            <b>CheckLengths</b> returns the product of all values in the specified <paramref
            name="lengths"/>, and therefore zero if any such value equals zero.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an element to the end of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="item">
            The element to add.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for details.
            </para><para>
            <b>Add</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an element to the end of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="item">
            The element to add. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <returns>
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> index at which the <paramref name="item"/> has been added.
            </returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks>
            <b>Add</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.BinarySearch(`0)">
            <overloads>
            Uses a binary search algorithm to locate a specific element in the sorted <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> or a portion of it.</overloads>
            <summary>
            Searches the entire sorted <see cref="T:Tektosyne.Collections.ArrayEx`1"/> for the specified element using the
            default comparer, and returns the zero-based index of the element.</summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Tektosyne.Collections.ArrayEx`1"/>,
            if <paramref name="item"/> is found; otherwise, a negative number, which is the bitwise
            complement of the index of the next element that is larger than <paramref name="item"/>
            or, if there is no larger element, the bitwise complement of <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The default <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see
            cref="T:System.Collections.IComparer"/> implementation for <typeparamref name="T"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.BinarySearch``1(``0[],``0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:Tektosyne.Collections.ArrayEx`1"/> for the specified element using the
            specified comparer, and returns the zero-based index of the element.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Tektosyne.Collections.ArrayEx`1"/>,
            if <paramref name="item"/> is found; otherwise, a negative number, which is the bitwise
            complement of the index of the next element that is larger than <paramref name="item"/>
            or, if there is no larger element, the bitwise complement of <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a subrange of the sorted <see cref="T:Tektosyne.Collections.ArrayEx`1"/> for the specified element
            using the specified comparer, and returns the zero-based index of the element.</summary>
            <param name="index">
            The zero-based starting index of the range to search.</param>
            <param name="count">
            The length of the range to search.</param>
            <param name="item">
            The element to locate.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Tektosyne.Collections.ArrayEx`1"/>,
            if <paramref name="item"/> is found; otherwise, a negative number, which is the bitwise
            complement of the index of the next element that is larger than <paramref name="item"/>
            or, if there is no larger element, the bitwise complement of <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})"/>
            for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Clear">
            <summary>
            Sets all elements in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to their default values.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Clear(System.Array,System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</returns>
            <remarks>
            <b>Clone</b> preserves all dimension lengths of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, but not
            the value of the <see cref="P:Tektosyne.Collections.ArrayEx`1.IsReadOnly"/> property.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> contains the specified element.
            </summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>;
            otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> contains the specified element.
            </summary>
            <param name="item">
            The element to locate. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="T"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.ArrayEx`1.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all elements.
            </para><para>
            <b>Copy</b> preserves all dimension lengths of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, but not the
            value of the <see cref="P:Tektosyne.Collections.ArrayEx`1.IsReadOnly"/> property.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.CopyFrom(System.Collections.Generic.IEnumerable{`0})">
            <overloads>
            Copies the elements of a specified collection to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </overloads>
            <summary>
            Copies the elements of the specified collection to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>,
            starting at the beginning of the target array.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements are copied to the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The number of elements in the source <paramref name="collection"/> is greater than the
            available space in the destination <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            <b>CopyFrom</b> performs an inverse <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> operation.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.CopyFrom(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Copies the elements of the specified collection to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>,
            starting at the specified index of the target array.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements are copied to the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <param name="arrayIndex">
            The zero-based index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><para>
            <paramref name="arrayIndex"/> is less than zero.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <paramref name="collection"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            <b>CopyFrom</b> performs an inverse <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> operation.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.CopyFrom(`0[])">
            <summary>
            Copies a one-dimensional <see cref="T:System.Array"/> to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, starting
            at the beginning of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the source of the elements copied to the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>. The <b>Array</b> must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <paramref name="array"/> is greater than the
            available space in the destination <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            <b>CopyFrom</b> performs an inverse <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> operation.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.CopyFrom(`0[],System.Int32)">
            <summary>
            Copies a one-dimensional <see cref="T:System.Array"/> to the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, starting
            at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the source of the elements copied to the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>. The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">
            The zero-based index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <paramref name="array"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            <b>CopyFrom</b> performs an inverse <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> operation.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.CopyTo(`0[])">
            <overloads>
            Copies the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to a one-dimensional <see cref="T:System.Array"/>.
            </overloads>
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the beginning of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is greater than the
            available space in the destination <paramref name="array"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="T"/> cannot be cast automatically to the type of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Equals(System.Collections.Generic.ICollection{`0})">
            <summary>
            Determines whether the specified collection contains the same elements in the same order
            as the current <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of elements to compare with the current <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, and all elements compare as equal when
            retrieved in the enumeration sequence for each collection.</item></list></returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})"/> to test the two
            collections for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Array.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)">
            <overloads>
            Gets the one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the
            specified multi-dimensional index.</overloads>
            <summary>
            Checks that the specified one-dimensional index is valid for the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="index">
            The zero-based index to check.</param>
            <returns>
            The specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </para></exception>
            <remarks>
            One-dimensional indexing is always possible, regardless of the <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> of the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the
            specified two-dimensional index.</summary>
            <param name="i">
            The zero-based index in the first dimension.</param>
            <param name="j">
            The zero-based index in the second dimension.</param>
            <returns>
            The one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the index
            position specified by <paramref name="i"/> and <paramref name="j"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/> or <paramref name="j"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/> or <paramref name="j"/> is equal to or greater than the number of
            elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal two.</exception>
            <remarks>
            <b>GetIndex</b> establishes the same index order as enumeration through a
            multi-dimensional standard <see cref="T:System.Array"/>, i.e. elements are adjacent in the second
            dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the
            specified three-dimensional index.</summary>
            <param name="i">
            The zero-based index in the first dimension.</param>
            <param name="j">
            The zero-based index in the second dimension.</param>
            <param name="k">
            The zero-based index in the third dimension.</param>
            <returns>
            The one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the index
            position specified by <paramref name="i"/>, <paramref name="j"/>, and <paramref
            name="k"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal two.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is equal to or
            greater than the number of elements in the corresponding dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></exception>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal three.</exception>
            <remarks>
            <b>GetIndex</b> establishes the same index order as enumeration through a
            multi-dimensional standard <see cref="T:System.Array"/>, i.e. elements are adjacent in the third
            dimension, and the first-dimension index is the slowest to change.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32[])">
            <summary>
            Gets the one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the
            specified multi-dimensional index.</summary>
            <param name="indices">
            An <see cref="T:System.Array"/> containing one zero-based index for each dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <returns>
            The one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the
            specified <paramref name="indices"/>.</returns>
            <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="indices"/> differs from <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="indices"/> contains a value that is less than zero.
            </para><para>-or-</para><para>
            <paramref name="indices"/> contains a value that is equal to or greater than the number
            of elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <remarks>
            <b>GetIndex</b> establishes the same index order as enumeration through a
            multi-dimensional standard <see cref="T:System.Array"/>, i.e. elements are adjacent in the
            highest dimension, and indices of higher dimensions change faster than those of lower
            dimensions.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetIndices(System.Int32)">
            <summary>
            Gets the multi-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that corresponds to the
            specified one-dimensional index.</summary>
            <param name="index">
            A one-dimensional index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <returns>
            An <see cref="T:System.Array"/> containing the zero-based indices for each dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> that correspond to the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero.
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </para></exception>
            <remarks>
            <b>GetIndices</b> establishes the same index order as enumeration through a
            multi-dimensional standard <see cref="T:System.Array"/>, i.e. indices of higher dimensions change
            faster than those of lower dimensions.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetLength(System.Int32)">
            <summary>
            Gets the number of elements in the specified dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </summary>
            <param name="dimension">
            The zero-based dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> whose length to determine.
            </param>
            <returns>
            The number of elements in the specified <paramref name="dimension"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><para>
            <paramref name="dimension"/> is less than zero.
            </para><para>-or-</para><para>
            <paramref name="dimension"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Array.GetLength(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32)">
            <overloads>
            Gets the element at the specified index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</overloads>
            <summary>
            Gets the element at the specified one-dimensional index.</summary>
            <param name="index">
            The zero-based one-dimensional index of the element to get.</param>
            <returns>
            The element at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Array.GetValue(System.Int32)"/> for details, but note that
            one-dimensional indexing is always possible, regardless of the <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> of the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified two-dimensional index.</summary>
            <param name="i">
            The zero-based first-dimension index of the element to get.</param>
            <param name="j">
            The zero-based second-dimension index of the element to get.</param>
            <returns>
            The element at the index position specified by <paramref name="i"/> and <paramref
            name="j"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal two.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/> or <paramref name="j"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/> or <paramref name="j"/> is equal to or greater than the number of
            elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Array.GetValue(System.Int32,System.Int32)"/> for details. The indexing
            order relative to one-dimensional indexing is established by <see cref="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified three-dimensional index.</summary>
            <param name="i">
            The zero-based first-dimension index of the element to get.</param>
            <param name="j">
            The zero-based second-dimension index of the element to get.</param>
            <param name="k">
            The zero-based third-dimension index of the element to get.</param>
            <returns>
            The element at the index position specified by <paramref name="i"/>, <paramref
            name="j"/>, and <paramref name="k"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal three.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is equal to or
            greater than the number of elements in the corresponding dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)"/> for details. The
            indexing order relative to one-dimensional indexing is established by <see
            cref="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32[])">
            <summary>
            Gets the element at the specified multi-dimensional index.</summary>
            <param name="indices">
            An <see cref="T:System.Array"/> containing one zero-based index for each dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <returns>
            The element at the specified <paramref name="indices"/>.</returns>
            <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="indices"/> differs from <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="indices"/> contains a value that is less than zero.
            </para><para>-or-</para><para>
            <paramref name="indices"/> contains a value that is equal to or greater than the number
            of elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Array.GetValue(System.Int32[])"/> for details. The indexing order
            relative to one-dimensional indexing is established by <see cref="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValueOrDefault(System.Int32)">
            <overloads>
            Gets the element at the specified index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, or the default
            value for <typeparamref name="T"/> if not found.</overloads>
            <summary>
            Gets the element at the specified one-dimensional index, or the default value for
            <typeparamref name="T"/> if not found.</summary>
            <param name="index">
            The zero-based one-dimensional index of the element to get.</param>
            <returns><para>
            The element at the specified <paramref name="index"/>.
            </para><para>-or-</para><para>
            The default value for <typeparamref name="T"/> if the specified <paramref name="index"/>
            is less than zero, or equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.</para></returns>
            <remarks>
            <b>GetValueOrDefault</b> is equivalent to <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32)"/> but never throws
            an <see cref="T:System.IndexOutOfRangeException"/> for an invalid <paramref name="index"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValueOrDefault(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified two-dimensional index, or the default value for
            <typeparamref name="T"/> if not found.</summary>
            <param name="i">
            The zero-based first-dimension index of the element to get.</param>
            <param name="j">
            The zero-based second-dimension index of the element to get.</param>
            <returns><para>
            The element at the index position specified by <paramref name="i"/> and <paramref
            name="j"/>.
            </para><para>-or-</para><para>
            The default value for <typeparamref name="T"/> if <paramref name="i"/> or <paramref
            name="j"/> is less than zero, or equal to or greater than the number of elements in the
            corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></returns>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal two.</exception>
            <remarks>
            <b>GetValueOrDefault</b> is equivalent to <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32,System.Int32)"/> but never
            throws an <see cref="T:System.ArgumentOutOfRangeException"/> for an invalid <paramref name="i"/>
            or <paramref name="j"/> index.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValueOrDefault(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified three-dimensional index, or the default value for
            <typeparamref name="T"/> if not found.</summary>
            <param name="i">
            The zero-based first-dimension index of the element to get.</param>
            <param name="j">
            The zero-based second-dimension index of the element to get.</param>
            <param name="k">
            The zero-based third-dimension index of the element to get.</param>
            <returns><para>
            The element at the index position specified by <paramref name="i"/>, <paramref
            name="j"/>, and <paramref name="k"/>.
            </para><para>-or-</para><para>
            The default value for <typeparamref name="T"/> if <paramref name="i"/>, <paramref
            name="j"/>, or <paramref name="k"/> is less than zero, or equal to or greater than the
            number of elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></returns>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal three.</exception>
            <remarks>
            <b>GetValueOrDefault</b> is equivalent to <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32,System.Int32,System.Int32)"/>
            but never throws an <see cref="T:System.ArgumentOutOfRangeException"/> for an invalid <paramref
            name="i"/>, <paramref name="j"/>, or <paramref name="k"/> index.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.GetValueOrDefault(System.Int32[])">
            <summary>
            Gets the element at the specified multi-dimensional index, or the default value for
            <typeparamref name="T"/> if not found.</summary>
            <param name="indices">
            An <see cref="T:System.Array"/> containing one zero-based index for each dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <returns><para>
            The element at the specified <paramref name="indices"/>.
            </para><para>-or-</para><para>
            The default value for <typeparamref name="T"/> if <paramref name="indices"/> contains a
            value that is less than zero, or equal to or greater than the number of elements in the
            corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></returns>
            <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="indices"/> differs from <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is a null reference.</exception>
            <remarks>
            <b>GetValueOrDefault</b> is equivalent to <see cref="M:Tektosyne.Collections.ArrayEx`1.GetValue(System.Int32[])"/> but never
            throws an <see cref="T:System.ArgumentOutOfRangeException"/> for an invalid <paramref
            name="indices"/> element.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.IndexOf(`0)">
            <overloads>
            Returns the zero-based index of the first occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/> or a portion of it.</overloads>
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in the
            entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the entire
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, if found; otherwise, -1.</returns>
            <remarks>
            Please refer to <see cref="M:System.Array.IndexOf``1(``0[],``0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="item">
            The element to locate. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.IndexOf(`0,System.Int32)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, starting at the specified index.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the search.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that starts at <paramref name="index"/>, if found;
            otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Array.IndexOf``1(``0[],``0,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in a
            subrange of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the search.</param>
            <param name="count">
            The number of elements to search.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that starts at <paramref name="index"/> and contains
            <paramref name="count"/> elements, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> at the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="item"/>.</param>
            <param name="item">
            The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Count"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/> for details.
            </para><para>
            <b>Insert</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> at the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="item"/>.</param>
            <param name="item">
            The element to insert. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Count"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks>
            <b>Add</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.LastIndexOf(`0)">
            <overloads>
            Returns the zero-based index of the last occurrence of the specified element in the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> or a portion of it.</overloads>
            <summary>
            Returns the zero-based index of the last occurrence of the specified element in the
            entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            The zero-based index of the last occurrence of <paramref name="item"/> in the entire
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, if found; otherwise, -1.</returns>
            <remarks>
            Please refer to <see cref="M:System.Array.LastIndexOf``1(``0[],``0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Returns the zero-based index of the last occurrence of the specified element in the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>, ending at the specified index.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <returns>
            The zero-based index of the last occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that ends at <paramref name="index"/>, if found;
            otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the zero-based index of the last occurrence of the specified element in a
            subrange of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <param name="count">
            The number of elements to search.</param>
            <returns>
            The zero-based index of the last occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that contains <paramref name="count"/> elements and ends
            at <paramref name="index"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of the specified element from the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </summary>
            <param name="item">
            The element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for details.
            </para><para>
            <b>Remove</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified element from the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </summary>
            <param name="item">
            The element to remove. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks>
            <b>Remove</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="index">
            The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/> for details.
            </para><para>
            <b>RemoveAt</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="index">
            The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only or has a fixed size.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/> for details.
            </para><para>
            <b>RemoveAt</b> always throws a <see cref="T:System.NotSupportedException"/> since <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> instances always have a fixed size.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Reverse">
            <overloads>
            Reverses the order of the elements in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> or a portion of it.
            </overloads>
            <summary>
            Reverses the order of the elements in the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Reverse(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.</summary>
            <param name="index">
            The zero-based starting index of the range of elements to reverse.</param>
            <param name="count">
            The number of elements to reverse.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of
            elements in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.SetValue(`0,System.Int32)">
            <overloads>
            Sets the element at the specified index in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</overloads>
            <summary>
            Sets the element at the specified one-dimensional index.</summary>
            <param name="value">
            The new value for the element at the specified <paramref name="index"/>.</param>
            <param name="index">
            The zero-based one-dimensional index of the element to set.</param>
            <exception cref="T:System.IndexOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ArrayEx`1.Length"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.SetValue(System.Object,System.Int32)"/> for details, but note that
            one-dimensional indexing is always possible, regardless of the <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> of the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.SetValue(`0,System.Int32,System.Int32)">
            <summary>
            Sets the element at the specified two-dimensional index.</summary>
            <param name="value">
            The new value for the element at the index position specified by <paramref name="i"/>
            and <paramref name="j"/>.</param>
            <param name="i">
            The zero-based first-dimension index of the element to set.</param>
            <param name="j">
            The zero-based second-dimension index of the element to set.</param>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal two.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/> or <paramref name="j"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/> or <paramref name="j"/> is equal to or greater than the number of
            elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)"/> for details. The
            indexing order relative to one-dimensional indexing is established by <see
            cref="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.SetValue(`0,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the element at the specified three-dimensional index.</summary>
            <param name="value">
            The new value for the element at the index position specified by <paramref name="i"/>,
            <paramref name="j"/>, and <paramref name="k"/>.</param>
            <param name="i">
            The zero-based first-dimension index of the element to set.</param>
            <param name="j">
            The zero-based second-dimension index of the element to set.</param>
            <param name="k">
            The zero-based third-dimension index of the element to set.</param>
            <exception cref="T:System.ArgumentException">
            <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/> does not equal three.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="i"/>, <paramref name="j"/>, or <paramref name="k"/> is equal to or
            greater than the number of elements in the corresponding dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)"/> for details.
            The indexing order relative to one-dimensional indexing is established by <see
            cref="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.SetValue(`0,System.Int32[])">
            <summary>
            Sets the element at the specified multi-dimensional index.</summary>
            <param name="value">
            The new value for the element at the specified <paramref name="indices"/>.</param>
            <param name="indices">
            An <see cref="T:System.Array"/> containing one zero-based index for each dimension of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</param>
            <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="indices"/> differs from <see cref="P:Tektosyne.Collections.ArrayEx`1.Rank"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indices"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="indices"/> contains a value that is less than zero.
            </para><para>-or-</para><para>
            <paramref name="indices"/> contains a value that is equal to or greater than the number
            of elements in the corresponding dimension of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.SetValue(System.Object,System.Int32[])"/> for details. The indexing
            order relative to one-dimensional indexing is established by <see cref="M:Tektosyne.Collections.ArrayEx`1.GetIndex(System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Sort">
            <overloads>
            Sorts the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> or a portion of it.</overloads>
            <summary>
            Sorts the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/> using the default comparer.</summary>
            <exception cref="T:System.InvalidOperationException">
            The default <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see
            cref="T:System.Collections.IComparer"/> implementation for <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Sort``1(``0[])"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/> using the specified comparison method.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparison"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Sort``1(``0[],System.Comparison{``0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/> using the specified comparer.</summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts a subrange of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> using the specified comparer.</summary>
            <param name="index">
            The zero-based starting index of the range to sort.</param>
            <param name="count">
            The length of the range to sort.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ArrayEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to a new <see cref="T:System.Array"/>.
            </summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the elements of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.ToArray"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.ToArrayWithShape">
            <summary>
            Copies the elements of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to a new <see cref="T:System.Array"/> with
            the same dimension lengths.</summary>
            <returns>
            An <see cref="T:System.Array"/> with the same dimension lengths and containing copies of the
            elements of the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</returns>
            <remarks>
            <b>ToArrayWithShape</b> returns an untyped <see cref="T:System.Array"/> object since we cannot
            specify the exact type of an <see cref="T:System.Array"/> of unknown rank. Clients should cast
            the return value to the desired target type.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> to another element type.</summary>
            <typeparam name="TOutput">
            The type of all elements in the converted collection.</typeparam>
            <param name="converter">
            A <see cref="T:System.Converter`2"/> method that converts all elements from 
            <typeparamref name="T"/> to <typeparamref name="TOutput"/>.</param>
            <returns>
            A new one-dimensional <see cref="T:System.Array"/> containing the elements copied from the
            current collection and converted to <typeparamref name="TOutput"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="converter"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})"/> for details. Note that
            this method returns a standard <see cref="T:System.Array"/>, not a <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> contains elements that match the
            conditions defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> contains one or more elements that match the
            conditions defined by <paramref name="predicate"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.Find(System.Predicate{`0})">
            <summary>
            Finds the first element in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that matches the conditions
            defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The first element that matches the conditions defined by <paramref name="predicate"/>,
            if found; otherwise, the default value for <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.Find``1(``0[],System.Predicate{``0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all elements in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that match the conditions defined by
            the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            A new one-dimensional <see cref="T:System.Array"/> containing all elements that match the
            conditions defined by <paramref name="predicate"/>, if found; otherwise, an empty
            <b>Array</b>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})"/> for details. Note that this method
            returns a standard <see cref="T:System.Array"/>, not a <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindIndex(System.Predicate{`0})">
            <overloads>
            Returns the zero-based index of the first element in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, or a
            portion of it, that matches the conditions defined by the specified predicate.
            </overloads>
            <summary>
            Returns the zero-based index of the first element in the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/>
            that matches the conditions defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the first element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the first element in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>,
            starting at the specified index, that matches the conditions defined by the specified
            predicate.</summary>
            <param name="index">
            The zero-based starting index of the search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the first element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the first element in a subrange of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> that matches the conditions defined by the specified predicate.
            </summary>
            <param name="index">
            The zero-based starting index of the search.</param>
            <param name="count">
            The number of elements to search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the first element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last element in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> that matches the conditions
            defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The last element that matches the conditions defined by <paramref name="predicate"/>, if
            found; otherwise, the default value for <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindLastIndex(System.Predicate{`0})">
            <overloads>
            Returns the zero-based index of the last element in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, or a
            portion of it, that matches the conditions defined by the specified predicate.
            </overloads>
            <summary>
            Returns the zero-based index of the last element in the entire <see cref="T:Tektosyne.Collections.ArrayEx`1"/>
            that matches the conditions defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the last element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the last element in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, ending
            at the specified index, that matches the conditions defined by the specified predicate.
            </summary>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the last element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the last element in a subrange of the <see
            cref="T:Tektosyne.Collections.ArrayEx`1"/> that matches the conditions defined by the specified predicate.
            </summary>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <param name="count">
            The number of elements to search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the last element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})"/>
            for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</summary>
            <param name="action">
            The <see cref="T:System.Action`1"/> method to perform on each element.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ArrayEx`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether all elements in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> match the conditions
            defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            <c>true</c> if all elements in the <see cref="T:Tektosyne.Collections.ArrayEx`1"/> match the conditions defined
            by <paramref name="predicate"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})"/> for details.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.BraidedTree`2">
            <summary>
            Provides a generic collection of keys and values that are sorted using a braided search
            tree.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection. Keys cannot be null references.</typeparam>
            <typeparam name="TValue">
            The type of all values that are associated with the keys. If <typeparamref name="TValue"/>
            is a reference type, values may be null references.</typeparam>
            <remarks><para>
            <b>BraidedTree</b> provides a binary search tree, similar to the standard class <see
            cref="T:System.Collections.Generic.SortedDictionary`2"/>, but with the following differences:
            </para><list type="bullet"><item>
            The tree structure is exposed through the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> class.
            You can find the node associated with any given key and follow a reference to its left 
            descendant, right descendant, or parent node.
            </item><item>
            The key sorting order is represented not only indirectly by the tree structure, but also
            directly by a doubly-linked list that connects all nodes – hence the term "braided". A
            single step reaches the smallest or greatest node from the root node, or the next-smaller or
            next-greater node from any tree node. <see cref="M:Tektosyne.Collections.BraidedTree`2.FindRange(`0,`0)"/>
            exploits this fact to quickly find all elements within a given key range.
            </item><item>
            The tree structure is balanced for minimal tree height by associating each node with a
            random priority, rather than by alternating node "colors" as in a red-black tree.
            </item></list><para>
            Like other <b>Tektosyne.Collections</b> classes, <b>BraidedTree</b> also provides the
            following extra features:
            </para><list type="bullet"><item>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of any <typeparamref name="TValue"/> that
            implements the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface is automatically checked against
            the associated dictionary key when a key or value is changed or inserted.
            </item><item>
            <see cref="M:Tektosyne.Collections.BraidedTree`2.Copy"/> creates a deep copy of the collection by
            invoking <see cref="M:System.ICloneable.Clone"/> on each value. This feature requires that all copied
            values implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="M:Tektosyne.Collections.BraidedTree`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})"/> compares two collections with identical
            element types for value equality of all elements. The collections compare as equal if they
            contain the same elements in the same sorting order. The internal tree structure is
            irrelevant for determining equality.
            </item></list><para>
            <b>BraidedTree</b> implements the <c>RandomizedSearchTree</c> class by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.55ff.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> class that is
            empty and uses the default comparer for <typeparamref name="TKey"/>.</summary>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> class that is
            empty and uses the specified comparer for <typeparamref name="TKey"/>.</summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method to use when comparing keys, or a null
            reference to use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="TKey"/>.
            </param>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> class that
            contains elements copied from the specified collection and uses the default comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            This constructor calls <see cref="M:Tektosyne.Collections.BraidedTree`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})"/> to add all elements in the specified
            <paramref name="dictionary"/> to the new <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> class that
            contains elements copied from the specified collection and uses the specified comparer
            for <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method to use when comparing keys, or a null
            reference to use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="TKey"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference.</para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            This constructor calls <see cref="M:Tektosyne.Collections.BraidedTree`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})"/> to add all elements in the specified
            <paramref name="dictionary"/> to the new <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTree`2._count">
            <summary>
            The number of key-and-value pairs contained in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTree`2._keys">
            <summary>Backs the <see cref="P:Tektosyne.Collections.BraidedTree`2.Keys"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTree`2._values">
            <summary>Backs the <see cref="P:Tektosyne.Collections.BraidedTree`2.Values"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTree`2.Random">
            <summary>
            Used to generate random <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Priority"/> values.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTree`2.Comparison">
            <summary>
            The <see cref="T:System.Comparison`1"/> method that is used to determine the relative
            order of keys in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <remarks>
            <b>Comparison</b> is used to determine the order of <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> objects within the binary <see cref="T:Tektosyne.Collections.BraidedTree`2"/> structure,
            and also within the chain of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> and <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> references.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <value>
            The number of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements contained in the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</value>
            <remarks>
            <b>Count</b> returns a counter value maintained by the <see cref="M:Tektosyne.Collections.BraidedTree`2.TryAddNode(`0,`1,Tektosyne.Collections.BraidedTreeNode{`0,`1}@)"/> and <see
            cref="M:Tektosyne.Collections.BraidedTree`2.RemoveNode(Tektosyne.Collections.BraidedTreeNode{`0,`1})"/> methods. Accessing this property is therefore an O(1) operation.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.FirstNode">
            <summary>
            Gets the smallest <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <value><para>
            The smallest <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </para><para>-or-</para><para>
            <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/> if the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is empty.
            </para></value>
            <remarks>
            <b>FirstNode</b> returns the value of the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> property of the <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/>. This is an O(1) operation.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> has a fixed
            size.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> has a fixed size; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.BraidedTree`2.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is also read-only, and vice
            versa.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is
            read-only.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.
            </para><para>
            <b>IsReadOnly</b> always returns <c>false</c> since the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> class does not offer a read-only wrapper.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is
            synchronized (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is synchronized
            (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is read, and <paramref name="key"/> does not exist in the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.
            </exception>
            <remarks>
            This indexer calls <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNode(`0)"/> to find the specified <paramref
            name="key"/>, and <see cref="M:Tektosyne.Collections.BraidedTree`2.TryAddNode(`0,`1,Tektosyne.Collections.BraidedTreeNode{`0,`1}@)"/> to add a new element or set the <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Value"/> of an existing element.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</value>
            <remarks>
            <b>Keys</b> starts at <see cref="P:Tektosyne.Collections.BraidedTree`2.FirstNode"/> and follows the chain of <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references. Each step is an O(1) operation.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.LastNode">
            <summary>
            Gets the greatest <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <value><para>
            The greatest <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </para><para>-or-</para><para>
            <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/> if the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is empty.
            </para></value>
            <remarks>
            <b>LastNode</b> returns the value of the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> property of the <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/>. This is an O(1) operation.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTree`2.RootNode">
            <summary>
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> that is the root of the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <remarks><para>
            The <b>RootNode</b> holds no key or value, and is never removed from the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>. An empty <see cref="T:Tektosyne.Collections.BraidedTree`2"/>
            contains only the <b>RootNode</b>.
            </para><para>
            All other nodes are descendants of the <b>RootNode</b>. The chain of <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/> references from any other node of the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/> ends in the <b>RootNode</b>, whose <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/> property is always a null reference.
            </para><para>
            The chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> and <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references always begin and end with the
            <b>RootNode</b>. When iterating through the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>
            starting from <see cref="P:Tektosyne.Collections.BraidedTree`2.FirstNode"/> or <see cref="P:Tektosyne.Collections.BraidedTree`2.LastNode"/>, reaching the
            <b>RootNode</b> indicates the end of the iteration.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>,
            obtain a lock on the <b>SyncRoot</b> object rather than the collection itself. A
            read-only view always returns the same <b>SyncRoot</b> object as the underlying writable
            collection.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTree`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</value>
            <remarks>
            <b>Values</b> starts at <see cref="P:Tektosyne.Collections.BraidedTree`2.FirstNode"/> and follows the chain of <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references. Each step is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.CheckTargetArray(System.Array,System.Int32)">
            <summary>
            Checks the bounds of the specified array and the specified starting index against the
            size of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination for elements copied from
            the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>. The <b>Array</b> must have zero-based
            indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Add(`0,`1)">
            <overloads>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</overloads>
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks>
            <b>Add</b> calls <see cref="M:Tektosyne.Collections.BraidedTree`2.TryAddNode(`0,`1,Tektosyne.Collections.BraidedTreeNode{`0,`1}@)"/> with the specified <paramref name="key"/> and
            <paramref name="value"/>, but throws an <see cref="T:System.ArgumentException"/> if <paramref
            name="key"/> already exists in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified key-and-value pair to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>
            already exists in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.Collections.BraidedTree`2.Add(`0,`1)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>. </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements to add.</param>
            <exception cref="T:System.ArgumentException"><para>
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> already contains one or more keys in the
            specified <paramref name="dictionary"/>.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains one or more duplicate keys.</para></exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks>
            <b>AddRange</b> calls <see cref="M:Tektosyne.Collections.BraidedTree`2.Add(`0,`1)"/> for each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> in the specified <paramref name="dictionary"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks><para>
            <b>Clear</b> resets <see cref="P:Tektosyne.Collections.BraidedTree`2.Count"/> to zero and removes any other <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> instances attached to the permanent <see
            cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/>. This is an O(1) operation.
            </para><note type="caution">
            Any removed <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> instances are <em>not</em>
            cleared, rendering all their tree structure properties invalid.</note></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</returns>
            <remarks>
            <b>Clone</b> does not necessarily preserve the internal structure of the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>, due to randomized tree rebalancing. The sorting
            order of all elements is preserved, however.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> contains the specified
            key-and-value pair.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> is found in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> succeeds if <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNode(`0)"/> finds the <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the specified <paramref name="pair"/>, and
            the resulting <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> also contains its <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            <b>ContainsKey</b> succeeds if <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNode(`0)"/> finds a <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> for the specified <paramref name="key"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> contains the specified
            value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> contains an element with the
            specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>ContainsValue</b> succeeds if <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNodeByValue(`1)"/> finds a <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> for the specified <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.BraidedTree`2.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all 
            <typeparamref name="TValue"/> values. The <typeparamref name="TKey"/> keys are always
            duplicated by a shallow copy.
            </para><para>
            <b>Copy</b> does not necessarily preserve the internal structure of the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>, due to randomized tree rebalancing. The sorting
            order of all elements is preserved, however.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.BraidedTree`2"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>
            <b>CopyTo</b> starts at <see cref="P:Tektosyne.Collections.BraidedTree`2.FirstNode"/> and follows the chain of <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references. Each step is an O(1) operation.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.BraidedTree`2"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Determines whether the specified collection contains the same key-and-value pairs in the
            same order as the current <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements to
            compare with the current <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.BraidedTree`2"/>, and all elements compare as
            equal when retrieved in the enumeration sequence for each collection.
            </item></list></returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})"/> to test the two
            collections for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.FindNode(`0)">
            <summary>
            Finds the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the specified key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> whose <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> equals the specified <paramref name="key"/>, if found; otherwise, a null
            reference.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            <b>FindNode</b> performs a binary search within the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> for the specified <paramref name="key"/>. This is an O(ld n) operation.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.FindNodeByValue(`1)">
            <summary>
            Finds the smallest <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the specified value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            The smallest <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> whose <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Value"/> equals the specified <paramref
            name="value"/>, if found; otherwise, a null reference.</returns>
            <remarks>
            <b>FindNodeByValue</b> starts with <see cref="P:Tektosyne.Collections.BraidedTree`2.FirstNode"/> and follows the chain of <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references until the specified <paramref
            name="value"/> is found. This is an O(n) operation.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.FindNodeOrPrevious(`0)">
            <summary>
            Finds the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the specified key, or the previous <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> if not found.</summary>
            <param name="key">
            The key to locate.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> whose <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> equals the specified <paramref name="key"/>, if found.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> with the greatest <see
            cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> that is not greater than the specified
            <paramref name="key"/>, if any.
            </para><para>-or-</para><para>
            The <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/> if neither the specified <paramref name="key"/> nor a
            previous <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> was found.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            <b>FindNodeOrPrevious</b> performs a binary search within the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/> for the specified <paramref name="key"/>. This is an
            O(ld n) operation.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.FindRange(`0,`0)">
            <overloads>
            Finds all key-and-value pairs within the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> whose
            keys lie within the specified range.</overloads>
            <summary>
            Finds all key-and-value pairs within the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> whose
            keys lie within the specified range.</summary>
            <param name="lower">
            The lower bound of the key range to search.</param>
            <param name="upper">
            The upper bound of the key range to search.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.SortedList`2"/> ordered by <see cref="F:Tektosyne.Collections.BraidedTree`2.Comparison"/> that
            contains all elements whose keys are equal to or greater than <paramref name="lower"/>,
            and equal to or smaller than <paramref name="upper"/>.</returns>
            <remarks><para>
            <b>FindRange</b> immediately returns an empty collection if <paramref name="lower"/> is
            greater than <paramref name="upper"/>.
            </para><para>
            Otherwise, <b>FindRange</b> calls <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNodeOrPrevious(`0)"/> to determine the <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> whose key is equal to or less than <paramref
            name="lower"/>, and then follows the chain of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references until <paramref name="upper"/> is exceeded.
            </para><para>
            Depending on the distance between <paramref name="lower"/> and <paramref name="upper"/>,
            the runtime of this operation ranges from O(ld n) to O(n).</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.FindRange(`0,`0,System.Predicate{Tektosyne.Collections.BraidedTreeNode{`0,`1}})">
            <summary>
            Finds all key-and-value pairs within the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> whose
            keys lie within the specified range, filtered by the specified condition.</summary>
            <param name="lower">
            The lower bound of the key range to search.</param>
            <param name="upper">
            The upper bound of the key range to search.</param>
            <param name="condition"><para>
            The <see cref="T:System.Predicate`1"/> that specifies an additional condition which must hold
            for each <see cref="T:Tektosyne.Collections.BraidedTree`2"/> found within the key range.
            </para><para>-or-</para><para>
            A null reference if there is no additional condition.</para></param>
            <returns>
            A <see cref="T:System.Collections.Generic.SortedList`2"/> ordered by <see cref="F:Tektosyne.Collections.BraidedTree`2.Comparison"/> that
            contains all elements for which <paramref name="condition"/> holds and whose keys are
            equal to or greater than <paramref name="lower"/>, and equal to or smaller than
            <paramref name="upper"/>.</returns>
            <remarks>
            <b>FindRange</b> is identical with the basic <see cref="M:Tektosyne.Collections.BraidedTree`2.FindRange(`0,`0)"/>
            overload but also tests that the specified <paramref name="condition"/> holds before
            adding a found key-and-value pair to the output collection.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
            <remarks>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> starts at <see cref="P:Tektosyne.Collections.BraidedTree`2.FirstNode"/> and follows the chain
            of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references. Each iteration step is
            an O(1) operation.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Remove(`0)">
            <overloads>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </overloads>
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the associated element was removed;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks>
            <b>Remove</b> calls <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNode(`0)"/> to find the specified <paramref
            name="key"/>, and then <see cref="M:Tektosyne.Collections.BraidedTree`2.RemoveNode(Tektosyne.Collections.BraidedTreeNode{`0,`1})"/> with the resulting <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> which may be a null reference.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified key-and-value pair from the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks>
            <b>Remove</b> calls <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNode(`0)"/> to find the <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the specified <paramref name="pair"/>, and
            then <see cref="M:Tektosyne.Collections.BraidedTree`2.RemoveNode(Tektosyne.Collections.BraidedTreeNode{`0,`1})"/> if a matching <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>
            is found and also contains a matching <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Value"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.RemoveNode(Tektosyne.Collections.BraidedTreeNode{`0,`1})">
            <summary>
            Removes the specified <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> from the <see
            cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> to remove.</param>
            <returns>
            <c>true</c> if <paramref name="node"/> is valid and was removed; otherwise,
            <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="node"/> indicates a <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>
            that is a null reference or differs from the current instance.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks><para>
            <b>RemoveNode</b> rebalances the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> to account for
            the removal of the specified <paramref name="node"/>. All structural properties of the
            specified <paramref name="node"/> are cleared, but its <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Value"/> remain intact.
            </para><para>
            <b>RemoveNode</b> returns <c>false</c> and does nothing if the specified <paramref
            name="node"/> is a null reference or the <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/>, and throws an exception
            if <paramref name="node"/> belongs to a different tree structure, or to none at all.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.ToArray">
            <summary>
            Copies the key-and-value pairs of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> to a new
            <see cref="T:System.Array"/>.</summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements of the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</returns>
            <remarks>
            <b>ToArray</b> has the same effect as <see cref="M:Tektosyne.Collections.BraidedTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"/> with a starting index of
            zero, but also allocates the target array.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.TryAddNode(`0,`1,Tektosyne.Collections.BraidedTreeNode{`0,`1}@)">
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>, and
            returns the added <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <param name="node"><para>
            On success, returns the new <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> that was added
            to the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </para><para>
            On failure, returns the unchanged existing <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>
            that was found for <paramref name="key"/>.</para></param>
            <returns>
            <c>true</c> if a new <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> was added; <c>false</c>
            if <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> is read-only.</exception>
            <remarks>
            <b>AddNode</b> performs a binary search for the specified <paramref name="key"/>. This
            is an O(ld n) operation, regardless of whether <paramref name="key"/> is found or not.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTree`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            <b>TryGetValue</b> calls <see cref="M:Tektosyne.Collections.BraidedTree`2.FindNode(`0)"/> to find the <paramref
            name="value"/> associated with the specified <paramref name="key"/>.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.BraidedTreeNode`2">
            <summary>
            Provides a generic tree node within a <see cref="T:Tektosyne.Collections.BraidedTree`2"/>.</summary>
            <typeparam name="TKey">
            The type of the key. Keys cannot be null references.</typeparam>
            <typeparam name="TValue">
            The type of the value that is associated with the key. If <typeparamref name="TValue"/> is a
            reference type, the value may be null references.</typeparam>
            <remarks><para>
            <b>BraidedTreeNode</b> represents a key-and-value pair within a <see cref="T:Tektosyne.Collections.BraidedTree`2"/>. All references to neighboring <b>BraidedTreeNode</b> instances within the tree
            structure or sorting order are exposed as read-only properties.
            </para><para>
            <b>BraidedTreeNode</b> implements the <c>RandomizedNode</c> class by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.55ff.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.#ctor(Tektosyne.Collections.BraidedTree{`0,`1})">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> class with
            the specified tree structure.</summary>
            <param name="tree">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tree"/> is a null reference.</exception>
            <remarks>
            <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Priority"/> is set to -1.0. The <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> property remains at its
            default value, which is a null reference if <typeparamref name="TKey"/> is a reference
            type. Use this constructor only for the <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/>
            of the specified <paramref name="tree"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.#ctor(Tektosyne.Collections.BraidedTree{`0,`1},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> class with
            the specified tree structure, key and value.</summary>
            <param name="tree">
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</param>
            <param name="key">
            The key of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</param>
            <param name="value">
            The value of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tree"/> or <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <remarks>
            <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Priority"/> is set to a random value in the open interval [0, 1).</remarks>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._tree">
            <summary>
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._priority">
            <summary>
            The balancing priority of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._left">
            <summary>
            The left descendant of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the tree
            structure.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._next">
            <summary>
            The next <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the sorting order.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._parent">
            <summary>
            The parent of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the tree structure.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._previous">
            <summary>
            The previous <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the sorting order.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._right">
            <summary>
            The right descendant of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the tree
            structure.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2._value">
            <summary>
            The value of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.BraidedTreeNode`2.Key">
            <summary>
            The key of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
            <remarks><para>
            <b>Key</b> never returns a null reference, except for the <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/> of the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>.
            </para><para>
            The <b>Key</b> of a <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> determines its location
            within the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Left">
            <summary>
            Gets the left descendant of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the tree
            structure.</summary>
            <value>
            The left descendant of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>, if any. The
            default is a null reference.</value>
            <remarks>
            The chains of <b>Left</b>, <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Right"/>, and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/> references
            determine the structure of the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Next">
            <summary>
            Gets the next <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the sorting order.
            </summary>
            <value>
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> whose <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> is sorted
            immediately after this instance, if any. The default is the current instance.</value>
            <remarks>
            The chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> and <b>Next</b> references determine the sorting
            order within the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>. Both chains begin and end with the
            tree’s <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Parent">
            <summary>
            Gets the parent of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the tree
            structure.</summary>
            <value>
            The parent of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>, if any. The default is a
            null reference.</value>
            <remarks><para>
            The chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Left"/>, <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Right"/>, and <b>Parent</b> references
            determine the structure of the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>.
            </para><para>
            Every <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> that has a valid <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>
            and <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> also has a valid <b>Parent</b>. The <b>Parent</b> of the topmost
            valid node is the permanent <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/> of the 
            containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/> which has neither <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> nor <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Value"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Previous">
            <summary>
            Gets the previous <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the sorting order.
            </summary>
            <value>
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> whose <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/> is sorted
            immediately before this instance, if any. The default is the current instance.</value>
            <remarks>
            The chains of <b>Previous</b> and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references determine the sorting
            order within the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>. Both chains begin and end with the
            tree’s <see cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Priority">
            <summary>
            Gets the priority of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
            <value>
            The balancing priority of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</value>
            <remarks>
            <b>Priority</b> usually returns a random value in the interval [0, 1] that is used to
            balance the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>. The <b>Priority</b> of the <see
            cref="F:Tektosyne.Collections.BraidedTree`2.RootNode"/> is always -1.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Right">
            <summary>
            Gets the right descendant of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> in the tree
            structure.</summary>
            <value>
            The right descendant of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>, if any. The
            default is a null reference.</value>
            <remarks>
            The chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Left"/>, <b>Right</b>, and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/> references
            determine the structure of the containing <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Tree">
            <summary>
            Gets the <see cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
            <value>
            The <see cref="T:Tektosyne.Collections.BraidedTree`2"/> that contains the <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>, if any; otherwise, a null reference.</value>
            <remarks>
            <b>Tree</b> is set to a valid <see cref="T:Tektosyne.Collections.BraidedTree`2"/> upon construction,
            and to a null reference when removed from that tree structure. Once removed, the <see
            cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> cannot be added to another tree structure, so
            <b>Tree</b> remains a null reference.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.BraidedTreeNode`2.Value">
            <summary>
            Gets or sets the value of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>.</summary>
            <value>
            The value of the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>. The default is the default
            value for <typeparamref name="TValue"/>.</value>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the current <see cref="F:Tektosyne.Collections.BraidedTreeNode`2.Key"/>.
            </exception>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.AddList(Tektosyne.Collections.BraidedTreeNode{`0,`1})">
            <summary>
            Adds the specified <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> to the linked list,
            sorted after the current instance.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> to add.</param>
            <remarks>
            <b>AddList</b> updates the chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/>
            references so that the specified <paramref name="node"/> is sorted immediately after the
            current instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.RemoveList">
            <summary>
            Removes the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> from the linked list.</summary>
            <remarks>
            <b>RemoveList</b> updates the chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/>
            references to exclude the current instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.RotateLeft">
            <summary>
            Rotates the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> to the left within the tree
            structure.</summary>
            <remarks>
            <b>RotateLeft</b> implements the <c>rotateLeft</c> algorithm by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.58.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.RotateRight">
            <summary>
            Rotates the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> to the right within the tree
            structure.</summary>
            <remarks>
            <b>RotateRight</b> implements the <c>rotateRight</c> algorithm by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.58.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.AddTree(Tektosyne.Collections.BraidedTreeNode{`0,`1},System.Boolean)">
            <summary>
            Adds the specified <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> to the tree structure, as
            a leaf node of the current instance.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> to add.</param>
            <param name="isRight">
            <c>true</c> to add <paramref name="node"/> as the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Right"/> descendant;
            <c>false</c> to add <paramref name="node"/> as the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Left"/> descendant. The
            corresponding property must be a null reference.</param>
            <remarks>
            <b>AddTree</b> also sets the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/> reference of the specified <paramref
            name="node"/> to the current instance, and updates the chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/>
            and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references to include <paramref name="node"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.BubbleDown">
            <summary>
            Moves the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> towards the leaves of the tree
            structure.</summary>
            <remarks><para>
            <b>BubbleDown</b> recursively rotates the current instance downward until both of its
            descendants are null references.
            </para><para>
            <b>BubbleDown</b> implements the <c>bubbleDown</c> algorithm by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.59.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.BubbleUp">
            <summary>
            Moves the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> towards the root of the tree
            structure.</summary>
            <remarks><para>
            <b>BubbleUp</b> recursively rotates the current instance upward until its <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Priority"/> is not less than that of its <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/>.
            </para><para>
            <b>BubbleDown</b> implements the <c>bubbleDown</c> algorithm by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.59.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.Clear">
            <summary>
            Clears all references to other <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> instances.
            </summary>
            <remarks>
            <b>Clear</b> resets the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> properties to the
            current instance, and the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Left"/>, <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Right"/> and <see
            cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/>, properties to null references. Other properties remain unchanged,
            including the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/> property.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.BraidedTreeNode`2.RemoveTree">
            <summary>
            Removes the <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/>, which must be a leaf node, from
            the tree structure.</summary>
            <remarks><para>
            <b>RemoveTree</b> sets the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Left"/> or <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Right"/> reference of the
            <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Parent"/> node, whichever matches the current instance, to a null reference,
            and updates the chains of <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Previous"/> and <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Next"/> references to
            exclude the current instance.
            </para><para>
            All <see cref="T:Tektosyne.Collections.BraidedTreeNode`2"/> references of the current instance are
            reset to default values, as with <see cref="M:Tektosyne.Collections.BraidedTreeNode`2.Clear"/>. Moreover, <b>RemoveTree</b> sets
            the <see cref="P:Tektosyne.Collections.BraidedTreeNode`2.Tree"/> property to a null reference.</para></remarks>
        </member>
        <member name="T:Tektosyne.Collections.CollectionsUtility">
            <summary>
            Provides auxiliary methods for <b>System.Collections</b>.</summary>
            <remarks>
            <b>CollectionsUtility</b> methods usually omit explicit argument checking for performance
            reasons if the error case would result in identical or similar exceptions within the method
            body.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.AnyRandom``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Determines whether any element of a generic <see cref="T:System.Collections.Generic.IList`1"/> collection satisfies
            a condition, starting with a random element.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection containing all elements.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> to test on one or more randomly selected <paramref
            name="list"/> elements.</param>
            <returns>
            <c>true</c> if <paramref name="predicate"/> succeeded for any one <paramref
            name="list"/> element; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="predicate"/> is a null reference.</exception>
            <remarks><para>
            <b>AnyRandom</b> first selects a random element within the specified <paramref
            name="list"/>, using the <see cref="F:Tektosyne.MersenneTwister.Default"/> instance of the <see
            cref="T:Tektosyne.MersenneTwister"/> class.
            </para><para>
            <b>AnyRandom</b> then tests the specified <paramref name="predicate"/> on the selected
            element. As long as the result is <c>false</c>, <b>AnyRandom</b> tests <paramref
            name="predicate"/> on each remaining <paramref name="list"/> element in turn.
            </para><para>
            <b>AnyRandom</b> returns <c>true</c> as soon as <paramref name="predicate"/> succeeds
            for any one element, and <c>false</c> if <paramref name="predicate"/> has failed for
            every <paramref name="list"/> element.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)">
            <overloads>
            Changes all occurrences of the specified key in a collection.</overloads>
            <summary>
            Changes the specified key in an <see cref="T:System.Collections.Generic.IDictionary`2"/> collection to
            another key.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> collection whose keys to change.</param>
            <param name="oldKey">
            The key to remove from <paramref name="dictionary"/>.</param>
            <param name="newKey">
            The key to store in <paramref name="dictionary"/> with the value of the <paramref
            name="oldKey"/> element.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/>, <paramref name="oldKey"/>, or <paramref name="newKey"/>
            is a null reference.</exception>
            <remarks><para>
            <b>ChangeKey</b> removes the element with the specified <paramref name="oldKey"/> from
            the specified <paramref name="dictionary"/>, and then adds the element’s old <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> back with the specified <paramref
            name="newKey"/>, effectively changing the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>
            component of an element.
            </para><para>
            If the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of a changed element
            implements the <see cref="T:Tektosyne.Collections.IMutableKeyedValue`1"/> interface, its <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property is also set to <paramref name="newKey"/>.
            </para><para>
            If the specified <paramref name="oldKey"/> does not exist in the <paramref
            name="dictionary"/>, <b>ChangeKey</b> silently adds an element with <paramref
            name="newKey"/> and the default value for <typeparamref name="TValue"/>.
            </para><para>
            If the specified <paramref name="newKey"/> already exists in the <paramref
            name="dictionary"/>, it is silently overwritten.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.ChangeKey``2(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``0)">
            <summary>
            Changes all occurrences of the specified key in an <see cref="T:System.Collections.Generic.IList`1"/> collection to
            another key.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="list">
            An <see cref="T:System.Collections.Generic.IList`1"/> collection containing the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements whose keys to change.</param>
            <param name="oldKey">
            The key to remove from <paramref name="list"/>.</param>
            <param name="newKey">
            The key to store in <paramref name="list"/> with the values of all <paramref
            name="oldKey"/> elements.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/>, <paramref name="oldKey"/>, or <paramref name="newKey"/> is a
            null reference.</exception>
            <remarks><para>
            <b>ChangeKey</b> changes all occurrences of the specified <paramref name="oldKey"/> in
            the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> components of the specified <paramref
            name="list"/> to the specified <paramref name="newKey"/>. The index positions and <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> components of the elements containing
            <paramref name="oldKey"/> remain unchanged.
            </para><para>
            If the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of a changed element
            implements the <see cref="T:Tektosyne.Collections.IMutableKeyedValue`1"/> interface, its <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property is also set to <paramref name="newKey"/>.
            </para><para>
            If the specified <paramref name="oldKey"/> does not exist in the <paramref
            name="list"/>, <b>ChangeKey</b> silently adds an element with <paramref name="newKey"/>
            and the default value for <typeparamref name="TValue"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.ConditionalSwap``1(System.Collections.Generic.IList{``0},System.Comparison{``0},System.Int32,System.Int32)">
            <summary>
            Conditionally swaps two elements in the specified <see cref="T:System.Collections.Generic.IList`1"/> collection,
            based on the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection whose elements to swap.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order.</param>
            <param name="first">
            The zero-based index of the first element to swap.</param>
            <param name="second">
            The zero-based index of the second element to swap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="comparison"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="first"/> or <paramref name="second"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="first"/> or <paramref name="second"/> is equal to or greater than the
            <see cref="P:System.Collections.Generic.ICollection`1.Count"/> of the specified <paramref name="list"/>.
            </para></exception>
            <remarks>
            <b>ConditionalSwap</b> compares the elements at the <paramref name="first"/> and
            <paramref name="second"/> indices within the specified <paramref name="list"/> using the
            specified <paramref name="comparison"/>, and swaps them exactly if the <paramref
            name="first"/> element compares greater than the <paramref name="second"/> element.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.CountKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <overloads>
            Counts the all occurrences of the specified key in a collection.</overloads>
            <summary>
            Counts the occurrences of the specified key in an <see cref="T:System.Collections.Generic.IDictionary`2"/> collection.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> collection whose keys to count.</param>
            <param name="key">
            The key to count in <paramref name="dictionary"/>.</param>
            <returns>
            One if <paramref name="key"/> was found in <paramref name="dictionary"/>; otherwise,
            zero.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> or <paramref name="key"/> is a null reference.</exception>
            <remarks>
            <b>CountKey</b> returns the number of occurrences of the specified <paramref
            name="key"/> in the specified <paramref name="dictionary"/>. By definition, this number
            is either zero or one. The <paramref name="dictionary"/> remains unchanged.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.CountKey``2(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,``1}},``0)">
            <summary>
            Counts the occurrences of the specified key in an <see cref="T:System.Collections.Generic.IList`1"/> collection.
            </summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="list">
            An <see cref="T:System.Collections.Generic.IList`1"/> collection containing the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements whose keys to count.</param>
            <param name="key">
            The key to count in <paramref name="list"/>.</param>
            <returns>
            The number of occurrences of <paramref name="key"/> in <paramref name="list"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="key"/> is a null reference.</exception>
            <remarks>
            <b>CountKey</b> returns the number of occurrences of the specified <paramref
            name="key"/> in the specified <paramref name="list"/>. This number can be greater than
            one because <see cref="T:System.Collections.Generic.IList`1"/> does not require unique <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> values. The <paramref name="list"/> remains unchanged.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.DeleteKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <overloads>
            Deletes all elements with the specified key from a collection.</overloads>
            <summary>
            Deletes the element with the specified key from an <see cref="T:System.Collections.Generic.IDictionary`2"/> collection.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> collection whose element to delete.</param>
            <param name="key">
            The key of the element to delete from <paramref name="dictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> or <paramref name="key"/> is a null reference.</exception>
            <remarks><para>
            <b>DeleteKey</b> deletes the element with the specified <paramref name="key"/> by
            invoking <see cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)"/> on the specified <paramref
            name="dictionary"/>.
            </para><para>
            This method is provided only for symmetry with the <see cref="T:System.Collections.Generic.IList`1"/> overload of
            <b>DeleteKey</b>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.DeleteKey``2(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,``1}},``0)">
            <summary>
            Deletes all elements with the specified key from an <see cref="T:System.Collections.Generic.IList`1"/> collection.
            </summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="list">
            An <see cref="T:System.Collections.Generic.IList`1"/> collection containing the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements to delete.</param>
            <param name="key">
            The key of the elements to delete from <paramref name="list"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="key"/> is a null reference.</exception>
            <remarks>
            <b>DeleteKey</b> deletes all elements with the specified <paramref name="key"/> from the
            specified <paramref name="list"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.IndexArray(System.Int32)">
            <summary>
            Creates an <see cref="T:System.Array"/> of zero-based <see cref="T:System.Int32"/> indices with the
            specified element count.</summary>
            <param name="count">
            The number of elements in the returned <see cref="T:System.Array"/>.</param>
            <returns>
            An <see cref="T:System.Array"/> containing all <see cref="T:System.Int32"/> numbers from zero to <paramref
            name="count"/> - 1, stored in ascending order.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is less than zero.</exception>
            <remarks>
            The <see cref="T:System.Int32"/> value stored at each index position in an <b>IndexArray</b>
            equals the index itself, i.e. a[i] = i for all i.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.MoveItem``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Moves the specified element in a generic <see cref="T:System.Collections.Generic.IList`1"/> collection by a specific
            offset.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection containing the element to move.</param>
            <param name="item">
            The element to move.</param>
            <param name="offset">
            The number of index positions by which to move the specified <paramref name="item"/>.
            </param>
            <returns>
            The new index position of <paramref name="item"/> if it was found in the specified
            <paramref name="list"/>; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="item"/> is a null reference.</exception>
            <remarks><para>
            <b>MoveItem</b> removes the specified <paramref name="item"/> from the specified
            <paramref name="list"/> and adds it back at the specified <paramref name="offset"/> from
            its original index position.
            </para><para>
            The <paramref name="item"/> is placed at the beginning or at the end of the <paramref
            name="list"/> if the new position would be less than zero or higher than the last
            position, respectively. The items in-between are shifted up or down accordingly.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.MoveItemUntyped(System.Collections.IList,System.Object,System.Int32)">
            <summary>
            Moves the specified element in a non-generic <see cref="T:System.Collections.IList"/> collection by a
            specific offset.</summary>
            <param name="list">
            The <see cref="T:System.Collections.IList"/> collection containing the element to move.</param>
            <param name="item">
            The element to move.</param>
            <param name="offset">
            The number of index positions by which to move the specified <paramref name="item"/>.
            </param>
            <returns>
            The new index position of <paramref name="item"/> if it was found in the specified
            <paramref name="list"/>; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="item"/> is a null reference.</exception>
            <remarks><para>
            <b>MoveItemUntyped</b> removes the specified <paramref name="item"/> from the specified
            <paramref name="list"/> and adds it back at the specified <paramref name="offset"/> from
            its original index position.
            </para><para>
            The <paramref name="item"/> is placed at the beginning or at the end of the <paramref
            name="list"/> if the new position would be less than zero or higher than the last
            position, respectively. The items in-between are shifted up or down accordingly.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.ProcessKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)">
            <overloads>
            Counts, changes, or deletes all occurrences of the specified key.</overloads>
            <summary>
            Counts, changes, or deletes the element with the specified key in an <see
            cref="T:System.Collections.Generic.IDictionary`2"/> collection.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> collection whose elements to process.
            </param>
            <param name="oldKey">
            The key to count, change, or delete in <paramref name="dictionary"/>.</param>
            <param name="newKey"><para>
            The same value as <paramref name="oldKey"/> to count the occurrences of <paramref
            name="oldKey"/>.
            </para><para>-or-</para><para>
            A different value than <paramref name="oldKey"/> to change any occurrences of <paramref
            name="oldKey"/> to <paramref name="newKey"/>. 
            </para><para>-or-</para><para>
            A null reference to delete the element with <paramref name="oldKey"/>.</para></param>
            <returns>
            One if <paramref name="oldKey"/> was found in <paramref name="dictionary"/>; otherwise,
            zero.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> or <paramref name="oldKey"/> is a null reference.
            </exception>
            <remarks>
            <b>ProcessKey</b> passes its arguments to <see cref="M:Tektosyne.Collections.CollectionsUtility.CountKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)"/> and then to <see
            cref="M:Tektosyne.Collections.CollectionsUtility.ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)"/> or <see cref="M:Tektosyne.Collections.CollectionsUtility.DeleteKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)"/>, depending on the value of the specified
            <paramref name="newKey"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.ProcessKey``2(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``0)">
            <summary>
            Counts, changes, or deletes all occurrences of the specified key in an <see
            cref="T:System.Collections.Generic.IList`1"/> collection.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="list">
            An <see cref="T:System.Collections.Generic.IList`1"/> collection containing the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements to process.</param>
            <param name="oldKey">
            The key to count, change, or delete in <paramref name="list"/>.</param>
            <param name="newKey"><para>
            The same value as <paramref name="oldKey"/> to count the occurrences of <paramref
            name="oldKey"/>.
            </para><para>-or-</para><para>
            A different value than <paramref name="oldKey"/> to change all occurrences of <paramref
            name="oldKey"/> to <paramref name="newKey"/>. 
            </para><para>-or-</para><para>
            A null reference to delete all elements with <paramref name="oldKey"/>.</para></param>
            <returns>
            The number of occurrences of <paramref name="oldKey"/> in <paramref name="list"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="oldKey"/> is a null reference.</exception>
            <remarks>
            <b>ProcessKey</b> passes its arguments to <see cref="M:Tektosyne.Collections.CollectionsUtility.CountKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)"/> and then to <see
            cref="M:Tektosyne.Collections.CollectionsUtility.ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)"/>, or <see cref="M:Tektosyne.Collections.CollectionsUtility.DeleteKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)"/>, depending on the value of the specified
            <paramref name="newKey"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.ProcessKey``2(System.Collections.Generic.KeyValuePair{``0,``1}@,``0,``0)">
            <summary>
            Counts, changes, or deletes the the specified key of a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection.</typeparam>
            <typeparam name="TValue">
            The type of all values in the collection.</typeparam>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance to process.</param>
            <param name="oldKey">
            The key to count, change, or delete in <paramref name="pair"/>.</param>
            <param name="newKey"><para>
            The same value as <paramref name="oldKey"/> to count the occurrence of <paramref
            name="oldKey"/>.
            </para><para>-or-</para><para>
            A different value than <paramref name="oldKey"/> to change <paramref name="oldKey"/> to
            <paramref name="newKey"/>. 
            </para><para>-or-</para><para>
            A null reference to delete <paramref name="oldKey"/> and its value.</para></param>
            <returns>
            One if <paramref name="pair"/> contains <paramref name="oldKey"/>; otherwise, zero.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="oldKey"/> is a null reference.</exception>
            <remarks>
            <b>ProcessKey</b> replaces the specified <paramref name="pair"/> with a
            default-initialized <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance if its <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> equals <paramref name="oldKey"/> and the
            specified <paramref name="newKey"/> is a null reference.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.Randomize``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomizes the element order of the specified <see cref="T:System.Collections.Generic.IList`1"/> collection.
            </summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.List`1"/> whose element order to randomize.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            <b>Randomize</b> creates a random permutation of the elements in the specified <paramref
            name="list"/>, using the <see cref="F:Tektosyne.MersenneTwister.Default"/> instance of the <see
            cref="T:Tektosyne.MersenneTwister"/> class to determine random indices. This is an O(n) operation
            where n is the number of <paramref name="list"/> elements.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.Restrict``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Restricts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection to those elements that are
            also present in another collection.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to restrict.</param>
            <param name="restriction">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection by which to restrict the specified <paramref
            name="list"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> or <paramref name="restriction"/> is a null reference.
            </exception>
            <remarks>
            <b>Restrict</b> removes all elements from the specified <paramref name="list"/> that are
            not also present in the specified <paramref name="restriction"/> collection.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <overloads>
            Determines whether two specified generic collections contain the same elements in the
            same order.</overloads>
            <summary>
            Determines whether two specified generic <see cref="T:System.Collections.Generic.ICollection`1"/> collections
            contain the same elements in the same order.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="firstCollection">
            The first <see cref="T:System.Collections.Generic.ICollection`1"/> collection to compare.</param>
            <param name="secondCollection">
            The second <see cref="T:System.Collections.Generic.ICollection`1"/> collection to compare.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="firstCollection"/> and <paramref name="secondCollection"/> are both null
            references.
            </item><item>
            <paramref name="firstCollection"/> and <paramref name="secondCollection"/> are both
            references to the same valid collection.
            </item><item>
            <paramref name="firstCollection"/> and <paramref name="secondCollection"/> are both
            valid collections that contain the same number of elements, and all elements compare as
            equal when retrieved in the enumeration sequence for each collection.
            </item></list></returns>
            <remarks><para>
            <b>SequenceEqual</b> first checks the two specified collections for reference equality,
            then for a different element <see cref="P:System.Collections.Generic.ICollection`1.Count"/>; and only then compares
            all elements of <paramref name="firstCollection"/> and <paramref
            name="secondCollection"/>, using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for
            <typeparamref name="T"/>, until a difference is found or the collections are exhausted.
            </para><para>
            Elements are compared by obtaining an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for each collection. 
            Both enumerators are disposed of before <b>SequenceEqual</b> returns.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.SequenceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether two specified generic <see cref="T:System.Collections.Generic.IList`1"/> collections contain the
            same elements in the same order.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="firstList">
            The first <see cref="T:System.Collections.Generic.IList`1"/> collection to compare.</param>
            <param name="secondList">
            The second <see cref="T:System.Collections.Generic.IList`1"/> collection to compare.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="firstList"/> and <paramref name="secondList"/> are both null references.
            </item><item>
            <paramref name="firstList"/> and <paramref name="secondList"/> are both references to
            the same valid collection.
            </item><item>
            <paramref name="firstList"/> and <paramref name="secondList"/> are both valid
            collections that contain the same number of elements, and all elements at the same index
            position in each collection compare as equal.</item></list></returns>
            <remarks><para>
            <b>SequenceEqual</b> first checks the two specified collections for reference equality,
            then for a different element <see cref="P:System.Collections.Generic.ICollection`1.Count"/>; and only then compares
            all elements of <paramref name="firstList"/> and <paramref name="secondList"/>, using
            the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for <typeparamref name="T"/>, until a
            difference is found or the collections are exhausted.
            </para><para>
            Elements are compared by retrieiving the element at the same index position in each
            collection. No enumerators are created.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.SequenceEqualUntyped(System.Collections.ICollection,System.Collections.ICollection)">
            <overloads>
            Determines whether two specified non-generic collections contain the same elements in
            the same order.</overloads>
            <summary>
            Determines whether two specified non-generic <see cref="T:System.Collections.ICollection"/> collections
            contain the same elements in the same order.</summary>
            <param name="firstCollection">
            The first <see cref="T:System.Collections.ICollection"/> collection to compare.</param>
            <param name="secondCollection">
            The second <see cref="T:System.Collections.ICollection"/> collection to compare.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="firstCollection"/> and <paramref name="secondCollection"/> are both null
            references.
            </item><item>
            <paramref name="firstCollection"/> and <paramref name="secondCollection"/> are both
            references to the same valid collection.
            </item><item>
            <paramref name="firstCollection"/> and <paramref name="secondCollection"/> are both
            valid collections that contain the same number of elements, and all elements compare as
            equal when retrieved in the enumeration sequence for each collection.
            </item></list></returns>
            <remarks><para>
            <b>SequenceEqualUntyped</b> first checks the two specified collections for reference
            equality, then for a different element <see cref="P:System.Collections.ICollection.Count"/>; and only then
            compares all elements of <paramref name="firstCollection"/> and <paramref
            name="secondCollection"/>, using <see cref="M:System.Object.Equals(System.Object)"/>, until a difference is
            found or the collections are exhausted.
            </para><para>
            Elements are compared by obtaining an <see cref="T:System.Collections.IEnumerator"/> for each collection. Any
            enumerators that implement <see cref="T:System.IDisposable"/> are disposed of before
            <b>SequenceEqualUntyped</b> returns.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.SequenceEqualUntyped(System.Collections.IList,System.Collections.IList)">
            <summary>
            Determines whether two specified non-generic <see cref="T:System.Collections.IList"/> collections contain the
            same elements in the same order.</summary>
            <param name="firstList">
            The first <see cref="T:System.Collections.IList"/> collection to compare.</param>
            <param name="secondList">
            The second <see cref="T:System.Collections.IList"/> collection to compare.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="firstList"/> and <paramref name="secondList"/> are both null references.
            </item><item>
            <paramref name="firstList"/> and <paramref name="secondList"/> are both references to
            the same valid collection.
            </item><item>
            <paramref name="firstList"/> and <paramref name="secondList"/> are both valid
            collections that contain the same number of elements, and all elements at the same index
            position in each collection compare as equal.</item></list></returns>
            <remarks><para>
            <b>SequenceEqualUntyped</b> first checks the two specified collections for reference
            equality, then for a different element <see cref="P:System.Collections.ICollection.Count"/>; and only then
            compares all elements of <paramref name="firstList"/> and <paramref name="secondList"/>,
            using <see cref="M:System.Object.Equals(System.Object)"/>, until a difference is found or the collections are
            exhausted.
            </para><para>
            Elements are compared by retrieiving the element at the same index position in each
            collection. No enumerators are created.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the specified <see cref="T:System.Collections.Generic.IList`1"/> collection.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection whose elements to swap.</param>
            <param name="first">
            The zero-based index of the first element to swap.</param>
            <param name="second">
            The zero-based index of the second element to swap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="first"/> or <paramref name="second"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="first"/> or <paramref name="second"/> is equal to or greater than the
            <see cref="P:System.Collections.Generic.ICollection`1.Count"/> of the specified <paramref name="list"/>.
            </para></exception>
            <remarks>
            <b>Swap</b> exchanges the elements at the <paramref name="first"/> and <paramref
            name="second"/> indices within the specified <paramref name="list"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.CollectionsUtility.ValidateKey``2(``0,``1)">
            <summary>
            Validates the specified key and the embedded key, if any, of the specified value.
            </summary>
            <typeparam name="TKey">
            The type of the key.</typeparam>
            <typeparam name="TValue">
            The type of the value.</typeparam>
            <param name="key">
            The <typeparamref name="TKey"/> key to validate.</param>
            <param name="value">
            The <typeparamref name="TValue"/> value to validate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <remarks>
            <b>ValidateKey</b> is called by the generic dictionary classes in the 
            <b>Tektosyne.Collections</b> namespace to ensure that dictionary keys are stored with
            identical <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> keys only.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.ComparerAdapter`1">
            <summary>
            Provides an adapter class that wraps a <see cref="T:System.Comparison`1"/> method in the <see
            cref="T:System.Collections.IComparer"/> and <see cref="T:System.Collections.Generic.IComparer`1"/> interfaces.</summary>
            <typeparam name="T">
            The type of all objects to compare.</typeparam>
            <remarks><para>
            The BCL offers two choices for establishing a custom sorting order: the functional way using
            the <see cref="T:System.Comparison`1"/> delegate, and the object-oriented way using the <see
            cref="T:System.Collections.IComparer"/> and <see cref="T:System.Collections.Generic.IComparer`1"/> interfaces.
            </para><para>
            Converting interfaces to delegates is simple, as <see cref="T:System.Collections.Generic.IComparer`1"/> already defines
            a conforming <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> method. <b>ComparerAdapter</b> provides the
            opposite conversion by wrapping the <see cref="T:System.Collections.IComparer"/> and <see cref="T:System.Collections.Generic.IComparer`1"/>
            interfaces around a specified <see cref="T:System.Comparison`1"/> method.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ComparerAdapter`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ComparerAdapter`1"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ComparerAdapter`1"/> class with the
            default comparer for <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Tektosyne.Collections.ComparerAdapter`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ComparerAdapter`1"/> class with the
            specified comparer for <typeparamref name="T"/>.</summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method to use when comparing <typeparamref
            name="T"/> instances, or a null reference to use the default comparer for <typeparamref
            name="T"/>.</param>
        </member>
        <member name="F:Tektosyne.Collections.ComparerAdapter`1.Comparison">
            <summary>
            The <see cref="T:System.Comparison`1"/> method to use when comparing <typeparamref
            name="T"/> instances.</summary>
            <remarks>
            <b>Comparison</b> never returns a null reference. The default is the default comparer
            for <typeparamref name="T"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ComparerAdapter`1.Compare(System.Object,System.Object)">
            <overloads>
            Compares two specified objects and returns an indication of their relative values.
            </overloads>
            <summary>
            Compares two specified objecs, which must be <typeparamref name="T"/> instances, and
            returns an indication of their relative values.</summary>
            <param name="x">
            The first object to compare.</param>
            <param name="y">
            The second object to compare.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of <paramref name="x"/> and
            <paramref name="y"/>, as follows:
            </para><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item></list></returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="x"/> or <paramref name="y"/> cannot be cast to <typeparamref name="T"/>.
            </exception>
            <remarks>
            <b>Compare</b> returns the result of the <see cref="F:Tektosyne.Collections.ComparerAdapter`1.Comparison"/> method for the
            specified <paramref name="x"/> and <paramref name="y"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ComparerAdapter`1.Compare(`0,`0)">
            <summary>
            Compares two specified <typeparamref name="T"/> instances and returns an indication of
            their relative values.</summary>
            <param name="x">
            The first <typeparamref name="T"/> instance to compare.</param>
            <param name="y">
            The second <typeparamref name="T"/> instance to compare.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of <paramref name="x"/> and
            <paramref name="y"/>, as follows:
            </para><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item></list></returns>
            <remarks>
            <b>Compare</b> returns the result of the <see cref="F:Tektosyne.Collections.ComparerAdapter`1.Comparison"/> method for the
            specified <paramref name="x"/> and <paramref name="y"/>.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.ComparerCache`1">
            <summary>
            Caches the default comparers for the type specified by the generic argument.</summary>
            <typeparam name="T">
            The type of all objects being compared.</typeparam>
            <remarks><para>
            The <see cref="T:System.Collections.Generic.Comparer`1"/> and <see
            cref="T:System.Collections.Generic.EqualityComparer`1"/> classes each provide a
            <b>Default</b> property that creates a default comparer for the specified type. These
            properties also cache the returned comparers, but accessing the property getter may still
            require a slow method call.
            </para><para>
            <b>ComparerCache</b> therefore provides a second cache level with read-only fields for
            immediate access to the default comparers for <typeparamref name="T"/>. This can accelerate
            comparisons by up to four times for value types with fast comparers, depending on the JIT
            compiler version and target platform.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.ComparerCache`1.Comparer">
            <summary>
            The default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref
            name="T"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ComparerCache`1.EqualityComparer">
            <summary>
            The default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for
            <typeparamref name="T"/>.</summary>
        </member>
        <member name="T:Tektosyne.Collections.DictionaryEx`2">
            <summary>
            Provides an unsorted generic collection of keys and values that are accessible by key.
            </summary>
            <typeparam name="TKey">
            The type of all keys in the collection. Keys cannot be null references.</typeparam>
            <typeparam name="TValue">
            The type of all values that are associated with the keys. If <typeparamref name="TValue"/>
            is a reference type, values may be null references.</typeparam>
            <remarks><para>
            <b>DictionaryEx</b> provides a <see cref="T:System.Collections.Generic.Dictionary`2"/>, which is a dynamic
            hashtable, with a few extra features:
            </para><list type="bullet"><item>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of any <typeparamref name="TValue"/> that
            implements the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface is automatically checked against
            the associated dictionary key when a key or value is changed or inserted.
            </item><item>
            <see cref="M:Tektosyne.Collections.DictionaryEx`2.AsReadOnly"/> returns a read-only wrapper that has the
            same public type as the original collection. Attempting to modify the collection through
            such a read-only view will raise a <see cref="T:System.NotSupportedException"/>.
            </item><item>
            <see cref="M:Tektosyne.Collections.DictionaryEx`2.Copy"/> creates a deep copy of the collection by
            invoking <see cref="M:System.ICloneable.Clone"/> on each value. This feature requires that all copied
            values implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="F:Tektosyne.Collections.DictionaryEx`2.Empty"/> returns an immutable empty collection that is
            cached for repeated access.
            </item><item>
            <see cref="M:Tektosyne.Collections.DictionaryEx`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})"/> compares two collections with identical
            element types for value equality of all elements. The collections compare as equal if they
            contain the same elements. The enumeration order of elements is ignored since the
            <b>DictionaryEx</b> class does not establish any fixed element ordering.
            </item></list><para>
            Moreover, several properties and methods that the standard class provides as explicit
            interface implementations have been elevated to public visibility.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class that is
            empty, has the default initial capacity, and uses the default equality comparer for
            <typeparamref name="TKey"/>.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class that
            contains elements copied from the specified collection and uses the default equality
            comparer for <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class that
            contains elements copied from the specified collection and uses the specified equality
            comparer for <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or a null
            reference to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class that is
            empty, has the default initial capacity, and uses the specified equality comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or a null
            reference to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class that is
            empty, has the specified initial capacity, and uses the default equality comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is
            initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class that is
            empty, has the specified initial capacity, and uses the specified equality comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is
            initially capable of storing.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys, or a null
            reference to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})"/>
            for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.#ctor(Tektosyne.Collections.DictionaryEx{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class that is
            a read-only view of the specified instance.</summary>
            <param name="dictionary">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> collection that provides the initial value
            for the <see cref="F:Tektosyne.Collections.DictionaryEx`2.InnerDictionary"/> field.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.DictionaryEx`2.IsReadOnly"/> property. This argument must be
            <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="dictionary"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.DictionaryEx`2.InnerDictionary">
            <summary>
            The <see cref="T:System.Collections.Generic.Dictionary`2"/> collection that holds the <typeparamref
            name="TKey"/> keys and <typeparamref name="TValue"/> values of the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.DictionaryEx`2.ReadOnlyFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.DictionaryEx`2.IsReadOnly"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.DictionaryEx`2.ReadOnlyWrapper">
            <summary>
            The read-only <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> collection that is returned by
            the <see cref="M:Tektosyne.Collections.DictionaryEx`2.AsReadOnly"/> method.</summary>
        </member>
        <member name="F:Tektosyne.Collections.DictionaryEx`2.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of
            keys in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <value>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance that is used to compare keys for
            equality, and to provide hash values for the keys.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Comparer"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <value>
            The number of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements contained in the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Count"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> has a fixed
            size.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> has a fixed size; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.DictionaryEx`2.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is also read-only, and
            vice versa.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is
            read-only.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>
            is synchronized (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is synchronized
            (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is read, and <paramref name="key"/> does not exist in the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.
            </exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Item(`0)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>. When the property is
            set, this argument must be compatible with <typeparamref name="TValue"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><para>
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.
            </para><para>-or-</para><para>
            The property is set to a value that is not compatible with <typeparamref
            name="TValue"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.
            </exception>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> containing the keys in
            the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Keys"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.ICollection"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>, obtain a lock on the <b>SyncRoot</b> object rather than the collection
            itself. A read-only view always returns the same <b>SyncRoot</b> object as the
            underlying writable collection.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> containing the values
            in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Values"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.DictionaryEx`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.ICollection"/> containing the values in the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</value>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Add(`0,`1)">
            <overloads>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</overloads>
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <param name="key">
            The key of the element to add. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <param name="value">
            The value of the element to add. This argument must be compatible with <typeparamref
            name="TValue"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><para>
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.
            </para><para>-or-</para><para>
            <paramref name="value"/> is not compatible with <typeparamref name="TValue"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.</exception>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified key-and-value pair to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>
            already exists in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>. </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements to add.</param>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> already contains one or more keys in the
            specified <paramref name="dictionary"/>.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains one or more duplicate keys.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.Clear"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</returns>
            <remarks>
            <b>Clone</b> does not preserve the enumeration order of the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>, nor the values of the <see cref="P:Tektosyne.Collections.DictionaryEx`2.IsFixedSize"/> and
            <see cref="P:Tektosyne.Collections.DictionaryEx`2.IsReadOnly"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> contains the specified
            key-and-value pair.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> is found in the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate. This argument must be compatible with <typeparamref name="TKey"/>.
            </param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> contains the specified
            value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> contains an element with the
            specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.DictionaryEx`2.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all 
            <typeparamref name="TValue"/> values. The <typeparamref name="TKey"/> keys are always
            duplicated by a shallow copy.
            </para><para>
            <b>Copy</b> does not preserve the enumeration order of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>, nor the values of the <see cref="P:Tektosyne.Collections.DictionaryEx`2.IsFixedSize"/> and <see cref="P:Tektosyne.Collections.DictionaryEx`2.IsReadOnly"/>
            properties.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Determines whether the specified collection contains the same key-and-value pairs as the
            current <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements to
            compare with the current <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>, and each element compares as
            equal to the element with the same <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.
            </item></list></returns>
            <remarks><para>
            <b>Equals</b> iterates over the specified <paramref name="collection"/> and calls <see
            cref="M:Tektosyne.Collections.DictionaryEx`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})"/> for each element to test the two collections for value equality.
            </para><para>
            <b>Equals</b> does not attempt to compare the enumeration order of both collections as
            the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> class does not define a fixed enumeration
            order.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.GetEnumerator">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/> that can iterate through the
            <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/> for the entire <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>. Each enumerated item is a <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.GetEnumerator"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>. Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Remove(`0)">
            <overloads>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </overloads>
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the associated element was removed;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <param name="key">
            The key of the element to remove. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.</exception>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified key-and-value pair from the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.ToArray">
            <summary>
            Copies the key-and-value pairs of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> to a new
            <see cref="T:System.Array"/>.</summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.</returns>
            <remarks>
            <b>ToArray</b> has the same effect as <see cref="M:Tektosyne.Collections.DictionaryEx`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"/> with a starting index of
            zero, but also allocates the target array.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.DictionaryEx`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)"/> for details.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.EqualityComparerAdapter`1">
            <summary>
            Provides an adapter class that wraps an <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> method in
            the <see cref="T:System.Collections.IEqualityComparer"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interfaces.
            </summary>
            <typeparam name="T">
            The type of all objects to compare.</typeparam>
            <remarks><para>
            <b>EqualityComparerAdapter</b> wraps the <see cref="T:System.Collections.IEqualityComparer"/> and <see
            cref="T:System.Collections.Generic.IEqualityComparer`1"/> interfaces around a specified <see
            cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> method, satisfying BCL classes and methods that expect
            such interface implementations.
            </para><para>
            <b>EqualityComparerAdapter</b> also accepts a custom <see
            cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> method, and otherwise provides a safe default
            implementation which returns the constant value zero.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.EqualityComparerAdapter`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.EqualityComparerAdapter`1"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.EqualityComparerAdapter`1"/> class with
            the default equality comparer for <typeparamref name="T"/> and the default hash
            function.</summary>
        </member>
        <member name="M:Tektosyne.Collections.EqualityComparerAdapter`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.EqualityComparerAdapter`1"/> class with
            the specified equality comparer for <typeparamref name="T"/> and the default hash
            function.</summary>
            <param name="comparison">
            The method to use when comparing <typeparamref name="T"/> instances for equality, or a
            null reference to use the default equality comparer for <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:Tektosyne.Collections.EqualityComparerAdapter`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.EqualityComparerAdapter`1"/> class with
            the specified equality comparer and hash function for <typeparamref name="T"/>.
            </summary>
            <param name="comparison">
            The method to use when comparing <typeparamref name="T"/> instances for equality, or a
            null reference to use the default equality comparer for <typeparamref name="T"/>.
            </param>
            <param name="hashing">
            The method to use when computing the hash code for a <typeparamref name="T"/> instance,
            or a null reference to use the default hash function.</param>
        </member>
        <member name="F:Tektosyne.Collections.EqualityComparerAdapter`1.Comparison">
            <summary>
            The method to use when comparing <typeparamref name="T"/> instances for equality.
            </summary>
            <remarks>
            <b>Comparison</b> never returns a null reference. The default is the default equality
            comparer for <typeparamref name="T"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.EqualityComparerAdapter`1.Hashing">
            <summary>
            The method to use when computing the hash code for a <typeparamref name="T"/> instance.
            </summary>
            <remarks>
            <b>Hashing</b> never returns a null reference. The default is a method that returns the
            constant value zero, ignoring the specified <typeparamref name="T"/> instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.EqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <overloads>
            Determines whether two specified objects are equal.</overloads>
            <summary>
            Determines whether two specified objects, which must be <typeparamref name="T"/>
            instances, are equal.</summary>
            <param name="x">
            The first object to compare.</param>
            <param name="y">
            The second object to compare.</param>
            <returns>
            <c>true</c> if <paramref name="x"/> and <paramref name="y"/> are equal; otherwise,
            <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="x"/> or <paramref name="y"/> cannot be cast to <typeparamref name="T"/>.
            </exception>
            <remarks>
            <b>Equals</b> returns the result of the <see cref="F:Tektosyne.Collections.EqualityComparerAdapter`1.Comparison"/> method for the
            specified <paramref name="x"/> and <paramref name="y"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.EqualityComparerAdapter`1.GetHashCode(System.Object)">
            <overloads>
            Returns a hash code for the specified object.</overloads>
            <summary>
            Returns a hash code for the specified object, which must be a <typeparamref name="T"/>
            instance.</summary>
            <param name="obj">
            The object whose hash code to determine.</param>
            <returns>
            An <see cref="T:System.Int32"/> hash code for <paramref name="obj"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="obj"/> cannot be cast to <typeparamref name="T"/>.</exception>
            <remarks>
            <b>GetHashCode</b> returns the result of the <see cref="F:Tektosyne.Collections.EqualityComparerAdapter`1.Hashing"/> method for the
            specified <paramref name="obj"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.EqualityComparerAdapter`1.Equals(`0,`0)">
            <summary>
            Determines whether two specified <typeparamref name="T"/> instances are equal.</summary>
            <param name="x">
            The first <typeparamref name="T"/> instance to compare.</param>
            <param name="y">
            The second <typeparamref name="T"/> instance to compare.</param>
            <returns>
            <c>true</c> if <paramref name="x"/> and <paramref name="y"/> are equal; otherwise,
            <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> returns the result of the <see cref="F:Tektosyne.Collections.EqualityComparerAdapter`1.Comparison"/> method for the
            specified <paramref name="x"/> and <paramref name="y"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.EqualityComparerAdapter`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified <typeparamref name="T"/> instance.</summary>
            <param name="value">
            The <typeparamref name="T"/> instance whose hash code to determine.</param>
            <returns>
            An <see cref="T:System.Int32"/> hash code for <paramref name="value"/>.</returns>
            <remarks>
            <b>GetHashCode</b> returns the result of the <see cref="F:Tektosyne.Collections.EqualityComparerAdapter`1.Hashing"/> method for the
            specified <paramref name="value"/>.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.IKeyedValue`1">
            <summary>
            Associates an object with a key.</summary>
            <typeparam name="TKey">
            The type of the key.</typeparam>
            <remarks><para>
            <b>IKeyedValue</b> provides a generic read-only property, <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>,
            intended to identify the implementing object within a collection of compatible objects. The
            derived interface <see cref="T:Tektosyne.Collections.IMutableKeyedValue`1"/> adds a method to set the <b>Key</b>
            property. The <b>Key</b> of each object is typically unique within a collection, but that is
            not a requirement of the interface.
            </para><para>
            <b>IKeyedValue</b> instances that are stored in an <see cref="T:System.Collections.Generic.IList`1"/> collection can be
            identified by their <b>Key</b> values – just as if they were stored in an <see
            cref="T:System.Collections.Generic.IDictionary`2"/> collection, but without the need to maintain a separate
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component for each element.
            </para><para>
            <b>IKeyedValue</b> instances can also be stored as the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> components of an <see cref="T:System.Collections.Generic.IDictionary`2"/> collection. In
            this case, their <b>Key</b> properties should mirror the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> components. This key duplication allows clients to
            identify the <b>Value</b> components outside of the containing collection.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.IKeyedValue`1.Key">
            <summary>
            Gets the key associated with the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/>.</summary>
            <value>
            An object that identifies the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance within any
            collection of compatible instances. This value is never a null reference.</value>
            <remarks>
            If the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance is stored as the <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, this property should have the same value as the <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of the <b>KeyValuePair</b>.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.IMutableKeyedValue`1">
            <summary>
            Associates an object with a mutable key.</summary>
            <typeparam name="TKey">
            The type of the mutable key.</typeparam>
            <remarks>
            <b>IMutableKeyedValue</b> extends the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface with an
            additional <see cref="M:Tektosyne.Collections.IMutableKeyedValue`1.SetKey(`0)"/> method that allows clients to
            change the <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of implementing classes.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.IMutableKeyedValue`1.SetKey(`0)">
            <summary>
            Sets the <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> associated with the <see
            cref="T:Tektosyne.Collections.IMutableKeyedValue`1"/>.</summary>
            <param name="key">
            The new value for the <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="T:Tektosyne.Collections.Int32Dictionary`1">
            <summary>
            Provides an unsorted generic collection of <see cref="T:System.Int32"/> keys and arbitrary values
            that are accessible by key.</summary>
            <typeparam name="TValue">
            The type of all values that are associated with the keys. If <typeparamref name="TValue"/>
            is a reference type, values may be null references.</typeparam>
            <remarks><para>
            <b>Int32Dictionary</b> is a complete reimplementation of the standard <see
            cref="T:System.Collections.Generic.Dictionary`2"/>, which is a dynamic hashtable, so as to achieve the best
            possible performance for <see cref="T:System.Int32"/> keys.
            </para><list type="bullet"><item>
            Hashtables are ideally suited for <see cref="T:System.Int32"/> keys because such keys can act as
            their own hash codes, obviating the need to transform keys into hash codes for searches.
            This removes a potentially significant contribution to the cost of searches.
            </item><item>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> must route <see cref="T:System.Int32"/> keys through the same
            expensive mechanism as other generic keys, using an <see cref="T:System.Collections.Generic.EqualityComparer`1"/> to
            obtain hash codes, and then a <see cref="T:System.Collections.Generic.Comparer`1"/> to determine key equality.
            </item><item>
            <b>Int32Dictionary</b> directly uses <see cref="T:System.Int32"/> keys as their own hash codes, and
            directly compares them to stored keys using a single machine instruction. The resulting
            search speedup compared to a standard <see cref="T:System.Collections.Generic.Dictionary`2"/> instantiated
            with <see cref="T:System.Int32"/> keys exceeds 60% in an optimized x64 build under .NET 4.0.
            </item></list><para>
            <b>Int32Dictionary</b> also contains the following extra features:
            </para><list type="bullet"><item>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of any <typeparamref name="TValue"/> that
            implements the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface is automatically checked against
            the associated dictionary key when a key or value is changed or inserted.
            </item><item>
            <see cref="M:Tektosyne.Collections.Int32Dictionary`1.AsReadOnly"/> returns a read-only wrapper that has the
            same public type as the original collection. Attempting to modify the collection through
            such a read-only view will raise a <see cref="T:System.NotSupportedException"/>.
            </item><item>
            <see cref="M:Tektosyne.Collections.Int32Dictionary`1.Copy"/> creates a deep copy of the collection by invoking
            <see cref="M:System.ICloneable.Clone"/> on each value. This feature requires that all copied values
            implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="F:Tektosyne.Collections.Int32Dictionary`1.Empty"/> returns an immutable empty collection that is
            cached for repeated access.
            </item><item>
            <see cref="M:Tektosyne.Collections.Int32Dictionary`1.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Int32,`0}})"/> compares two collections with identical element
            types for value equality of all elements. The collections compare as equal if they contain
            the same elements. The enumeration order of elements is ignored since the
            <b>Int32Dictionary</b> class does not establish any fixed element ordering.
            </item><item>
            <see cref="M:Tektosyne.Collections.Int32Dictionary`1.GetAny"/> returns an arbitrary key-and-value pair if the
            collection is not empty. This is equivalent to getting the first element yielded by an
            enumerator, but without actually creating the enumerator.
            </item></list><para>
            Moreover, several properties and methods that the standard class provides as explicit
            interface implementations have been elevated to public visibility. <b>Int32Dictionary</b>
            does <em>not</em> support a few rarely used features of the standard class:
            </para><list type="bullet"><item>
            <b>Int32Dictionary</b> does not implement the non-generic <see cref="T:System.Collections.IDictionary"/>
            interface. This would require implementing <see cref="T:System.Collections.IDictionaryEnumerator"/>, a peculiar
            enumerator interface that is incompatible with the C# <c>yield</c> keyword.
            </item><item>
            <see cref="M:Tektosyne.Collections.Int32Dictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,`0}[],System.Int32)"/> does not support target arrays containing
            non-generic <see cref="T:System.Collections.DictionaryEntry"/> or <see cref="T:System.Object"/> elements.
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> class that is
            empty and has the default initial capacity.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.#ctor(System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> class that
            contains elements copied from the specified collection.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> class that is
            empty and has the specified initial capacity.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is initially
            capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.#ctor(Tektosyne.Collections.Int32Dictionary{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> class that is a
            read-only view of the specified instance.</summary>
            <param name="dictionary">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> collection that is wrapped by the new
            instance.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.Int32Dictionary`1.IsReadOnly"/> property. This argument must be
            <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="dictionary"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1._data">
            <summary>
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/> object that holds the <see cref="T:System.Int32"/> keys and
            <typeparamref name="TValue"/> values of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1._keys">
            <summary>Backs the <see cref="P:Tektosyne.Collections.Int32Dictionary`1.Keys"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1._values">
            <summary>Backs the <see cref="P:Tektosyne.Collections.Int32Dictionary`1.Values"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.ReadOnlyFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.Int32Dictionary`1.IsReadOnly"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.ReadOnlyWrapper">
            <summary>
            The read-only <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> collection that is returned by the
            <see cref="M:Tektosyne.Collections.Int32Dictionary`1.AsReadOnly"/> method.</summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <value>
            The number of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements contained in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Count"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> has a fixed
            size.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> has a fixed size; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.Int32Dictionary`1.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is also read-only, and vice
            versa.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is
            synchronized (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is synchronized
            (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.Item(System.Int32)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</para></value>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is read, and <paramref name="key"/> does not exist in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.
            </exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Item(`0)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Keys"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <value>
            An object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>,
            obtain a lock on the <b>SyncRoot</b> object rather than the collection itself. A
            read-only view always returns the same <b>SyncRoot</b> object as the underlying writable
            collection.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32Dictionary`1.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.Dictionary`2.Values"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.CheckTargetArray(System.Array,System.Int32)">
            <summary>
            Checks the bounds of the specified array and the specified starting index against the
            size of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination for elements copied from
            the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>. The <b>Array</b> must have zero-based
            indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Add(System.Int32,`0)">
            <overloads>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</overloads>
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Add(System.Collections.Generic.KeyValuePair{System.Int32,`0})">
            <summary>
            Adds the specified key-and-value pair to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>
            already exists in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.AddRange(System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            Adds the elements of the specified collection to the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> already contains one or more keys in the
            specified <paramref name="dictionary"/>.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains one or more duplicate keys.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.Clear"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</returns>
            <remarks>
            <b>Clone</b> does not preserve the enumeration order of the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>, nor the values of the <see cref="P:Tektosyne.Collections.Int32Dictionary`1.IsFixedSize"/> and
            <see cref="P:Tektosyne.Collections.Int32Dictionary`1.IsReadOnly"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.Int32,`0})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> contains the specified
            key-and-value pair.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> is found in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.ContainsKey(System.Int32)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.ContainsValue(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> contains the specified
            value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> contains an element with the
            specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.Int32Dictionary`1.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all 
            <typeparamref name="TValue"/> values.
            </para><para>
            <b>Copy</b> does not preserve the enumeration order of the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>, nor the values of the <see cref="P:Tektosyne.Collections.Int32Dictionary`1.IsFixedSize"/> and
            <see cref="P:Tektosyne.Collections.Int32Dictionary`1.IsReadOnly"/> properties.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,`0}[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> cannot be cast automatically to the type of
            the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Int32,`0}})">
            <summary>
            Determines whether the specified collection contains the same key-and-value pairs as the
            current <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements
            to compare with the current <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>, and each element compares as
            equal to the element with the same <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.
            </item></list></returns>
            <remarks><para>
            <b>Equals</b> iterates over the specified <paramref name="collection"/> and calls <see
            cref="M:Tektosyne.Collections.Int32Dictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.Int32,`0})"/> for each element to test the two collections for value equality.
            </para><para>
            <b>Equals</b> does not attempt to compare the enumeration order of both collections as
            the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> class does not define a fixed enumeration
            order.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.GetAny">
            <summary>
            Returns an arbitrary key-and-value pair in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </summary>
            <returns>
            An arbitrary <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element found in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is empty.</exception>
            <remarks>
            <b>GetAny</b> returns the first key-and-value pair found while traversing the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/> in enumeration order, but without actually creating an
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.GetAnyKey">
            <summary>
            Returns an arbitrary key in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <returns>
            An arbitrary <see cref="T:System.Int32"/> key found in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is empty.</exception>
            <remarks>
            <b>GetAnyKey</b> returns the first key found while traversing the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/> in enumeration order, but without actually creating an
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.GetAnyValue">
            <summary>
            Returns an arbitrary value in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <returns>
            An arbitrary <typeparamref name="TValue"/> value found in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is empty.</exception>
            <remarks>
            <b>GetAnyValue</b> returns the first value found while traversing the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/> in enumeration order, but without actually creating an
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.GetEnumerator"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>. Each
            enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Remove(System.Int32)">
            <overloads>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </overloads>
            <summary>
            Removes the element with the specified key from the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the associated element was removed;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.Remove(System.Collections.Generic.KeyValuePair{System.Int32,`0})">
            <summary>
            Removes the specified key-and-value pair from the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.ToArray">
            <summary>
            Copies the key-and-value pairs of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> to a new
            <see cref="T:System.Array"/>.</summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements of the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</returns>
            <remarks>
            <b>ToArray</b> has the same effect as <see cref="M:Tektosyne.Collections.Int32Dictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,`0}[],System.Int32)"/> with a starting index of
            zero, but also allocates the target array.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Gets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)"/> for details.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.Int32Dictionary`1.Entry">
            <summary>
            Represents one key-and-value pair in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.
            </summary>
            <remarks>
            <b>Entry</b> is a simple data container for the key and value of one element in the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/>, along with auxiliary data for storage management.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.Entry.IsValid">
            <summary>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/> contains an existing key-and-value pair;
            <c>false</c> if the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/> is available for storing a new key-and-value
            pair. The default is <c>false</c>.</summary>>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.Entry.Next">
            <summary>
            The index of the next <see cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/> in a linked list within the <see
            cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> collection, or -1 to indicate the end of the list.
            </summary>>
            <remarks>
            Chains of <b>Next</b> indices connect all <see cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/> instances whose <see
            cref="F:Tektosyne.Collections.Int32Dictionary`1.Entry.Key"/> produces the same hash code, and likewise all unoccupied <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/> instances within <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.EntryCount"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.Entry.Key">
            <summary>
            The key of the key-and-value pair stored in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/>.</summary>>
            <remarks>
            <b>Key</b> returns zero if <see cref="F:Tektosyne.Collections.Int32Dictionary`1.Entry.IsValid"/> is <c>false</c>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.Entry.Value">
            <summary>
            The value of the key-and-value pair stored in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/>.</summary>>
            <remarks>
            <b>Value</b> returns the default value for <typeparamref name="TValue"/> if <see
            cref="F:Tektosyne.Collections.Int32Dictionary`1.Entry.IsValid"/> is <c>false</c>.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData">
            <summary>
            Contains the key-and-value pairs of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>.</summary>
            <remarks>
            <b>InstanceData</b> provides and maintains the actual hashtable used by the <see
            cref="T:Tektosyne.Collections.Int32Dictionary`1"/> class.  When a read-only view is created, it shares the
            <b>InstanceData</b> of the original <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>. This allows
            the read-only view to reflect all changes to the original instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.InstanceData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/> class.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/> is initially capable
            of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.SmallPrimes">
            <summary>
            A list of small prime numbers chosen for optimal performance.</summary>
            <remarks>
            <b>SmallPrimes</b> contains the subset of prime numbers that was chosen by the BCL
            team for optimal reallaction performance of the standard <see cref="T:System.Collections.Generic.Dictionary`2"/> class.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Buckets">
            <summary>
            An <see cref="T:System.Array"/> containing the starting indices of linked lists within the
            <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> collection. The hash code of all elements within each linked
            list equals the corresponding <b>Buckets</b> index.</summary>>
            <remarks>
            Any <b>Buckets</b> element that has no matching <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> elements has
            the value -1.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries">
            <summary>
            An <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Collections.Int32Dictionary`1.Entry"/> instances that contains all existing
            key-and-value pairs and/or storage for new key-and-value pairs.</summary>>
            <remarks>
            Any <b>Entries</b> element that is available for a new key-and-value pair has an
            <see cref="F:Tektosyne.Collections.Int32Dictionary`1.Entry.IsValid"/> flag which is <c>false</c>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.EntryCount">
            <summary>
            The number of <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> elements, starting from the first element, that
            may be currently occupied. The default is zero.</summary>>
            <remarks>
            <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> indices equal to or greater than <b>EntryCount</b> are
            guaranteed to be unoccupied. Indices less than <b>EntryCount</b> may also be free,
            in which case <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.FreeList"/> returns a valid index.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.FreeCount">
            <summary>
            The number of <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> elements within <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.EntryCount"/> that
            are currently unoccupied. The default is zero.</summary>>
        </member>
        <member name="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.FreeList">
            <summary>
            The index of the first <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> element within <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.EntryCount"/>
            that is currently unoccupied. The default is -1.</summary>
            <remarks>
            <b>FreeList</b> returns -1 when there are no free <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> within <see
            cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.EntryCount"/>. Otherwise, all unoccupied <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> starting at
            <b>FreeList</b> form a linked list.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Add(System.Int32,`0,System.Boolean)">
            <summary>
            Adds the specified key-and-value pair to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/>.</summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <param name="adding">
            <c>true</c> to only allow adding a new element to the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/>;
            <c>false</c> to assign the specified <paramref name="value"/> to an existing element
            with the specified <paramref name="key"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="adding"/> is <c>true</c>, and <paramref name="key"/> already exists
            in the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/>. </exception>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/>.</summary>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Find(System.Int32)">
            <summary>
            Finds the specified key within the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/>.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            The index of the <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Entries"/> element whose <see cref="F:Tektosyne.Collections.Int32Dictionary`1.Entry.Key"/> equals
            <paramref name="key"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.InstanceData.GetPrime(System.Int32)">
            <summary>
            Gets the smallest prime number that is equal to or greater than the specified
            value.</summary>
            <param name="min">
            The lower threshold for the returned prime number.</param>
            <returns>
            The smallest prime number that is equal to or greater than <paramref name="min"/>. 
            </returns>
            <remarks>
            <b>GetPrime</b> first chooses among the preselected <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.SmallPrimes"/>, and
            computes a new prime only when <paramref name="min"/> is greater than any <see
            cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.SmallPrimes"/> element.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Remove(System.Int32)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/>.
            </summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the associated element was
            removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.Int32Dictionary`1.InstanceData.Resize">
            <summary>
            Resizes the <see cref="T:Tektosyne.Collections.Int32Dictionary`1.InstanceData"/> to accommodate twice the current <see
            cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.EntryCount"/>.</summary>
            <remarks>
            <b>Resize</b> is only called when the <see cref="F:Tektosyne.Collections.Int32Dictionary`1.InstanceData.FreeList"/> is empty.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.Int32HashSet">
            <summary>
            Provides an unsorted generic collection of <see cref="T:System.Int32"/> elements.</summary>
            <remarks><para>
            <b>Int32HashSet</b> implements a dynamic hashtable optimized for <see cref="T:System.Int32"/> keys,
            just like <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/>, but without support for value association.
            The functionality is similar to the standard <see cref="T:System.Collections.Generic.HashSet`1"/> but more limited;
            specifically, <b>Int32HashSet</b> does not implement the <see cref="T:System.Collections.Generic.ISet`1"/> interface.
            </para><para>
            <b>Int32HashSet</b> directly uses <see cref="T:System.Int32"/> keys as their own hash codes, and
            directly compares them to stored keys using a single machine instruction. The resulting
            search speedup compared to a standard <see cref="T:System.Collections.Generic.HashSet`1"/> instantiated with <see
            cref="T:System.Int32"/> keys approaches 50% in an optimized x64 build under .NET 4.0.
            </para><para>
            <b>Int32HashSet</b> also contains the following extra features:
            </para><list type="bullet"><item>
            <see cref="M:Tektosyne.Collections.Int32HashSet.AsReadOnly"/> returns a read-only wrapper that has the same public
            type as the original collection. Attempting to modify the collection through such a
            read-only view will raise a <see cref="T:System.NotSupportedException"/>.
            </item><item>
            <see cref="F:Tektosyne.Collections.Int32HashSet.Empty"/> returns an immutable empty collection that is cached for
            repeated access.
            </item><item>
            <see cref="M:Tektosyne.Collections.Int32HashSet.Equals(System.Collections.Generic.ICollection{System.Int32})"/> compares two collections with identical element types for
            value equality of all elements. The collections compare as equal if they contain the same
            elements. The enumeration order of elements is ignored since the <b>Int32HashSet</b> class
            does not establish any fixed element ordering.
            </item><item>
            <see cref="M:Tektosyne.Collections.Int32HashSet.GetAny"/> returns an arbitrary element if the collection is not
            empty. This is equivalent to getting the first element yielded by an enumerator, but without
            actually creating the enumerator.
            </item></list><para>
            Moreover, several properties and methods that the standard class provides as explicit
            interface implementations have been elevated to public visibility.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32HashSet"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32HashSet"/> class that is empty and has
            the default initial capacity.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32HashSet"/> class that contains
            elements copied from the specified collection.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new collection.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="collection"/> contains one or more duplicate elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32HashSet"/> class that is empty and has
            the specified initial capacity.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.Int32HashSet"/> is initially capable of
            storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.#ctor(Tektosyne.Collections.Int32HashSet,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32HashSet"/> class that is a read-only
            view of the specified instance.</summary>
            <param name="collection">
            The <see cref="T:Tektosyne.Collections.Int32HashSet"/> collection that is wrapped by the new instance.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.Int32HashSet.IsReadOnly"/> property. This argument must be
            <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="collection"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet._data">
            <summary>
            The <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/> object that holds the <see cref="T:System.Int32"/> elements of the
            <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.ReadOnlyFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.Int32HashSet.IsReadOnly"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.ReadOnlyWrapper">
            <summary>
            The read-only <see cref="T:Tektosyne.Collections.Int32HashSet"/> collection that is returned by the <see
            cref="M:Tektosyne.Collections.Int32HashSet.AsReadOnly"/> method.</summary>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32HashSet.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <value>
            The number of <see cref="T:System.Int32"/> elements contained in the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.
            </value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.ICollection`1.Count"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32HashSet.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.Int32HashSet"/> has a fixed size.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32HashSet"/> has a fixed size; otherwise, <c>false</c>.
            The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.Int32HashSet.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.Int32HashSet"/> is also read-only, and vice versa.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32HashSet.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.Int32HashSet"/> is read-only.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32HashSet"/> is read-only; otherwise, <c>false</c>. The
            default is <c>false</c>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32HashSet.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.Int32HashSet"/> is synchronized
            (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.Int32HashSet"/> is synchronized (thread-safe);
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.Int32HashSet.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.
            </value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.Int32HashSet"/>, obtain a
            lock on the <b>SyncRoot</b> object rather than the collection itself. A read-only view
            always returns the same <b>SyncRoot</b> object as the underlying writable collection.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.CheckTargetArray(System.Array,System.Int32)">
            <summary>
            Checks the bounds of the specified array and the specified starting index against the
            size of the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination for elements copied from
            the <see cref="T:Tektosyne.Collections.Int32HashSet"/>. The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the <see cref="T:Tektosyne.Collections.Int32HashSet"/> is greater than the available
            space from <paramref name="arrayIndex"/> to the end of the destination <paramref
            name="array"/>.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.Add(System.Int32)">
            <summary>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <param name="item">
            The <see cref="T:System.Int32"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> already exists in the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32HashSet"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.
            </summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.Int32HashSet"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.Int32HashSet"/> already contains one or more elements in the specified
            <paramref name="collection"/>.
            </para><para>-or-</para><para>
            <paramref name="collection"/> contains one or more duplicate elements.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32HashSet"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Clear"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</returns>
            <remarks>
            <b>Clone</b> does not preserve the enumeration order of the <see cref="T:Tektosyne.Collections.Int32HashSet"/>,
            nor the values of the <see cref="P:Tektosyne.Collections.Int32HashSet.IsFixedSize"/> and <see cref="P:Tektosyne.Collections.Int32HashSet.IsReadOnly"/> properties.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.Contains(System.Int32)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.Int32HashSet"/> contains the specified element.
            </summary>
            <param name="item">
            The <see cref="T:System.Int32"/> element to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32HashSet"/> contains the specified <paramref
            name="item"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.Int32HashSet"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Int32"/> elements copied from the <see cref="T:Tektosyne.Collections.Int32HashSet"/>. The <b>Array</b>
            must have zero-based indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.Int32HashSet"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.Int32HashSet"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Int32"/> elements copied from the <see cref="T:Tektosyne.Collections.Int32HashSet"/>. The <b>Array</b>
            must have zero-based indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.Int32HashSet"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <see cref="T:System.Int32"/> cannot be cast automatically to the type of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.Equals(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Determines whether the specified collection contains the same elements as the current
            <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Int32"/> elements to compare with the
            current <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.Int32HashSet"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference and contains exactly the same 
            elements as this <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</item></list></returns>
            <remarks><para>
            <b>Equals</b> iterates over the specified <paramref name="collection"/> and calls <see
            cref="M:Tektosyne.Collections.Int32HashSet.Contains(System.Int32)"/> for each element to test the two collections for value equality.
            </para><para>
            <b>Equals</b> does not attempt to compare the enumeration order of both collections as
            the <see cref="T:Tektosyne.Collections.Int32HashSet"/> class does not define a fixed enumeration order.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.GetAny">
            <summary>
            Returns an arbitrary element in the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <returns>
            An arbitrary <see cref="T:System.Int32"/> element found in the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Tektosyne.Collections.Int32HashSet"/> is empty.</exception>
            <remarks>
            <b>GetAny</b> returns the first element found while traversing the <see
            cref="T:Tektosyne.Collections.Int32HashSet"/> in enumeration order, but without actually creating an <see
            cref="T:System.Collections.Generic.IEnumerator`1"/> instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.Int32HashSet"/>. Each
            enumerated item is an <see cref="T:System.Int32"/> value.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.Int32HashSet"/>. Each enumerated
            item is an <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.Remove(System.Int32)">
            <summary>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <param name="item">
            The <see cref="T:System.Int32"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was found and the associated element was removed;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.Int32HashSet"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.ToArray">
            <summary>
            Copies the key-and-value pairs of the <see cref="T:Tektosyne.Collections.Int32HashSet"/> to a new <see
            cref="T:System.Array"/>.</summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the <see cref="T:System.Int32"/>
            elements of the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</returns>
            <remarks>
            <b>ToArray</b> has the same effect as <see cref="M:Tektosyne.Collections.Int32HashSet.CopyTo(System.Int32[],System.Int32)"/> with a starting index of
            zero, but also allocates the target array.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.Int32HashSet.Entry">
            <summary>
            Represents one element in the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <remarks>
            <b>Entry</b> is a simple data container for one <see cref="T:System.Int32"/> element in the <see
            cref="T:Tektosyne.Collections.Int32HashSet"/>, along with auxiliary data for storage management.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.Entry.IsValid">
            <summary>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.Int32HashSet.Entry"/> contains an existing element; <c>false</c> if
            the <see cref="T:Tektosyne.Collections.Int32HashSet.Entry"/> is available for storing a new element. The default is
            <c>false</c>.</summary>>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.Entry.Next">
            <summary>
            The index of the next <see cref="T:Tektosyne.Collections.Int32HashSet.Entry"/> in a linked list within the <see
            cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> collection, or -1 to indicate the end of the list.
            </summary>>
            <remarks>
            Chains of <b>Next</b> indices connect all <see cref="T:Tektosyne.Collections.Int32HashSet.Entry"/> instances whose <see
            cref="F:Tektosyne.Collections.Int32HashSet.Entry.Key"/> produces the same hash code, and likewise all unoccupied <see
            cref="T:Tektosyne.Collections.Int32HashSet.Entry"/> instances within <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.EntryCount"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.Entry.Key">
            <summary>
            The <see cref="T:System.Int32"/> element stored in the <see cref="T:Tektosyne.Collections.Int32HashSet.Entry"/>.</summary>>
            <remarks>
            <b>Key</b> returns zero if <see cref="F:Tektosyne.Collections.Int32HashSet.Entry.IsValid"/> is <c>false</c>.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.Int32HashSet.InstanceData">
            <summary>
            Contains the elements of the <see cref="T:Tektosyne.Collections.Int32HashSet"/>.</summary>
            <remarks>
            <b>InstanceData</b> provides and maintains the actual hashtable used by the <see
            cref="T:Tektosyne.Collections.Int32HashSet"/> class.  When a read-only view is created, it shares the
            <b>InstanceData</b> of the original <see cref="T:Tektosyne.Collections.Int32HashSet"/>. This allows the
            read-only view to reflect all changes to the original instance.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.InstanceData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/> class.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/> is initially capable
            of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.InstanceData.SmallPrimes">
            <summary>
            A list of small prime numbers chosen for optimal performance.</summary>
            <remarks>
            <b>SmallPrimes</b> contains the subset of prime numbers that was chosen by the BCL
            team for optimal reallaction performance of the standard <see cref="T:System.Collections.Generic.Dictionary`2"/> class.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.InstanceData.Buckets">
            <summary>
            An <see cref="T:System.Array"/> containing the starting indices of linked lists within the
            <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> collection. The hash code of all elements within each linked
            list equals the corresponding <b>Buckets</b> index.</summary>>
            <remarks>
            Any <b>Buckets</b> element that has no matching <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> elements has
            the value -1.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries">
            <summary>
            An <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Collections.Int32HashSet.Entry"/> instances that contains all existing
            elements and/or storage for new elements.</summary>>
            <remarks>
            Any <b>Entries</b> element that is available for a new element has an <see
            cref="F:Tektosyne.Collections.Int32HashSet.Entry.IsValid"/> flag which is <c>false</c>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.InstanceData.EntryCount">
            <summary>
            The number of <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> elements, starting from the first element, that
            may be currently occupied. The default is zero.</summary>>
            <remarks>
            <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> indices equal to or greater than <b>EntryCount</b> are
            guaranteed to be unoccupied. Indices less than <b>EntryCount</b> may also be free,
            in which case <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.FreeList"/> returns a valid index.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.InstanceData.FreeCount">
            <summary>
            The number of <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> elements within <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.EntryCount"/> that
            are currently unoccupied. The default is zero.</summary>>
        </member>
        <member name="F:Tektosyne.Collections.Int32HashSet.InstanceData.FreeList">
            <summary>
            The index of the first <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> element within <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.EntryCount"/>
            that is currently unoccupied. The default is -1.</summary>
            <remarks>
            <b>FreeList</b> returns -1 when there are no free <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> within <see
            cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.EntryCount"/>. Otherwise, all unoccupied <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> starting at
            <b>FreeList</b> form a linked list.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.InstanceData.Add(System.Int32)">
            <summary>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/>.</summary>
            <param name="item">
            The <see cref="T:System.Int32"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> already exists in the <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/>.
            </exception>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.InstanceData.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/>.</summary>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.InstanceData.Find(System.Int32)">
            <summary>
            Finds the specified element within the <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/>.</summary>
            <param name="item">
            The <see cref="T:System.Int32"/> element to locate.</param>
            <returns>
            The index of the <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.Entries"/> element whose <see cref="F:Tektosyne.Collections.Int32HashSet.Entry.Key"/> equals
            <paramref name="item"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.InstanceData.GetPrime(System.Int32)">
            <summary>
            Gets the smallest prime number that is equal to or greater than the specified value.
            </summary>
            <param name="min">
            The lower threshold for the returned prime number.</param>
            <returns>
            The smallest prime number that is equal to or greater than <paramref name="min"/>. 
            </returns>
            <remarks>
            <b>GetPrime</b> first chooses among the preselected <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.SmallPrimes"/>, and
            computes a new prime only when <paramref name="min"/> is greater than any <see
            cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.SmallPrimes"/> element.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.InstanceData.Remove(System.Int32)">
            <summary>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/>.</summary>
            <param name="item">
            The <see cref="T:System.Int32"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was found and removed; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.Int32HashSet.InstanceData.Resize">
            <summary>
            Resizes the <see cref="T:Tektosyne.Collections.Int32HashSet.InstanceData"/> to accommodate twice the current <see
            cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.EntryCount"/>.</summary>
            <remarks>
            <b>Resize</b> is only called when the <see cref="F:Tektosyne.Collections.Int32HashSet.InstanceData.FreeList"/> is empty.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.KeyedList`2">
            <summary>
            Provides a generic collection of <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> elements that are
            accessible by index and by key.</summary>
            <typeparam name="TKey">
            The type of the <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property that all elements in the
            collection inherit from the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface. Keys cannot be null
            references.</typeparam>
            <typeparam name="TValue">
            The type of all elements in the collection. This type must implement <see
            cref="T:Tektosyne.Collections.IKeyedValue`1"/> with the <typeparamref name="TKey"/> type. If <typeparamref
            name="TValue"/> is a reference type, elements may be null references.</typeparam>
            <remarks><para>
            <b>KeyedList</b> provides a <see cref="T:Tektosyne.Collections.ListEx`1"/> whose elements contain an embedded key,
            as defined by the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface. Several additional methods
            adopted from the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class allow direct access by key.
            </para><para>
            The collection may contain multiple identical keys, unless <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/>
            is <c>true</c>. All key access methods return the first occurrence of the specified key.
            Access by index is an O(1) operation but access by key is an O(<em>N</em>) operation, where
            <em>N</em> is the number of elements in the collection.
            </para><para>
            <b>KeyedList</b> also provides several extra features inherited from <see
            cref="T:Tektosyne.Collections.ListEx`1"/>; please see there for details. Note that <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/>
            now checks for unique keys, rather than unique key-and-value pairs.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class that is
            empty and has the default initial capacity.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class that is
            empty, has the default initial capacity, and optionally ensures that all keys are
            unique.</summary>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class that
            contains elements copied from the specified collection and has sufficient capacity to 
            accommodate the number of elements copied.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="collection"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="collection"/> contains an element whose embedded key is a null
            reference.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class that is
            empty and has the specified initial capacity.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.KeyedList`2"/> is initially
            capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class that is
            empty, has the specified initial capacity, and optionally ensures that all keys are
            unique.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.KeyedList`2"/> is initially
            capable of storing.</param>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.#ctor(Tektosyne.Collections.KeyedList{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class that
            contains elements copied from the specified instance and has sufficient capacity to 
            accommodate the number of elements copied.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> collection whose elements are copied to the
            new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details. This constructor also
            copies the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.#ctor(Tektosyne.Collections.KeyedList{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyedList`2"/> class that is a
            read-only view of the specified instance.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> collection that provides the initial values
            for the <see cref="F:Tektosyne.Collections.ListEx`1.InnerList"/> field and for the <see
            cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> property. This argument
            must be <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="list"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.KeyedList`2.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.KeyedList`2.Item(`0)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <value>
            The value associated with the first occurrence of the specified <paramref name="key"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="key"/> does not exist in the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.
            </exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Item(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.CheckWritable(`1)">
            <summary>
            Checks that the specified value can be added to the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</summary>
            <param name="value">
            The value to add.</param>
            <exception cref="T:System.ArgumentNullException">
            The key embedded in <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> already contains the key embedded in <paramref
            name="value"/>, and the <see cref="T:Tektosyne.Collections.KeyedList`2"/> ensures that all keys are
            unique.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.CheckWritable(System.Int32,`1)">
            <summary>
            Checks that the specified value can be inserted into the <see cref="T:Tektosyne.Collections.KeyedList`2"/> at the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="value"/>.</param>
            <param name="value">
            The value to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            The key embedded in <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> already contains the key embedded in <paramref
            name="value"/> at a different index, and the <see cref="T:Tektosyne.Collections.KeyedList`2"/>
            ensures that all keys are unique.</para></exception>
            <remarks>
            <b>CheckWritable</b> does not test for duplicate keys if the specified <paramref
            name="index"/> is less than zero, or equal to or greater than <see
            cref="P:Tektosyne.Collections.ListEx`1.Count"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.AsReadOnly">
            <summary>
            Creates a read-only view of the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</returns>
            <remarks>
            <b>Clone</b> preserves the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property, but
            not the values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.KeyedList`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.KeyedList`2"/> contains an element with
            the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.KeyedList`2.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.KeyedList`2"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all
            <typeparamref name="TValue"/> elements.
            </para><para>
            <b>Copy</b> preserves the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property, but
            not the values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to get.</param>
            <returns>
            The value at the specified <paramref name="index"/> in the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.GetByKey(`0)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <returns>
            The value associated with the first occurrence of <paramref name="key"/> in the <see
            cref="T:Tektosyne.Collections.KeyedList`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="key"/> was not found in the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.
            </exception>
            <remarks>
            <b>GetByKey</b> has the same effect as reading the key indexer, <see
            cref="P:Tektosyne.Collections.KeyedList`2.Item(`0)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index.</summary>
            <param name="index">
            The zero-based index of the key to get.</param>
            <returns>
            The key at the specified <paramref name="index"/> in the <see cref="T:Tektosyne.Collections.KeyedList`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> element at the specified <paramref
            name="index"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="key"/> in the <see
            cref="T:Tektosyne.Collections.KeyedList`2"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.SetByIndex(System.Int32,`1)">
            <summary>
            Sets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to set.</param>
            <param name="value">
            The value to store at the specified <paramref name="index"/> in the <see
            cref="T:Tektosyne.Collections.KeyedList`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            The key embedded in <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.KeyedList`2"/> already contains the key embedded in <paramref 
            name="value"/> at a different index, and the <see cref="T:Tektosyne.Collections.KeyedList`2"/>
            ensures that all keys are unique.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyedList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)"/> for details.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.KeyMismatchException">
            <summary>
            The exception that is thrown when dictionary and <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> keys are
            mismatched.</summary>
            <remarks><para>
            <b>KeyMismatchException</b> extends the <see cref="T:System.InvalidOperationException"/> class with
            two additional properties, <see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/> and <see
            cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/>, holding the mismatched key values that caused the
            exception.
            </para><para>
            <b>KeyMismatchException</b> is thrown by the generic dictionary classes in the 
            <b>Tektosyne.Collections</b> namespace when the user attempts to associate an <see
            cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance with a dictionary <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> that differs from the object’s own <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyMismatchException.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyMismatchException"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyMismatchException"/> class with default
            properties.</summary>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Message"/></term>
            <description>A localized message indicating mismatched key values.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/></term>
            <description>A null reference.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyMismatchException.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyMismatchException"/> class with the
            mismatched key values that caused the exception.</summary>
            <param name="key">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> that was found or stored in a <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> associated with <paramref name="valueKey"/>.</param>
            <param name="valueKey">
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> that was found or stored in an <see
            cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance associated with <paramref name="key"/>.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Message"/></term>
            <description>A localized message, followed by the specified <paramref name="key"/> and
            <paramref name="valueKey"/> values.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/></term>
            <description>The specified <paramref name="key"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/></term>
            <description>The specified <paramref name="valueKey"/>.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyMismatchException.#ctor(System.Object,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyMismatchException"/> class with the
            mismatched key values that caused the exception, and with the specified error message.
            </summary>
            <param name="key">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> that was found or stored in a <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> associated with <paramref name="valueKey"/>.</param>
            <param name="valueKey">
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> that was found or stored in an <see
            cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance associated with <paramref name="key"/>.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Message"/></term>
            <description>The specified <paramref name="message"/>, followed by the specified
            <paramref name="key"/> and <paramref name="valueKey"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/></term>
            <description>The specified <paramref name="key"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/></term>
            <description>The specified <paramref name="valueKey"/>.</description>
            </item></list><para>
            If the specified <paramref name="message"/> is a null reference or an empty string, the
            <b>Message</b> property will contain a localized message indicating mismatched key
            values.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyMismatchException"/> class with the
            specified error message.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Message"/></term>
            <description>The specified <paramref name="message"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/></term>
            <description>A null reference.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyMismatchException"/> class with the
            specified error message and with the previous exception that is the cause of this <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The specified <paramref name="innerException"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Message"/></term>
            <description>The specified <paramref name="message"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/></term>
            <description>A null reference.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyMismatchException"/> class with
            serialized data.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object providing serialized object data for the <see
            cref="T:Tektosyne.Collections.KeyMismatchException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for details.
            </para><para>
            The values of the <see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/> and <see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/> properties are
            deserialized from two additional fields, named "Key" and "ValueKey".</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.KeyMismatchException.Key">
            <summary>
            Gets the dictionary key that caused the exception.</summary>
            <value>
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> that caused the <see cref="T:Tektosyne.Collections.KeyMismatchException"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.KeyMismatchException.Message">
            <summary>
            Gets the error message, followed by the mismatched key values if available.</summary>
            <value>
            The error message passed to the constructor, followed by the values of the <see
            cref="P:Tektosyne.Collections.KeyMismatchException.Key"/> and <see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/> properties if they are not null references.
            </value>
            <remarks>
            The error message should be localized.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.KeyMismatchException.ValueKey">
            <summary>
            Gets the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> key that caused the exception.</summary>
            <value>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> of an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance
            that caused the <see cref="T:Tektosyne.Collections.KeyMismatchException"/>.</value>
        </member>
        <member name="M:Tektosyne.Collections.KeyMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the data needed to serialize the
            exception.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that receives the serialized object data of
            the <see cref="T:Tektosyne.Collections.KeyMismatchException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for details.
            </para><para>
            The values of the <see cref="P:Tektosyne.Collections.KeyMismatchException.Key"/> and <see cref="P:Tektosyne.Collections.KeyMismatchException.ValueKey"/> properties are serialized
            to two additional fields, named "Key" and "ValueKey".</para></remarks>
        </member>
        <member name="T:Tektosyne.Collections.KeyValueList`2">
            <summary>
            Provides a generic collection of key-and-value pairs that retain their insertion order and
            are accessible by index and by key.</summary>
            <typeparam name="TKey">
            The type of all keys in the collection. Keys cannot be null references.</typeparam>
            <typeparam name="TValue">
            The type of all values that are associated with the keys. If <typeparamref name="TValue"/>
            is a reference type, values may be null references.</typeparam>
            <remarks><para>
            <b>KeyValueList</b> provides a <see cref="T:Tektosyne.Collections.ListEx`1"/> that contains <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements and implements the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface. Several additional methods adopted from the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/> class allow direct access by key and by value.
            </para><para>
            The collection may contain multiple identical keys. All key access methods return the first
            occurrence of the specified key. Access by index is an O(1) operation but access by key or
            by value are both O(<em>N</em>) operations, where <em>N</em> is the number of key-and-value
            pairs in the collection.
            </para><para>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of any <typeparamref name="TValue"/> that
            implements the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface is automatically checked against
            the associated collection key when a key or value is changed or inserted.
            </para><para>
            <b>KeyValueList</b> also provides several extra features inherited from <see
            cref="T:Tektosyne.Collections.ListEx`1"/>; please see there for details. Note that <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/>
            checks for unique key-and-value pairs, rather than for unique keys.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class that is
            empty and has the default initial capacity.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class that
            is empty, has the default initial capacity, and optionally ensures that all keys are
            unique.</summary>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class that
            contains elements copied from the specified collection and has sufficient capacity to 
            accommodate the number of elements copied.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="collection"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="collection"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component is a null reference.</para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="collection"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance, and whose
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component differs from that instance’s
            <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class that is
            empty and has the specified initial capacity.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is
            initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class that
            is empty, has the specified initial capacity, and optionally ensures that all keys are
            unique.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is
            initially capable of storing.</param>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.#ctor(Tektosyne.Collections.KeyValueList{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class that
            contains elements copied from the specified instance and has sufficient capacity to 
            accommodate the number of elements copied.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> collection whose elements are copied to the
            new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details. This constructor also
            copies the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.#ctor(Tektosyne.Collections.KeyValueList{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> class that is
            a read-only view of the specified instance.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> collection that provides the initial values
            for the <see cref="F:Tektosyne.Collections.ListEx`1.InnerList"/> field and for the <see
            cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> property. This argument
            must be <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="list"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.KeyValueList`2._keys">
            <summary>Backs the <see cref="P:Tektosyne.Collections.KeyValueList`2.Keys"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.KeyValueList`2._values">
            <summary>Backs the <see cref="P:Tektosyne.Collections.KeyValueList`2.Values"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.KeyValueList`2.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.KeyValueList`2.Item(`0)">
            <overloads>
            Gets or sets the element at the specified index or with the specified key.</overloads>
            <summary>
            Gets or sets the value associated with the first occurrence of the specified key.
            </summary>
            <param name="key">
            The key whose value to get or set.</param>
            <value><para>
            The value associated with the first occurrence of the specified <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the end of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.
            </para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is read, and <paramref name="key"/> does not exist in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is read-only.
            </exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Item(`0)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.KeyValueList`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.IList`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Keys"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.KeyValueList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.KeyValueList`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.IList`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Values"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.KeyValueList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</value>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.CheckTargetArray(System.Array,System.Int32)">
            <summary>
            Checks the bounds of the specified array and the specified starting index against the
            size of the <see cref="F:Tektosyne.Collections.ListEx`1.InnerList"/>.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination for elements copied from
            the <see cref="F:Tektosyne.Collections.ListEx`1.InnerList"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the <see cref="F:Tektosyne.Collections.ListEx`1.InnerList"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.CheckWritable(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Checks that the specified key-and-value pair can be added to the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> already contains the <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>, and the
            <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> ensures that all keys are unique.
            </para></exception>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.CheckWritable(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Checks that the specified key-and-value pair can be inserted into the <see
            cref="T:Tektosyne.Collections.MultiKeyedList`2"/> at the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="pair"/>.</param>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> already contains the <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> at a
            different index, and the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> ensures that all
            keys are unique.</para></exception>
            <remarks>
            <b>CheckWritable</b> does not test for duplicate keys if the specified <paramref
            name="index"/> is less than zero, or equal to or greater than <see
            cref="P:Tektosyne.Collections.ListEx`1.Count"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.Add(`0,`1)">
            <overloads>
            Adds an element to the end of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</overloads>
            <summary>
            Adds an element with the specified key and value to the end of the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> already contains the specified
            key-and-value pair, and the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> ensures that all
            elements are unique.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.AsReadOnly">
            <summary>
            Creates a read-only view of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</returns>
            <remarks>
            <b>Clone</b> preserves the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property, but
            not the values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> contains the specified
            value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.KeyValueList`2"/> contains an element with the
            specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.KeyValueList`2.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all
            <typeparamref name="TValue"/> values. The <typeparamref name="TKey"/> keys are always
            duplicated by a shallow copy.
            </para><para>
            <b>Copy</b> preserves the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property, but
            not the values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to get.</param>
            <returns>
            The value at the specified <paramref name="index"/> in the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.GetByKey(`0)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <returns>
            The value associated with the first occurrence of <paramref name="key"/> in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="key"/> was not found in the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.
            </exception>
            <remarks>
            <b>GetByKey</b> has the same effect as reading the key indexer, <see
            cref="P:Tektosyne.Collections.KeyValueList`2.Item(`0)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index.</summary>
            <param name="index">
            The zero-based index of the key to get.</param>
            <returns>
            The key at the specified <paramref name="index"/> in the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="key"/> in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.IndexOfValue(`1)">
            <summary>
            Returns the zero-based index of first occurrence of the specified value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/> in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>, if found; otherwise, -1.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.Remove(`0)">
            <overloads>
            Removes the first occurrence of specified element from the <see cref="T:Tektosyne.Collections.KeyValueList`2"/>.</overloads>
            <summary>
            Removes the first occurrence of the element with the specified key from the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the first associated element was
            removed; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.SetByIndex(System.Int32,`1)">
            <summary>
            Sets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to set.</param>
            <param name="value">
            The value to store at the specified <paramref name="index"/> in the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> component differs from the key at the specified <paramref
            name="index"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.SetByKey(`0,`1)">
            <summary>
            Sets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to set.</param>
            <param name="value"><para>
            The value to associate with the first occurrence of <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, <b>SetByKey</b> adds a new element with the
            specified <paramref name="key"/> and <paramref name="value"/> to the end of the <see
            cref="T:Tektosyne.Collections.KeyValueList`2"/>.</para></param>
            <returns>
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> index of the element that was changed or
            added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.KeyValueList`2"/> is read-only.</exception>
            <remarks>
            <b>SetByKey</b> has the same effect as setting the key indexer, <see
            cref="P:Tektosyne.Collections.KeyValueList`2.Item(`0)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.KeyValueList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)"/> for details.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.ListEx`1">
            <summary>
            Provides a generic collection of elements that are accessible by index.</summary>
            <typeparam name="T">
            The type of all elements in the collection. If <typeparamref name="T"/> is a reference type,
            elements may be null references.</typeparam>
            <remarks><para>
            <b>ListEx</b> provides a <see cref="T:System.Collections.Generic.List`1"/> with a few extra features:
            </para><list type="bullet"><item>
            <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> provides a set-like collection which ensures that all
            elements have unique values. Attempting to insert a duplicate value will raise a <see
            cref="T:System.NotSupportedException"/>. This property must be set during construction.
            </item><item>
            <see cref="M:Tektosyne.Collections.ListEx`1.AsReadOnly"/> returns a read-only wrapper that has the same public type
            as the original collection. Attempting to modify the collection through such a read-only
            view will raise a <see cref="T:System.NotSupportedException"/>.
            </item><item>
            <see cref="M:Tektosyne.Collections.ListEx`1.Copy"/> creates a deep copy of the collection by invoking <see
            cref="M:System.ICloneable.Clone"/> on each element. This feature requires that all copied elements
            implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="F:Tektosyne.Collections.ListEx`1.Empty"/> returns an immutable empty collection that is cached for
            repeated access.
            </item><item>
            <see cref="M:Tektosyne.Collections.ListEx`1.Equals(System.Collections.Generic.ICollection{`0})"/> compares two collections with identical element types for
            value equality of all elements. The collections compare as equal if they contain the same
            elements in the same order.
            </item></list><para>
            Moreover, several properties that the standard class provides as explicit interface
            implementations have been elevated to public visibility.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class that is empty and has
            the default initial capacity.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class that is empty, has the
            default initial capacity, and optionally ensures that all elements are unique.</summary>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class that contains elements
            copied from the specified collection and has sufficient capacity to accommodate the
            number of elements copied.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class that is empty and has
            the specified initial capacity.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.ListEx`1"/> is initially capable of
            storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class that is empty, has the
            specified initial capacity, and optionally ensures that all elements are unique.
            </summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.ListEx`1"/> is initially capable of
            storing.</param>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.#ctor(Tektosyne.Collections.ListEx{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class that contains elements
            copied from the specified instance and has sufficient capacity to accommodate the
            number of elements copied.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> collection whose elements are copied to the new collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details. This constructor also
            copies the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.#ctor(Tektosyne.Collections.ListEx{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class that is a read-only view
            of the specified instance.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> collection that provides the initial values for the <see
            cref="F:Tektosyne.Collections.ListEx`1.InnerList"/> field and for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> property. This argument must be
            <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="list"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.ListEx`1.InnerList">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1"/> collection that holds the <typeparamref name="T"/> elements of
            the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ListEx`1.ReadOnlyFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ListEx`1.ReadOnlyWrapper">
            <summary>
            The read-only <see cref="T:Tektosyne.Collections.ListEx`1"/> collection that is returned by the <see
            cref="M:Tektosyne.Collections.ListEx`1.AsReadOnly"/> method.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ListEx`1.UniqueFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.ListEx`1.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <value>
            The number of elements that the <see cref="T:Tektosyne.Collections.ListEx`1"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a value that is less than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.List`1.Capacity"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <value>
            The number of elements contained in the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.List`1.Count"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.ListEx`1"/> has a fixed size.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.ListEx`1"/> has a fixed size; otherwise, <c>false</c>.
            The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.ListEx`1"/> is also read-only, and vice versa.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only; otherwise, <c>false</c>. The
            default is <c>false</c>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.ListEx`1"/> is synchronized
            (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.ListEx`1"/> is synchronized (thread-safe);
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.IsUnique">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements
            are unique.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are unique;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            <b>IsUnique</b> provides a set-like collection by ensuring that all elements in the <see
            cref="T:Tektosyne.Collections.ListEx`1"/> are unique. When the property is <c>true</c>, any attempt to add an
            element that is already contained in the <see cref="T:Tektosyne.Collections.ListEx`1"/> will cause a <see
            cref="T:System.NotSupportedException"/>.
            </para><note type="implementnotes">
            Due to the necessary test for duplicate elements, the addition of a new element becomes
            an O(<em>N</em>) operation when <b>IsUnique</b> is <c>true</c>.</note></remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.</summary>
            <param name="index">
            The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified element
            at a different index, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are
            unique.</para></exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.List`1.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.</summary>
            <param name="index">
            The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>. When the property is set, this
            value must be compatible with <typeparamref name="T"/>.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.InvalidCastException">
            The property is set to a value that is not compatible with <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified element
            at a different index, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are
            unique.</para></exception>
        </member>
        <member name="P:Tektosyne.Collections.ListEx`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.ListEx`1"/>, obtain a lock
            on the <b>SyncRoot</b> object rather than the collection itself. A read-only view always
            returns the same <b>SyncRoot</b> object as the underlying writable collection.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.CheckWritable(`0)">
            <overloads>
            Checks that the specified element can be added to the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </overloads>
            <summary>
            Checks that the specified element can be added to the end of the <see
            cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to add.</param>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified <paramref name="item"/>, and
            the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are unique.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.CheckWritable(System.Int32,`0)">
            <summary>
            Checks that the specified element can be inserted into the <see cref="T:Tektosyne.Collections.ListEx`1"/> at
            the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="item"/>.</param>
            <param name="item">
            The element to insert.</param>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified <paramref name="item"/> at a
            different index, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are unique.
            </para></exception>
            <remarks>
            <b>CheckWritable</b> does not test for duplicate elements if the specified <paramref
            name="index"/> is less than zero, or equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Add(`0)">
            <summary>
            Adds an element to the end of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to add.</param>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified <paramref name="item"/>, and
            the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are unique.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Add(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an element to the end of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to add. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <returns>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> index at which the <paramref name="item"/> has been added.
            </returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified <paramref name="item"/>, and
            the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are unique.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains one or more elements in the specified 
            <paramref name="collection"/>, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements
            are unique.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.BinarySearch(`0)">
            <overloads>
            Uses a binary search algorithm to locate a specific element in the sorted <see
            cref="T:Tektosyne.Collections.ListEx`1"/> or a portion of it.</overloads>
            <summary>
            Searches the entire sorted <see cref="T:Tektosyne.Collections.ListEx`1"/> for the specified element using the
            default comparer, and returns the zero-based index of the element.</summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Tektosyne.Collections.ListEx`1"/>,
            if <paramref name="item"/> is found; otherwise, a negative number, which is the bitwise
            complement of the index of the next element that is larger than <paramref name="item"/>
            or, if there is no larger element, the bitwise complement of <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The default <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see
            cref="T:System.Collections.IComparer"/> implementation for <typeparamref name="T"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.BinarySearch(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:Tektosyne.Collections.ListEx`1"/> for the specified element using the
            specified comparer, and returns the zero-based index of the element.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Tektosyne.Collections.ListEx`1"/>,
            if <paramref name="item"/> is found; otherwise, a negative number, which is the bitwise
            complement of the index of the next element that is larger than <paramref name="item"/>
            or, if there is no larger element, the bitwise complement of <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a subrange of the sorted <see cref="T:Tektosyne.Collections.ListEx`1"/> for the specified element
            using the specified comparer, and returns the zero-based index of the element.</summary>
            <param name="index">
            The zero-based starting index of the range to search.</param>
            <param name="count">
            The length of the range to search.</param>
            <param name="item">
            The element to locate.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Tektosyne.Collections.ListEx`1"/>,
            if <paramref name="item"/> is found; otherwise, a negative number, which is the bitwise
            complement of the index of the next element that is larger than <paramref name="item"/>
            or, if there is no larger element, the bitwise complement of <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Clear"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
            <remarks>
            <b>Clone</b> preserves the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property, but not the 
            values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.ListEx`1"/> contains the specified element.</summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:Tektosyne.Collections.ListEx`1"/>;
            otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Contains(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.ListEx`1"/> contains the specified element.</summary>
            <param name="item">
            The element to locate. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:Tektosyne.Collections.ListEx`1"/>;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="T"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.ListEx`1.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.ListEx`1"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all elements.
            </para><para>
            <b>Copy</b> preserves the value of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property, but not the
            values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.CopyTo(`0[])">
            <overloads>
            Copies the entire <see cref="T:Tektosyne.Collections.ListEx`1"/> to a one-dimensional <see cref="T:System.Array"/>.
            </overloads>
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.ListEx`1"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the beginning of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from the <see cref="T:Tektosyne.Collections.ListEx`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:Tektosyne.Collections.ListEx`1"/> is greater than the
            available space in the destination <paramref name="array"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.CopyTo(`0[])"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.ListEx`1"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from the <see cref="T:Tektosyne.Collections.ListEx`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.ListEx`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.ListEx`1"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from the <see cref="T:Tektosyne.Collections.ListEx`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.ListEx`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="T"/> cannot be cast automatically to the type of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a subrange of the <see cref="T:Tektosyne.Collections.ListEx`1"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="index">
            The zero-based index in the <see cref="T:Tektosyne.Collections.ListEx`1"/> at which copying begins.</param>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from the <see cref="T:Tektosyne.Collections.ListEx`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <param name="count">
            The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is less than zero.
            </para><para>-or-</para><para>
            <paramref name="count"/> is less than zero.</para></exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="index"/> is equal to or greater than the <see cref="P:Tektosyne.Collections.ListEx`1.Count"/> of the <see
            cref="T:Tektosyne.Collections.ListEx`1"/>.
            </para><para>-or-</para><para>
            <paramref name="count"/> is greater than the number of elements from <paramref
            name="index"/> to the <see cref="P:Tektosyne.Collections.ListEx`1.Count"/> of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            <paramref name="count"/> is greater than the available space from <paramref
            name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Equals(System.Collections.Generic.ICollection{`0})">
            <summary>
            Determines whether the specified collection contains the same elements in the same order
            as the current <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of elements to compare with the current <see
            cref="T:Tektosyne.Collections.ListEx`1"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.ListEx`1"/>, and all elements compare as equal when
            retrieved in the enumeration sequence for each collection.</item></list></returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})"/> to test the two
            collections for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.GetEnumerator">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1.Enumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the entire <see cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a subrange of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="index">
            The zero-based starting index of the range of elements to copy.</param>
            <param name="count">
            The number of elements to copy.</param>
            <returns>
            A shallow copy of the subrange of the <see cref="T:Tektosyne.Collections.ListEx`1"/> that starts at <paramref
            name="index"/> and contains <paramref name="count"/> elements.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)"/> for details. Note that this method
            returns a standard <see cref="T:System.Collections.Generic.List`1"/>, not a <see cref="T:Tektosyne.Collections.ListEx`1"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.IndexOf(`0)">
            <overloads>
            Returns the zero-based index of the first occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/> or a portion of it.</overloads>
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in the
            entire <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the entire
            <see cref="T:Tektosyne.Collections.ListEx`1"/>, if found; otherwise, -1.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.IndexOf(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to locate. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the <see
            cref="T:Tektosyne.Collections.ListEx`1"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.IndexOf(`0,System.Int32)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>, starting at the specified index.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the search.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ListEx`1"/> that starts at <paramref name="index"/>, if found;
            otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified element in a
            subrange of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the search.</param>
            <param name="count">
            The number of elements to search.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ListEx`1"/> that starts at <paramref name="index"/> and contains
            <paramref name="count"/> elements, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Tektosyne.Collections.ListEx`1"/> at the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="item"/>.</param>
            <param name="item">
            The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified <paramref name="item"/>, and
            the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are unique.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:Tektosyne.Collections.ListEx`1"/> at the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="item"/>.</param>
            <param name="item">
            The element to insert. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains the specified <paramref name="item"/>, and
            the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements are unique.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of the specified collection into the <see cref="T:Tektosyne.Collections.ListEx`1"/> at the
            specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="collection"/>.</param>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> already contains one or more elements in the specified 
            <paramref name="collection"/>, and the <see cref="T:Tektosyne.Collections.ListEx`1"/> ensures that all elements
            are unique.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.LastIndexOf(`0)">
            <overloads>
            Returns the zero-based index of the last occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/> or a portion of it.</overloads>
            <summary>
            Returns the zero-based index of the last occurrence of the specified element in the
            entire <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <returns>
            The zero-based index of the last occurrence of <paramref name="item"/> in the entire
            <see cref="T:Tektosyne.Collections.ListEx`1"/>, if found; otherwise, -1.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Returns the zero-based index of the last occurrence of the specified element in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>, ending at the specified index.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <returns>
            The zero-based index of the last occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ListEx`1"/> that ends at <paramref name="index"/>, if found;
            otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Returns the zero-based index of the last occurrence of the specified element in a
            subrange of the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="item">
            The element to locate.</param>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <param name="count">
            The number of elements to search.</param>
            <returns>
            The zero-based index of the last occurrence of <paramref name="item"/> in the subrange
            of the <see cref="T:Tektosyne.Collections.ListEx`1"/> that contains <paramref name="count"/> elements and ends
            at <paramref name="index"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified element from the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </summary>
            <param name="item">
            The element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified element from the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </summary>
            <param name="item">
            The element to remove. This argument must be compatible with <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> is not compatible with <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index in the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="index">
            The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="index">
            The zero-based starting index of the range of elements to remove.</param>
            <param name="count">
            The number of elements to remove.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Reverse">
            <overloads>
            Reverses the order of the elements in the <see cref="T:Tektosyne.Collections.ListEx`1"/> or a portion of it.
            </overloads>
            <summary>
            Reverses the order of the elements in the entire <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Reverse"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.</summary>
            <param name="index">
            The zero-based starting index of the range of elements to reverse.</param>
            <param name="count">
            The number of elements to reverse.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of
            elements in the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Reverse"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Sort">
            <overloads>
            Sorts the <see cref="T:Tektosyne.Collections.ListEx`1"/> or a portion of it.</overloads>
            <summary>
            Sorts the entire <see cref="T:Tektosyne.Collections.ListEx`1"/> using the default comparer.</summary>
            <exception cref="T:System.InvalidOperationException">
            The default <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see
            cref="T:System.Collections.IComparer"/> implementation for <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Sort"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the entire <see cref="T:Tektosyne.Collections.ListEx`1"/> using the specified comparison method.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparison"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the entire <see cref="T:Tektosyne.Collections.ListEx`1"/> using the specified comparer.</summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts a subrange of the <see cref="T:Tektosyne.Collections.ListEx`1"/> using the specified comparer.</summary>
            <param name="index">
            The zero-based starting index of the range to sort.</param>
            <param name="count">
            The length of the range to sort.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing elements, or a null reference to
            use the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> or <paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is a null reference, and the default <see
            cref="T:System.Collections.Generic.Comparer`1"/> cannot find a generic or non-generic <see cref="T:System.Collections.IComparer"/>
            implementation for <typeparamref name="T"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Tektosyne.Collections.ListEx`1"/> to a new <see cref="T:System.Array"/>.
            </summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the elements of the <see
            cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.ToArray"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.ListEx`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.TrimExcess"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the <see cref="T:Tektosyne.Collections.ListEx`1"/> to another element type.</summary>
            <typeparam name="TOutput">
            The type of all elements in the converted collection.</typeparam>
            <param name="converter">
            A <see cref="T:System.Converter`2"/> method that converts all elements from 
            <typeparamref name="T"/> to <typeparamref name="TOutput"/>.</param>
            <returns>
            A new <see cref="T:System.Collections.Generic.List`1"/> containing the elements copied from the current collection
            and converted to <typeparamref name="TOutput"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="converter"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})"/> for details. Note that this
            method returns a standard <see cref="T:System.Collections.Generic.List`1"/>, not a <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.ListEx`1"/> contains elements that match the
            conditions defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.ListEx`1"/> contains one or more elements that match the
            conditions defined by <paramref name="predicate"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.Find(System.Predicate{`0})">
            <summary>
            Finds the first element in the <see cref="T:Tektosyne.Collections.ListEx`1"/> that matches the conditions
            defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The first element that matches the conditions defined by <paramref name="predicate"/>,
            if found; otherwise, the default value for <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all elements in the <see cref="T:Tektosyne.Collections.ListEx`1"/> that match the conditions defined by
            the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            A new <see cref="T:System.Collections.Generic.List`1"/> containing all elements that match the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, an empty <b>List</b>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/> for details. Note that this method
            returns a standard <see cref="T:System.Collections.Generic.List`1"/>, not a <see cref="T:Tektosyne.Collections.ListEx`1"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindIndex(System.Predicate{`0})">
            <overloads>
            Returns the zero-based index of the first element in the <see cref="T:Tektosyne.Collections.ListEx`1"/>, or a
            portion of it, that matches the conditions defined by the specified predicate.
            </overloads>
            <summary>
            Returns the zero-based index of the first element in the entire <see cref="T:Tektosyne.Collections.ListEx`1"/>
            that matches the conditions defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the first element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the first element in the <see cref="T:Tektosyne.Collections.ListEx`1"/>,
            starting at the specified index, that matches the conditions defined by the specified
            predicate.</summary>
            <param name="index">
            The zero-based starting index of the search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the first element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the first element in a subrange of the <see
            cref="T:Tektosyne.Collections.ListEx`1"/> that matches the conditions defined by the specified predicate.
            </summary>
            <param name="index">
            The zero-based starting index of the search.</param>
            <param name="count">
            The number of elements to search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the first element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last element in the <see cref="T:Tektosyne.Collections.ListEx`1"/> that matches the conditions
            defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The last element that matches the conditions defined by <paramref name="predicate"/>, if
            found; otherwise, the default value for <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindLastIndex(System.Predicate{`0})">
            <overloads>
            Returns the zero-based index of the last element in the <see cref="T:Tektosyne.Collections.ListEx`1"/>, or a
            portion of it, that matches the conditions defined by the specified predicate.
            </overloads>
            <summary>
            Returns the zero-based index of the last element in the entire <see cref="T:Tektosyne.Collections.ListEx`1"/>
            that matches the conditions defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the last element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the last element in the <see cref="T:Tektosyne.Collections.ListEx`1"/>,
            ending at the specified index, that matches the conditions defined by the specified
            predicate.</summary>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the last element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index for the <see cref="T:Tektosyne.Collections.ListEx`1"/>.
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Returns the zero-based index of the last element in a subrange of the <see
            cref="T:Tektosyne.Collections.ListEx`1"/> that matches the conditions defined by the specified predicate.
            </summary>
            <param name="index">
            The zero-based starting index of the backward search.</param>
            <param name="count">
            The number of elements to search.</param>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The zero-based index of the last element that matches the conditions defined by
            <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
            <see cref="T:Tektosyne.Collections.ListEx`1"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element in the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</summary>
            <param name="action">
            The <see cref="T:System.Action`1"/> method to perform on each element.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.ListEx`1"/> that match the conditions defined
            by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            The number of elements that were removed from the <see cref="T:Tektosyne.Collections.ListEx`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.ListEx`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether all elements in the <see cref="T:Tektosyne.Collections.ListEx`1"/> match the conditions
            defined by the specified predicate.</summary>
            <param name="predicate">
            The <see cref="T:System.Predicate`1"/> method that defines the search conditions.</param>
            <returns>
            <c>true</c> if all elements in the <see cref="T:Tektosyne.Collections.ListEx`1"/> match the conditions defined
            by <paramref name="predicate"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/> for details.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.MultiKeyedList`2">
            <summary>
            Provides a generic collection of elements that are accessible by index and by one or more
            user-defined keys.</summary>
            <typeparam name="TKey">
            The type of the all user-defined keys in the collection. Keys cannot be null references.
            </typeparam>
            <typeparam name="TValue">
            The type of all elements in the collection. If <typeparamref name="TValue"/> is a reference
            type, elements may be null references.</typeparam>
            <remarks><para>
            <b>MultiKeyedList</b> provides a <see cref="T:Tektosyne.Collections.ListEx`1"/> whose elements must define at least
            one embedded key of type <typeparamref name="TKey"/>. Several additional methods adopted
            from the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class allow direct access by key.
            </para><para>
            The key of a given collection element is extracted by a user-defined <see
            cref="P:Tektosyne.Collections.MultiKeyedList`2.KeyConverter"/> method. This method must be specified
            during construction but may be changed at any time, allowing clients to use multiple keys
            with the same collection. All keys must be of type <typeparamref name="TKey"/>, however.
            </para><para>
            The collection may contain multiple identical keys, unless <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/>
            is <c>true</c>. All key access methods return the first occurrence of the specified key.
            Access by index is an O(1) operation but access by key is an O(<em>N</em>) operation, where
            <em>N</em> is the number of elements in the collection.
            </para><para>
            <b>MultiKeyedList</b> also provides several extra features inherited from <see
            cref="T:Tektosyne.Collections.ListEx`1"/>; please see there for details. Note that <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/>
            now checks for unique keys, rather than unique key-and-value pairs.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.#ctor(System.Converter{`1,`0})">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class that
            is empty and has the default initial capacity.</summary>
            <param name="keyConverter">
            The <see cref="T:System.Converter`2"/> method that converts a <typeparamref
            name="TValue"/> element into its associated <typeparamref name="TKey"/> key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="keyConverter"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.#ctor(System.Converter{`1,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class that
            is empty, has the default initial capacity, and optionally ensures that all keys are
            unique.</summary>
            <param name="keyConverter">
            The <see cref="T:System.Converter`2"/> method that converts a <typeparamref
            name="TValue"/> element into its associated <typeparamref name="TKey"/> key.</param>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="keyConverter"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class that
            contains elements copied from the specified collection and has sufficient capacity to 
            accommodate the number of elements copied.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements are copied to the new collection.</param>
            <param name="keyConverter">
            The <see cref="T:System.Converter`2"/> method that converts a <typeparamref
            name="TValue"/> element into its associated <typeparamref name="TKey"/> key.</param>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="collection"/> or <paramref name="keyConverter"/>is a null reference.
            </para><para>-or-</para><para>
            <paramref name="collection"/> contains an element whose embedded key is a null
            reference.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.#ctor(System.Int32,System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class that
            is empty and has the specified initial capacity.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> is
            initially capable of storing.</param>
            <param name="keyConverter">
            The <see cref="T:System.Converter`2"/> method that converts a <typeparamref
            name="TValue"/> element into its associated <typeparamref name="TKey"/> key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="keyConverter"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.#ctor(System.Int32,System.Converter{`1,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class that
            is empty, has the specified initial capacity, and optionally ensures that all keys are
            unique.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> is
            initially capable of storing.</param>
            <param name="keyConverter">
            The <see cref="T:System.Converter`2"/> method that converts a <typeparamref
            name="TValue"/> element into its associated <typeparamref name="TKey"/> key.</param>
            <param name="isUnique">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="keyConverter"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.#ctor(Tektosyne.Collections.MultiKeyedList{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class that
            contains elements copied from the specified instance and has sufficient capacity to 
            accommodate the number of elements copied.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> collection whose elements are copied to
            the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details. This constructor also
            copies the values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> and <see cref="P:Tektosyne.Collections.MultiKeyedList`2.KeyConverter"/>
            properties.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.#ctor(Tektosyne.Collections.MultiKeyedList{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> class that
            is a read-only view of the specified instance.</summary>
            <param name="list">
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> collection that provides the initial
            values for the <see cref="F:Tektosyne.Collections.ListEx`1.InnerList"/> and <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/>
            fields and for the <see cref="P:Tektosyne.Collections.MultiKeyedList`2.KeyConverter"/> property.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> property. This argument
            must be <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="list"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.MultiKeyedList`2._keyConverter">
            <summary>
            The <see cref="T:System.Converter`2"/> method that converts a specified <typeparamref
            name="TValue"/> element into its associated <typeparamref name="TKey"/> key.</summary>
        </member>
        <member name="F:Tektosyne.Collections.MultiKeyedList`2.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</summary>
            <remarks><para>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.
            </para><para>
            The <see cref="T:System.Converter`2"/> used by <b>Empty</b> is a pseudo-converter
            that maps all values to the default key.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.MultiKeyedList`2.Item(`0)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <value>
            The value associated with the first occurrence of the specified <paramref name="key"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="key"/> does not exist in the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.
            </exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Item(`0)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.MultiKeyedList`2.KeyConverter">
            <summary>
            Gets or sets the <see cref="T:System.Converter`2"/> that converts an element in the
            <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> into its associated key.</summary>
            <value>
            The <see cref="T:System.Converter`2"/> method that converts a specified <typeparamref
            name="TValue"/> element into its associated <typeparamref name="TKey"/> key.</value>
            <exception cref="T:System.ArgumentNullException">
            The property is set to a null reference.</exception>
            <remarks>
            <b>KeyConverter</b> never returns a null reference. The method should throw an <see
            cref="T:System.ArgumentNullException"/> when invoked with a null reference.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.CheckWritable(`1)">
            <summary>
            Checks that the specified value can be added to the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</summary>
            <param name="value">
            The value to add.</param>
            <exception cref="T:System.ArgumentNullException">
            The key embedded in <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> already contains the key embedded in
            <paramref name="value"/>, and the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> ensures
            that all keys are unique.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.CheckWritable(System.Int32,`1)">
            <summary>
            Checks that the specified value can be inserted into the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> at the specified index.</summary>
            <param name="index">
            The zero-based index at which to insert <paramref name="value"/>.</param>
            <param name="value">
            The value to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            The key embedded in <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> already contains the key embedded in
            <paramref name="value"/> at a different index, and the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> ensures that all keys are unique.</para></exception>
            <remarks>
            <b>CheckWritable</b> does not test for duplicate keys if the specified <paramref
            name="index"/> is less than zero, or equal to or greater than <see
            cref="P:Tektosyne.Collections.ListEx`1.Count"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.AsReadOnly">
            <summary>
            Creates a read-only view of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</returns>
            <remarks>
            <b>Clone</b> preserves the values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> and <see
            cref="P:Tektosyne.Collections.MultiKeyedList`2.KeyConverter"/> properties, but not the values of the <see
            cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> contains an element with
            the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.MultiKeyedList`2.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.MultiKeyedList`2"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all
            <typeparamref name="TValue"/> elements.
            </para><para>
            <b>Copy</b> preserves the values of the <see cref="P:Tektosyne.Collections.ListEx`1.IsUnique"/> and <see
            cref="P:Tektosyne.Collections.MultiKeyedList`2.KeyConverter"/> properties, but not the values of the <see
            cref="P:Tektosyne.Collections.ListEx`1.IsFixedSize"/> and <see cref="P:Tektosyne.Collections.ListEx`1.IsReadOnly"/> properties.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to get.</param>
            <returns>
            The value at the specified <paramref name="index"/> in the <see
            cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.GetByKey(`0)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <returns>
            The value associated with the first occurrence of <paramref name="key"/> in the <see
            cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="key"/> was not found in the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.
            </exception>
            <remarks>
            <b>GetByKey</b> has the same effect as reading the key indexer, <see
            cref="P:Tektosyne.Collections.MultiKeyedList`2.Item(`0)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.GetKey(System.Int32)">
            <overloads>
            Gets the key associated with the specified value.</overloads>
            <summary>
            Gets the key at the specified index of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.
            </summary>
            <param name="index">
            The zero-based index of the key to get.</param>
            <returns>
            The key at the specified <paramref name="index"/> of the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> element at the specified <paramref
            name="index"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="key"/> in the <see
            cref="T:Tektosyne.Collections.MultiKeyedList`2"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.SetByIndex(System.Int32,`1)">
            <summary>
            Sets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to set.</param>
            <param name="value">
            The value to store at the specified <paramref name="index"/> in the <see
            cref="T:Tektosyne.Collections.MultiKeyedList`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            The key embedded in <paramref name="value"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.ListEx`1.Count"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> already contains the key embedded in 
            <paramref name="value"/> at a different index, and the <see cref="T:Tektosyne.Collections.MultiKeyedList`2"/> ensures that all keys are unique.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.MultiKeyedList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the first occurrence of the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)"/> for details.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.QuadTree`1">
            <summary>
            Provides a generic collection of <see cref="T:Tektosyne.Geometry.PointD"/> keys and arbitrary values that are
            sorted in two dimensions using a quadrant tree.</summary>
            <typeparam name="TValue">
            The type of all values that are associated with the keys. If <typeparamref name="TValue"/>
            is a reference type, values may be null references.</typeparam>
            <remarks><para>
            <b>QuadTree</b> provides a two-dimensional search tree with <see cref="T:Tektosyne.Geometry.PointD"/> keys. The
            root node covers a specified rectangle (not necessarily a square), and each child node
            recursively covers one quadrant of its parent rectangle. Each leaf node holds one or more
            key-and-value pairs in a hashtable. Internal nodes hold no data.
            </para><list type="bullet"><item>
            The tree structure is exposed through the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> class. You can
            find the node associated with any given key, or with any given tree level and quadrant grid
            coordinates, and follow a reference to its four descendants or parent node.
            </item><item>
            All tree nodes have a unique signature that doubles as their key in a hashtable, providing
            fast tree-wide enumeration and O(1) access to any node with a given level and quadrant grid
            coordinates. <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> exploits this fact for a depth
            probe algorithm that greatly shortens search times in large trees.
            </item><item>
            <see cref="M:Tektosyne.Collections.QuadTree`1.FindRange(Tektosyne.Geometry.PointD,System.Double)"/> performs a two-dimensional range search that finds
            all elements within a given key range.
            </item></list><para>
            Like other <b>Tektosyne.Collections</b> classes, <b>QuadTree</b> also provides the following
            extra features:
            </para><list type="bullet"><item>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of any <typeparamref name="TValue"/> that
            implements the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface is automatically checked against
            the associated dictionary key when a key or value is changed or inserted.
            </item><item>
            <see cref="M:Tektosyne.Collections.QuadTree`1.Copy"/> creates a deep copy of the collection by invoking <see
            cref="M:System.ICloneable.Clone"/> on each value. This feature requires that all copied values
            implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="M:Tektosyne.Collections.QuadTree`1.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0}})"/> compares two collections with identical element types
            for value equality of all elements. The collections compare as equal if they contain the
            same elements. The enumeration order of elements is ignored since the <b>QuadTree</b> class
            does not establish any fixed element ordering.
            </item></list><para>
            <b>QuadTree</b> was inspired by the <c>Quadtree</c> class by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.231ff.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.#ctor(Tektosyne.Geometry.RectD)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QuadTree`1"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QuadTree`1"/> class that is empty and
            has the specified bounds.</summary>
            <param name="bounds">
            The bounds of all keys in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bounds"/> contains a <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectD.Height"/> that is equal to or less than zero.</exception>
            <remarks>
            <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/> defaults to 128.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.#ctor(Tektosyne.Geometry.RectD,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QuadTree`1"/> class that is empty and
            has the specified bounds and leaf node capacity.</summary>
            <param name="bounds">
            The bounds of all keys in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</param>
            <param name="capacity">
            The <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/> of all leaf <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> above <see
            cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="bounds"/> contains a <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectD.Height"/> that is equal to or less than zero.
            </para><para>-or-</para><para>
            <paramref name="capacity"/> is equal to or less than zero.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.#ctor(Tektosyne.Geometry.RectD,System.Collections.Generic.IDictionary{Tektosyne.Geometry.PointD,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QuadTree`1"/> class that has the
            specified bounds and contains elements copied from the specified collection.</summary>
            <param name="bounds">
            The bounds of all keys in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</param>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="bounds"/> contains a <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectD.Height"/> that is equal to or less than zero.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is outside of <paramref name="bounds"/>.</para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/> defaults to 128. This constructor calls <see cref="M:Tektosyne.Collections.QuadTree`1.AddRange(System.Collections.Generic.IDictionary{Tektosyne.Geometry.PointD,`0})"/> to
            add all elements in the specified <paramref name="dictionary"/> to the new <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1._count">
            <summary>
            The number of key-and-value pairs contained in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1._keys">
            <summary>Backs the <see cref="P:Tektosyne.Collections.QuadTree`1.Keys"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1._values">
            <summary>Backs the <see cref="P:Tektosyne.Collections.QuadTree`1.Values"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1._probe">
            <summary>
            The status of the last depth probe conducted by <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1._nodes">
            <summary>
            The hashtable containing all <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> instances that are
            attached to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.Capacity">
            <summary>
            The maximum capacity for the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> collection of all leaf
            <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> above <see cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>.</summary>
            <remarks>
            <b>Capacity</b> usually indicates the maximum number of elements in the <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> collection of a <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>. However,
            <b>Capacity</b> is ignored and the collection size is unbounded if the node’s <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/> equals <see cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.MaxLevel">
            <summary>
            The maximum level for any <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <remarks><para>
            <b>MaxLevel</b> specifies the zero-based index of the deepest level in any <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>. The maximum total number of levels therefore equals
            <b>MaxLevel</b> + 1, including the <see cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/> at level zero.
            </para><para>
            When a <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> is created on <b>MaxLevel</b>, the maximum
            <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/> is ignored so that its <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/>
            collection may grow unbounded.
            </para><para>
            <b>MaxLevel</b> is fixed at 14 so that each <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> can be
            uniquely identified by a 32-bit <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Signature"/> containing
            a bitwise combination of the following indices:
            </para><list type="bullet"><item>
            The lowest 4 bits contain the node’s <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>.
            </item><item>
            The middle 14 bits contain the node’s <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridX"/> index.
            </item><item>
            The highest 14 bits contain the node’s <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridY"/> index.
            </item></list><para>
            With a <b>MaxLevel</b> of 14, the deepest level can hold 16,384 x 16,384 nodes, and the
            entire <see cref="T:Tektosyne.Collections.QuadTree`1"/> can hold 357,913,941 nodes.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.ProbeLevel">
            <summary>
            The minimum level at which <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> begins using a depth probe.
            </summary>
            <remarks><para>
            <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> switches from a normal tree search to a heuristic depth
            probe algorithm when the number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> in the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/> reaches 4^<b>ProbeLevel</b>, indicating that a large
            proportion of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> resides at or below that level.
            </para><para>
            <b>ProbeLevel</b> is currently fixed at four, so that the depth probe starts at 256 <see
            cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/>. <b>ProbeLevel</b> cannot be less than two since the depth probe ascends
            two levels at a time.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.Bounds">
            <summary>
            The bounds of all keys in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <remarks><para>
            <b>Bounds</b> holds a <see cref="T:Tektosyne.Geometry.RectD"/> whose area covers all <see cref="T:Tektosyne.Geometry.PointD"/> keys
            in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>. <b>Bounds</b> always has a positive <see
            cref="F:Tektosyne.Geometry.RectD.Width"/> and <see cref="F:Tektosyne.Geometry.RectD.Height"/>.
            </para><para>
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> always divides both dimensions into the same number
            of grid cells at each <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>, but the dimensions do
            not have to be equal.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </summary>
            <value>
            The number of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements contained in the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</value>
            <remarks>
            <b>Count</b> returns a counter value maintained by the <see cref="M:Tektosyne.Collections.QuadTree`1.Add(Tektosyne.Geometry.PointD,`0)"/> and <see
            cref="M:Tektosyne.Collections.QuadTree`1.Remove(Tektosyne.Geometry.PointD)"/> methods. Accessing this property is therefore an O(1) operation.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> has a fixed size.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.QuadTree`1"/> has a fixed size; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.QuadTree`1.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.QuadTree`1"/> is also read-only, and vice versa.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only; otherwise, <c>false</c>.
            The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.
            </para><para>
            <b>IsReadOnly</b> always returns <c>false</c> since the <see cref="T:Tektosyne.Collections.QuadTree`1"/>
            class does not offer a read-only wrapper.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.QuadTree`1"/> is
            synchronized (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.QuadTree`1"/> is synchronized
            (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.Item(Tektosyne.Geometry.PointD)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set, and <paramref name="key"/> is outside of <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>.
            </exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is read, and <paramref name="key"/> does not exist in the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks>
            This indexer calls <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> to find the <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> for the specified <paramref name="key"/>, but may then
            create one or more child nodes before adding a new element.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</value>
            <remarks>
            <b>Keys</b> returns the keys stored with each attached <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the same order as <see cref="M:Tektosyne.Collections.QuadTree`1.GetEnumerator"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.Nodes">
            <summary>
            Gets a read-only view of the hashtable containing all <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>
            instances that are attached to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> that maps <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Signature"/> values to the corresponding <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> instances.</value>
            <remarks><para>
            <b>Nodes</b> always contains at least one element associated with a <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Signature"/> of zero, which is the permanent <see
            cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/> of the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </para><para>
            <b>Nodes</b> generally contains fewer than <see cref="P:Tektosyne.Collections.QuadTree`1.Count"/> elements since leaf nodes
            may contain up to <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/> key-and-value pairs, or more if they reside on
            <see cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>.
            </para><para>
            <see cref="M:Tektosyne.Collections.QuadTree`1.GetEnumerator"/> and the enumerators of the <see cref="P:Tektosyne.Collections.QuadTree`1.Keys"/> and <see
            cref="P:Tektosyne.Collections.QuadTree`1.Values"/> collections iterate over <b>Nodes</b>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.RootNode">
            <summary>
            The <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that is the root of the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <remarks><para>
            The <b>RootNode</b> is never removed from the <see cref="T:Tektosyne.Collections.QuadTree`1"/>. An empty
            <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains only the <b>RootNode</b>. The <b>RootNode</b> is
            the only node whose <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> collection may be empty when
            it has no descendants.
            </para><para>
            All other nodes are descendants of the <b>RootNode</b>. The chain of <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> references from any other node of the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/> ends in the <b>RootNode</b>, whose <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> property is always a null reference.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>, obtain a
            lock on the <b>SyncRoot</b> object rather than the collection itself. A read-only view
            always returns the same <b>SyncRoot</b> object as the underlying writable collection.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTree`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</value>
            <remarks>
            <b>Values</b> returns the values stored with each attached <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the same order as <see cref="M:Tektosyne.Collections.QuadTree`1.GetEnumerator"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.AddToNode(Tektosyne.Collections.QuadTreeNode{`0},Tektosyne.Geometry.PointD,`0)">
            <summary>
            Adds the specified element to the subtree starting with the specified <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> at the top of the subtree. The containing <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/> of this argument must equal the current instance.
            </param>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <remarks><para>
            <b>AddToNode</b> adds the specified <paramref name="key"/> and <paramref name="value"/>
            to the first <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that has sufficient capacity in the
            subtree starting with the specified <paramref name="node"/>. The subtree is extended
            with new child nodes as needed.
            </para><para>
            <b>AddToNode</b> does not check whether <paramref name="key"/> already exists in the
            <see cref="T:Tektosyne.Collections.QuadTree`1"/>, or whether the <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>
            of <paramref name="node"/> contain <paramref name="key"/>. The caller must ensure that
            these conditions hold.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.CheckTargetArray(System.Array,System.Int32)">
            <summary>
            Checks the bounds of the specified array and the specified starting index against the
            size of the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination for elements copied from
            the <see cref="T:Tektosyne.Collections.QuadTree`1"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the <see cref="T:Tektosyne.Collections.QuadTree`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Add(Tektosyne.Geometry.PointD,`0)">
            <overloads>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</overloads>
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="key"/> is outside of <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks>
            <b>Add</b> calls <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> to find the <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> for the specified <paramref name="key"/>, but may then 
            create one or more child nodes before adding the new element.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Add(System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0})">
            <summary>
            Adds the specified key-and-value pair to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>
            already exists in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>
            is outside of <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.Collections.QuadTree`1.Add(Tektosyne.Geometry.PointD,`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.AddRange(System.Collections.Generic.IDictionary{Tektosyne.Geometry.PointD,`0})">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements to add.</param>
            <exception cref="T:System.ArgumentException"><para>
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> already contains one or more keys in the specified
            <paramref name="dictionary"/>.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains one or more duplicate keys.</para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is outside of <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks>
            <b>AddRange</b> calls <see cref="M:Tektosyne.Collections.QuadTree`1.Add(Tektosyne.Geometry.PointD,`0)"/> for each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> in the specified <paramref name="dictionary"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks><para>
            <b>Clear</b> resets <see cref="P:Tektosyne.Collections.QuadTree`1.Count"/> to zero and removes any other <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> instances attached to the permanent <see
            cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/>. This is an O(1) operation.
            </para><note type="caution">
            Any removed <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> instances are <em>not</em> cleared,
            rendering all their tree structure properties invalid.</note></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</returns>
            <remarks>
            <b>Clone</b> does not necessarily preserve the enumeration order of the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>. The tree structure is preserved, however.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Contains(System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains the specified
            key-and-value pair.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> is found in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> succeeds if <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> finds the <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the specified <paramref name="pair"/>, and
            the resulting <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> also contains its <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.ContainsKey(Tektosyne.Geometry.PointD)">
            <overloads>
            Determines whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains the specified key.
            </overloads>
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains the specified key.
            </summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains an element with the specified
            <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>ContainsKey</b> succeeds if <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> finds a <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the specified <paramref name="key"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.ContainsKey(Tektosyne.Geometry.PointD,Tektosyne.Collections.QuadTreeNode{`0}@)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains the specified key, 
            searching the specified <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> first.</summary>
            <param name="key">
            The key to locate.</param>
            <param name="node"><para>
            An optional <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> to search for <paramref name="key"/>
            before conducting a full tree search.
            </para><para>
            On return, contains the result of <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> for <paramref
            name="key"/>, which may be a null reference.</para></param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains an element with the specified
            <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>ContainsKey</b> succeeds if <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> finds a <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the specified <paramref name="key"/>.
            </para><para>
            If the specified <paramref name="node"/> is a valid leaf node that contains <paramref
            name="key"/>, <b>ContainsKey</b> succeeds without calling <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/>
            and leaves <paramref name="node"/> unchanged. This reduces <b>ContainsKey</b> to an O(1)
            operation.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.ContainsValue(`0)">
            <overloads>
            Determines whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains the specified value.
            </overloads>
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains the specified value.
            </summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains an element with the specified
            <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>ContainsValue</b> succeeds if <see cref="M:Tektosyne.Collections.QuadTree`1.FindNodeByValue(`0)"/> finds a <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the specified <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.ContainsValue(`0,Tektosyne.Collections.QuadTreeNode{`0}@)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains the specified value, 
            searching the specified <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> first.</summary>
            <param name="value">
            The value to locate.</param>
            <param name="node"><para>
            An optional <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> to search for <paramref name="value"/>
            before conducting a full tree search.
            </para><para>
            On return, contains the result of <see cref="M:Tektosyne.Collections.QuadTree`1.FindNodeByValue(`0)"/> for <paramref
            name="value"/>, which may be a null reference.</para></param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.QuadTree`1"/> contains an element with the specified
            <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>ContainsValue</b> succeeds if <see cref="M:Tektosyne.Collections.QuadTree`1.FindNodeByValue(`0)"/> finds a <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the specified <paramref name="value"/>.
            </para><para>
            If the specified <paramref name="node"/> is a valid leaf node that contains <paramref
            name="value"/>, <b>ContainsValue</b> succeeds without calling <see
            cref="M:Tektosyne.Collections.QuadTree`1.FindNodeByValue(`0)"/> and leaves <paramref name="node"/> unchanged. This reduces
            <b>ContainsValue</b> to an O(k) operation, where k is the number of key-and-value pairs
            stored in <paramref name="node"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.QuadTree`1.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all 
            <typeparamref name="TValue"/> values. The <see cref="T:Tektosyne.Geometry.PointD"/> keys are always duplicated
            by a shallow copy.
            </para><para>
            <b>Copy</b> does not necessarily preserve the enumeration order of the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>. The tree structure is preserved, however.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.CopyTo(System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0}[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.QuadTree`1"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>. The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.QuadTree`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>
            <b>CopyTo</b> copies elements using the <see cref="M:Tektosyne.Collections.QuadTree`1.GetEnumerator"/> sequence.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.QuadTree`1"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>. The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.QuadTree`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> cannot be cast automatically to the type of
            the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0}})">
            <summary>
            Determines whether the specified collection contains the same key-and-value pairs as the
            current <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements
            to compare with the current <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.QuadTree`1"/>, and each element compares as equal to
            the element with the same <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.
            </item></list></returns>
            <remarks><para>
            <b>Equals</b> iterates over the specified <paramref name="collection"/> and calls <see
            cref="M:Tektosyne.Collections.QuadTree`1.Contains(System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0})"/> for each element to test the two collections for value equality.
            </para><para>
            <b>Equals</b> does not attempt to compare the enumeration order of both collections as
            the <see cref="T:Tektosyne.Collections.QuadTree`1"/> class does not define a fixed enumeration order.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.FindNode(System.Int32,System.Int32,System.Int32)">
            <overloads>
            Finds a <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> within the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </overloads>
            <summary>
            Finds the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> at the specified level and grid coordinates
            within the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <param name="level">
            The <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/> to search.</param>
            <param name="gridX">
            The <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridX"/> coordinate to locate.</param>
            <param name="gridY">
            The <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridY"/> coordinate to locate.</param>
            <returns>
            The <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> at the specified <paramref name="gridX"/> and
            <paramref name="gridY"/> coordinates on the specified <paramref name="level"/>, if
            valid; otherwise, a null reference.</returns>
            <remarks><para>
            <b>FindNode</b> returns a null reference in the following cases:
            </para><list type="bullet"><item>
            The specified <paramref name="level"/> is less than zero or greater than <see
            cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>.
            </item><item>
            The specified <paramref name="gridX"/> and/or <paramref name="gridY"/> coordinate is
            less than zero, or equal to or greater than the number of grid cells in the
            corresponding dimension at <paramref name="level"/>.
            </item><item>
            All three arguments are valid, but no <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> exists at the
            specified location within the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </item></list><para>
            <b>FindNode</b> combines the specified arguments into the unique <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Signature"/> of the desired <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> which is used retrieve the node from the <see
            cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> hashtable. This is an O(1) operation.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> within the <see cref="T:Tektosyne.Collections.QuadTree`1"/>
            that should contain the specified key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> whose <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>
            contain the specified <paramref name="key"/>, regardless of whether its <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> already contains <paramref name="key"/> as well.
            </para><para>-or-</para><para>
            A null reference if the specified <paramref name="key"/> is outside the <see
            cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/> of the entire <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</para></returns>
            <remarks><para>
            <b>FindNode</b> performs a range search within the <see cref="T:Tektosyne.Collections.QuadTree`1"/> for
            the specified <paramref name="key"/>, starting with the <see cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/>. This is
            usually an O(log m) operation where m is the number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/>.
            </para><para>
            If <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> contains at least 4^<see cref="F:Tektosyne.Collections.QuadTree`1.ProbeLevel"/> elements,
            <b>FindNode</b> first probes a deeper level of the <see cref="T:Tektosyne.Collections.QuadTree`1"/> to
            rapidly approach the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> containing the specified
            <paramref name="key"/>.
            </para><para>
            The probe begins at level log4 m, where m is the number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/>, and
            ascends two levels at a time until we are either above <see cref="F:Tektosyne.Collections.QuadTree`1.ProbeLevel"/> or have
            found a valid <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> at the grid coordinates that contain
            <paramref name="key"/>. <b>FindNode</b> then performs a regular tree search for the
            desired leaf node.
            </para><para>
            The depth probe is derived from a binary depth search algorithm given by Sariel
            Har-Peled in his (as yet) unpublished lecture on 17 March 2010, <em>Quadtrees –
            Hierarchical Grids</em>. This lecture is part of the series <a
            href="http://valis.cs.uiuc.edu/~sariel/teach/notes/aprx/">Approximation Algorithms in
            Geometry</a>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.FindNodeByValue(`0)">
            <summary>
            Finds a <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> within the <see cref="T:Tektosyne.Collections.QuadTree`1"/>
            that contains the specified value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            A <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> whose <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/>
            contains the specified <paramref name="value"/>, if found; otherwise, a null reference.
            </returns>
            <remarks>
            <b>FindNodeByValue</b> iterates over all attached <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>
            instances, using the <see cref="M:Tektosyne.Collections.QuadTree`1.GetEnumerator"/> sequence, until the specified <paramref
            name="value"/> is found. This is an O(n) operation, where n equals <see cref="P:Tektosyne.Collections.QuadTree`1.Count"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.FindRange(Tektosyne.Geometry.PointD,System.Double)">
            <overloads>
            Finds all key-and-value pairs within the <see cref="T:Tektosyne.Collections.QuadTree`1"/> whose keys lie
            within the specified range.</overloads>
            <summary>
            Finds all key-and-value pairs within the <see cref="T:Tektosyne.Collections.QuadTree`1"/> whose keys lie
            within the specified circular range.</summary>
            <param name="center">
            A <see cref="T:Tektosyne.Geometry.PointD"/> indicating the center of the key range to search.</param>
            <param name="radius">
            The radius of the key range around <paramref name="center"/> to search.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all elements whose keys lie within
            <paramref name="radius"/> around <paramref name="center"/>.</returns>
            <remarks><para>
            <b>FindRange</b> immediately returns an empty collection if the square circumscribed
            around the indicated key range does not intersect with <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>. Otherwise,
            <b>FindRange</b> performs a recursive search starting with the <see cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/>.
            </para><para>
            Depending on the size of the specified <paramref name="radius"/> relative to <see
            cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>, the runtime of this operation ranges from O(log m) to O(<see
            cref="P:Tektosyne.Collections.QuadTree`1.Count"/>), where m is the number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.FindRange(Tektosyne.Geometry.RectD)">
            <summary>
            Finds all key-and-value pairs within the <see cref="T:Tektosyne.Collections.QuadTree`1"/> whose keys lie
            within the specified rectangular range.</summary>
            <param name="range">
            A <see cref="T:Tektosyne.Geometry.RectD"/> indicating the key range to search.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all elements whose keys lie within
            the specified <paramref name="range"/>.</returns>
            <remarks><para>
            <b>FindRange</b> immediately returns an empty collection if the specified <paramref
            name="range"/> does not intersect with <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>. Otherwise, <b>FindRange</b>
            performs a recursive search starting with the <see cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/>.
            </para><para>
            Depending on the size of <paramref name="range"/> relative to <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>, the
            runtime of this operation ranges from O(log m) to O(<see cref="P:Tektosyne.Collections.QuadTree`1.Count"/>), where m is the
            number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.QuadTree`1"/>. Each
            enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
            <remarks><para>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> follows the sequence in which the attached <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> instances and their data are stored in hashtables. This
            sequence is essentially unpredictable and does not establish any key ordering.
            </para><para>
            Each iteration step is an O(1) operation when processing leaf nodes, or an O(m)
            operation when skipping over empty internal nodes, where m is the number of <see
            cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.QuadTree`1"/>. Each
            enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Move(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Collections.QuadTreeNode{`0})">
            <summary>
            Moves the specified element to a different key within the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <param name="oldKey">
            The key of the element to move.</param>
            <param name="newKey">
            The new key where to move the element.</param>
            <param name="node">
            An optional <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> to search for <paramref name="oldKey"/>
            before conducting a full tree search. The default is a null reference.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contained <paramref name="oldKey"/>.
            </para><para>-or-</para><para>
            A null reference if that <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> was removed from the <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>.</para></returns>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="oldKey"/> was not found in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </para><para>-or-</para><para>
            <paramref name="newKey"/> already exists in the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </para><para>-or-</para><para>
            <paramref name="node"/> is not a null reference, and its <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/> property differs from this instance.
            </para></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newKey"/> is outside of <see cref="F:Tektosyne.Collections.QuadTree`1.Bounds"/>.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The value associated with <paramref name="oldKey"/> is an <see
            cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from <paramref name="newKey"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks><para>
            <b>Move</b> has the same effect as calling <see cref="M:Tektosyne.Collections.QuadTree`1.Remove(Tektosyne.Geometry.PointD)"/> with the specified
            <paramref name="oldKey"/>, followed by <see cref="M:Tektosyne.Collections.QuadTree`1.Add(Tektosyne.Geometry.PointD,`0)"/> with the specified <paramref
            name="newKey"/>. However, <b>Move</b> introduces two shortcuts to avoid the O(log m)
            tree search performed by each method, where m is the number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/>.
            </para><list type="number"><item>
            If the specified <paramref name="node"/> is a valid leaf node that contains <paramref
            name="oldKey"/>, <b>Move</b> skips the first tree search for <paramref name="oldKey"/>.
            When moving multiple keys in close proximity, always set <paramref name="node"/> to the
            previous <b>Move</b> result.
            </item><item>
            If <paramref name="oldKey"/> and <paramref name="newKey"/> both fall within the <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/> of the same leaf node, <b>Move</b> skips the second
            tree search for <paramref name="newKey"/> and directly adjusts the leaf node’s
            hashtable.
            </item></list><para>
            Either shortcut avoids one O(log m) tree search. When moving nearby keys over a short
            distance, both shortcuts may apply and reduce <b>Move</b> to an O(1) operation.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Remove(Tektosyne.Geometry.PointD)">
            <overloads>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</overloads>
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the associated element was removed;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks><para>
            <b>Remove</b> calls <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> to find the <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the specified <paramref name="key"/>.
            </para><para>
            <b>Remove</b> also removes the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> itself, and possibly
            recursively its chain of <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> nodes, if removing
            the specified <paramref name="key"/> leaves it empty.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.Remove(System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0})">
            <summary>
            Removes the specified key-and-value pair from the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> is read-only.</exception>
            <remarks><para>
            <b>Remove</b> calls <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> to find the <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the specified <paramref name="pair"/>. The element is removed only if
            the key is associated with a matching <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>.
            </para><para>
            <b>Remove</b> also removes the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> itself, and possibly
            recursively its chain of <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> nodes, if removing
            the specified <paramref name="pair"/> leaves it empty.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.ToArray">
            <summary>
            Copies the key-and-value pairs of the <see cref="T:Tektosyne.Collections.QuadTree`1"/> to a new <see
            cref="T:System.Array"/>.</summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements of the <see cref="T:Tektosyne.Collections.QuadTree`1"/>.
            </returns>
            <remarks>
            <b>ToArray</b> has the same effect as <see cref="M:Tektosyne.Collections.QuadTree`1.CopyTo(System.Collections.Generic.KeyValuePair{Tektosyne.Geometry.PointD,`0}[],System.Int32)"/> with a starting index of
            zero, but also allocates the target array.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTree`1.TryGetValue(Tektosyne.Geometry.PointD,`0@)">
            <summary>
            Gets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>TryGetValue</b> calls <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> to find the <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the specified <paramref name="key"/>.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.QuadTree`1.ProbeStatus">
            <summary>
            Contains the status of the last depth probe conducted by <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/>.
            </summary>
            <remarks>
            <see cref="M:Tektosyne.Collections.QuadTree`1.FindNode(Tektosyne.Geometry.PointD)"/> stores all level-specific data of the last depth probe,
            and reuses that data until the estimated starting level changes. This happens only when
            the number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> changes by at least 256 elements, since depth probes
            are not conducted above tree level 4.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.ProbeStatus.GridHeight">
            <summary>
            The height of one grid cell at the recorded <see cref="F:Tektosyne.Collections.QuadTree`1.ProbeStatus.Level"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.ProbeStatus.GridWidth">
            <summary>
            The width of one grid cell at the recorded <see cref="F:Tektosyne.Collections.QuadTree`1.ProbeStatus.Level"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.ProbeStatus.Level">
            <summary>
            The starting level for the recorded <see cref="F:Tektosyne.Collections.QuadTree`1.ProbeStatus.NodeCount"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTree`1.ProbeStatus.NodeCount">
            <summary>
            The number of <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> at the last depth probe, right-shifted by 8 bits.
            </summary>
        </member>
        <member name="T:Tektosyne.Collections.QuadTreeNode`1">
            <summary>
            Provides a generic tree node within a <see cref="T:Tektosyne.Collections.QuadTree`1"/>.</summary>
            <typeparam name="TValue">
            The type of the values that are associated with each <see cref="T:Tektosyne.Geometry.PointD"/> key. If
            <typeparamref name="TValue"/> is a reference type, the value may be null references.
            </typeparam>
            <remarks><para>
            <b>QuadTreeNode</b> represents a collection of key-and-value pairs within a <see
            cref="T:Tektosyne.Collections.QuadTree`1"/>. This collection and all references to related <b>QuadTreeNode</b>
            instances within the tree structure are exposed as read-only properties.
            </para><para>
            <b>QuadTreeNode</b> was inspired by the <c>QuadtreeNode</c> class by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.236ff.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.#ctor(Tektosyne.Collections.QuadTree{`0},System.Int32,Tektosyne.Collections.QuadTreeNode{`0},Tektosyne.Geometry.RectD)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> class.</summary>
            <param name="tree">
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> that contains the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.
            </param>
            <param name="signature">
            The signature of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</param>
            <param name="parent">
            The parent of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.</param>
            <param name="bounds">
            The bounds of all keys in the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tree"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bounds"/> contains a <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectD.Height"/> that is equal to or less than zero.</exception>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1._bottomLeft">
            <summary>
            The bottom left child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1._bottomRight">
            <summary>
            The bottom right child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1._topLeft">
            <summary>
            The top left child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1._topRight">
            <summary>
            The top right child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1._data">
            <summary>
            The key-and-value pairs stored in the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft">
            <summary>
            Gets the bottom left child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree
            structure.</summary>
            <value>
            The bottom left child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>, if any. The default is
            a null reference.</value>
            <remarks><para>
            <b>BottomLeft</b> returns the child node that covers the <see cref="P:Tektosyne.Geometry.RectD.BottomLeft"/>
            quadrant of the current <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>.
            </para><para>
            The chains of <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <b>BottomLeft</b>, <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/>, and <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> references determine the structure of the
            containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight">
            <summary>
            Gets the bottom right child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree
            structure.</summary>
            <value>
            The bottom right child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>, if any. The default is
            a null reference.</value>
            <remarks><para>
            <b>BottomRight</b> returns the child node that covers the <see cref="P:Tektosyne.Geometry.RectD.BottomRight"/>
            quadrant of the current <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>.
            </para><para>
            The chains of <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, 
            <b>BottomRight</b>, and <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> references determine the structure of the
            containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1.Bounds">
            <summary>
            The bounds of all keys in the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
            <remarks><para>
            <b>Bounds</b> holds a <see cref="T:Tektosyne.Geometry.RectD"/> indicating the subrange of the containing <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/> that is covered by the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> and its
            children. <b>Bounds</b> always has a positive <see cref="F:Tektosyne.Geometry.RectD.Width"/> and <see
            cref="F:Tektosyne.Geometry.RectD.Height"/>. The two dimensions are not necessarily equal.
            </para><para>
            Any <see cref="P:Tektosyne.Collections.DictionaryEx`2.Keys"/> stored in the associated <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> collection lie within <b>Bounds</b>. The extreme <see cref="P:Tektosyne.Geometry.RectD.Right"/>
            and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> coordinates are considered part of the neighboring <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> on that side, if there is one.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1.Center">
            <summary>
            The center of the <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/> of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.
            </summary>
            <remarks>
            <b>Center</b> divides the associated <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/> into four equal-sized
            quadrants, corresponding to the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, and <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/> child nodes. <b>Center</b> is
            precomputed to speed up the traversal of the tree structure.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.Data">
            <summary>
            Gets a read-only view of the key-and-value pairs stored in the <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
            <value><para>
            A read-only <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> containing any key-and-value
            pairs stored in the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> if <see cref="P:Tektosyne.Collections.QuadTreeNode`1.IsLeaf"/> is
            <c>true</c>.
            </para><para>-or-</para><para>
            A null reference if <see cref="P:Tektosyne.Collections.QuadTreeNode`1.IsLeaf"/> is <c>false</c>.</para></value>
            <remarks><para>
            <b>Data</b> usually contains up to <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/> elements when
            not a null reference. If <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/> equals <see
            cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>, the number of elements is unbounded.
            </para><para>
            <b>Data</b> returns a read-only view of the <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            Use the containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/> to add, change, or remove keys and values.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.GridX">
            <summary>
            Gets the x-coordinate of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
            <value>
            The x-coordinate of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> within the grid of its <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>, ranging from zero to 2^<see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>.</value>
            <remarks>
            <b>GridX</b> returns the middle 14 bits of <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Signature"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.GridY">
            <summary>
            Gets the y-coordinate of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
            <value>
            The y-coordinate of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> within the grid of its <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>, ranging from zero to 2^<see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>.</value>
            <remarks>
            <b>GridY</b> returns the highest 14 bits of <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Signature"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.HasCapacity">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> has any remaining
            <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> capacity. </summary>
            <value>
            <c>true</c> if <see cref="P:Tektosyne.Collections.QuadTreeNode`1.IsLeaf"/> is <c>true</c> and the number of elements in the
            <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> collection is less than <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/>;
            otherwise, <c>false</c>.</value>
            <remarks>
            <b>HasCapacity</b> does not check whether <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/> equals <see
            cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>, in which case the number of <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/>
            elements may exceed <see cref="F:Tektosyne.Collections.QuadTree`1.Capacity"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> is a leaf node.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> is a leaf node; <c>false</c> if it
            is an internal node. The default is <c>true</c>.</value>
            <remarks><para>
            <b>IsLeaf</b> is <c>true</c> if <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> is a valid collection. In that case,
            the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, and <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/> properties are all null references.
            </para><para>
            <b>IsLeaf</b> is <c>false</c> if <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> is a null reference. In that case,
            at least one of the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, and <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/> properties is a valid child node.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.Level">
            <summary>
            Gets the level of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
            <value>
            The level of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the containing <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>, ranging from zero to <see cref="F:Tektosyne.Collections.QuadTree`1.MaxLevel"/>.</value>
            <remarks>
            <b>Level</b> returns the lowest 4 bits of <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Signature"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1.Parent">
            <summary>
            The parent of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.</summary>
            <remarks><para>
            <b>Parent</b> never holds a null reference, except on the permanent <see
            cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/> of the containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>.
            </para><para>
            The chains of <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>,
            <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/>, and <b>Parent</b> references determine the structure of the
            containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1.Signature">
            <summary>
            The signature of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
            <remarks><para>
            <b>Signature</b> holds an <see cref="T:System.Int32"/> value containing a bitwise combination of
            the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridX"/>, and <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridY"/> values.
            </para><para>
            <b>Signature</b> uniquely identifies the position of each <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>, and also serves as
            its key within the <see cref="P:Tektosyne.Collections.QuadTree`1.Nodes"/> hashtable.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft">
            <summary>
            Gets the top left child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree structure.
            </summary>
            <value>
            The top left child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>, if any. The default is a
            null reference.</value>
            <remarks><para>
            <b>TopLeft</b> returns the child node that covers the <see cref="P:Tektosyne.Geometry.RectD.TopLeft"/>
            quadrant of the current <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>.
            </para><para>
            The chains of <b>TopLeft</b>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/>, and <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> references determine the structure of the
            containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.QuadTreeNode`1.TopRight">
            <summary>
            Gets the top right child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> in the tree
            structure.</summary>
            <value>
            The top right child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>, if any. The default is a
            null reference.</value>
            <remarks><para>
            <b>TopRight</b> returns the child node that covers the <see cref="P:Tektosyne.Geometry.RectD.TopRight"/>
            quadrant of the current <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>.
            </para><para>
            The chains of <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <b>TopRight</b>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/>, and <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> references determine the structure of the
            containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Collections.QuadTreeNode`1.Tree">
            <summary>
            The <see cref="T:Tektosyne.Collections.QuadTree`1"/> that contains the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.
            </summary>
            <remarks>
            <b>Tree</b> never holds a null reference.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.Clear">
            <summary>
            Clears the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
            <remarks><para>
            <b>Clear</b> resets the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, and <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/> properties to null references, and
            <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> to an empty <see cref="T:Tektosyne.Collections.DictionaryEx`2"/>.
            </para><para>
            <b>Clear</b> does not clear any previously attached child nodes, or transfer their <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/>. Call this method only on the <see cref="F:Tektosyne.Collections.QuadTree`1.RootNode"/> of
            the containing <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Tree"/> to destroy the entire tree structure.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.FindChild(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the child node of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the
            specified key.</summary>
            <param name="key">
            The key to locate. This argument must lie within <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>.</param>
            <returns>
            The child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains <paramref
            name="key"/>, or a null reference if the child does not yet exist.</returns>
            <remarks>
            <b>FindChild</b> compares the specified <paramref name="key"/> to the <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Center"/> point to determine the containing quadrant.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.FindOrCreateChild(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the child node of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains the
            specified key, creating the child node if necessary.</summary>
            <param name="key">
            The key to locate. This argument must lie within <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>.</param>
            <returns>
            The child of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that contains <paramref
            name="key"/>. The child is created if it does not yet exist.</returns>
            <remarks>
            <b>FindOrCreateChild</b> compares the specified <paramref name="key"/> to the <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Center"/> point to determine the containing quadrant.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.FindRange(Tektosyne.Geometry.RectD@,System.Boolean,System.Collections.Generic.Dictionary{Tektosyne.Geometry.PointD,`0})">
            <summary>
            Finds all key-and-value pairs within the specified key range that are stored in the <see
            cref="T:Tektosyne.Collections.QuadTreeNode`1"/> or its child nodes.</summary>
            <param name="range">
            A <see cref="T:Tektosyne.Geometry.RectD"/> indicating the key range to search. This argument must intersect
            with <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/>, and it must be a square if <paramref name="useCircle"/> is
            <c>true</c>.</param>
            <param name="useCircle">
            <c>true</c> to search only the circle inscribed within <paramref name="range"/>;
            <c>false</c> to search the entire <paramref name="range"/>.</param>
            <param name="output">
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> to which any elements are added whose key
            lies within the specified <paramref name="range"/>.</param>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.RemoveChild(Tektosyne.Collections.QuadTreeNode{`0})">
            <summary>
            Removes the specified child node from the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
            <param name="child">
            The value of the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopLeft"/>, <see cref="P:Tektosyne.Collections.QuadTreeNode`1.TopRight"/>, <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomLeft"/>, or <see cref="P:Tektosyne.Collections.QuadTreeNode`1.BottomRight"/> property.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="child"/> does not equal one of the four child nodes.</exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="child"/> is a null reference.</exception>
            <remarks>
            <b>RemoveChild</b> recursively removes the current instance from its <see
            cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> if the specified <paramref name="child"/> was its last valid child. If
            <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Parent"/> is a null reference, <b>RemoveChild</b> recreates an empty <see
            cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> collection instead.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.Split">
            <summary>
            Splits the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> into child nodes.</summary>
            <remarks>
            <b>Split</b> transfers all <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> of the current instance to newly created
            children. Children that would receive no <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Data"/> are not created.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QuadTreeNode`1.CreateChild(System.Int32,System.Int32)">
            <summary>
            Creates the indicated child node of the <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/>.</summary>
            <param name="deltaX">
            The offset for the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridX"/> coordinate on the next <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>. This
            value must be zero or one.</param>
            <param name="deltaY">
            The offset for the <see cref="P:Tektosyne.Collections.QuadTreeNode`1.GridY"/> coordinate on the next <see cref="P:Tektosyne.Collections.QuadTreeNode`1.Level"/>. This
            value must be zero or one.</param>
            <returns>
            A new <see cref="T:Tektosyne.Collections.QuadTreeNode`1"/> that is the child of the current instance and
            has the indicated <see cref="F:Tektosyne.Collections.QuadTreeNode`1.Bounds"/> and grid coordinates.</returns>
        </member>
        <member name="T:Tektosyne.Collections.QueueEx`1">
            <summary>
            Provides a generic first-in, first-out (FIFO) collection of items.</summary>
            <typeparam name="T">
            The type of all items in the queue. If <typeparamref name="T"/> is a reference type, items
            may be null references.</typeparam>
            <remarks><para>
            <b>QueueEx</b> is identical with the standard class <see cref="T:System.Collections.Generic.Queue`1"/> from which it
            derives, except for a few extra features:
            </para><list type="bullet"><item>
            <see cref="P:Tektosyne.Collections.QueueEx`1.SyncRoot"/> is available as a public property, rather than an explicit
            <see cref="T:System.Collections.ICollection"/> implementation.
            </item><item>
            <see cref="M:Tektosyne.Collections.QueueEx`1.Clone"/> creates a shallow copy of the queue, using the <see
            cref="M:Tektosyne.Collections.QueueEx`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> constructor that takes a collection argument.
            </item><item>
            <see cref="M:Tektosyne.Collections.QueueEx`1.Copy"/> creates a deep copy of the queue by invoking <see
            cref="M:System.ICloneable.Clone"/> on each <typeparamref name="T"/> element. This feature requires
            that all copied elements implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="M:Tektosyne.Collections.QueueEx`1.Equals(System.Collections.ICollection)"/> compares two collections with identical element types for
            value equality of all elements. The collections compare as equal if they contain the same
            elements in the same order.</item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QueueEx`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QueueEx`1"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QueueEx`1"/> class that is empty and has
            the default initial capacity.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Queue`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QueueEx`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QueueEx`1"/> class that contains elements
            copied from the specified collection and has sufficient capacity to accommodate the
            number of elements copied.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QueueEx`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.QueueEx`1"/> class that is empty and has
            the specified initial capacity.</summary>
            <param name="capacity">
            The initial number of elements that the new <see cref="T:Tektosyne.Collections.QueueEx`1"/> can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.QueueEx`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.QueueEx`1"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.QueueEx`1"/>.
            </value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.Queue.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.QueueEx`1"/>, obtain a lock
            on the <b>SyncRoot</b> object rather than the collection itself. A read-only view always
            returns the same <b>SyncRoot</b> object as the underlying writable collection.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.QueueEx`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.QueueEx`1"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.QueueEx`1"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.QueueEx`1.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.QueueEx`1"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.QueueEx`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="T"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.QueueEx`1.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.QueueEx`1"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all <typeparamref
            name="T"/> elements.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.QueueEx`1.Equals(System.Collections.ICollection)">
            <summary>
            Determines whether the specified collection contains the same elements in the same order
            as the current <see cref="T:Tektosyne.Collections.QueueEx`1"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.ICollection"/> to compare with the current <see cref="T:Tektosyne.Collections.QueueEx`1"/>.
            </param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.QueueEx`1"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.QueueEx`1"/>, and all elements compare as equal when
            retrieved in the enumeration sequence for each collection.</item></list></returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqualUntyped(System.Collections.ICollection,System.Collections.ICollection)"/> to test the
            two collections for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Collections.SortedDictionaryEx`2">
            <summary>
            Provides a generic collection of keys and values that are sorted and accessible by key.
            </summary>
            <typeparam name="TKey">
            The type of all keys in the collection. Keys cannot be null references.</typeparam>
            <typeparam name="TValue">
            The type of all values that are associated with the keys. If <typeparamref name="TValue"/>
            is a reference type, values may be null references.</typeparam>
            <remarks><para>
            <b>SortedDictionaryEx</b> provides a <see cref="T:System.Collections.Generic.SortedDictionary`2"/>, which is
            a red-black binary search tree, with a few extra features:
            </para><list type="bullet"><item>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of any <typeparamref name="TValue"/> that
            implements the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface is automatically checked against
            the associated dictionary key when a key or value is changed or inserted.
            </item><item>
            <see cref="M:Tektosyne.Collections.SortedDictionaryEx`2.AsReadOnly"/> returns a read-only wrapper that
            has the same public type as the original collection. Attempting to modify the collection
            through such a read-only view will raise a <see cref="T:System.NotSupportedException"/>.
            </item><item>
            <see cref="M:Tektosyne.Collections.SortedDictionaryEx`2.Copy"/> creates a deep copy of the collection by
            invoking <see cref="M:System.ICloneable.Clone"/> on each value. This feature requires that all copied
            values implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="F:Tektosyne.Collections.SortedDictionaryEx`2.Empty"/> returns an immutable empty collection
            that is cached for repeated access.
            </item><item>
            <see cref="M:Tektosyne.Collections.SortedDictionaryEx`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})"/> compares two collections with
            identical element types for value equality of all elements. The collections compare as equal
            if they contain the same elements in the same order.
            </item></list><para>
            Moreover, several properties and methods that the standard class provides as explicit
            interface implementations have been elevated to public visibility.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> class
            that is empty and uses the default comparer for <typeparamref name="TKey"/>.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> class
            that is empty and uses the specified comparer for <typeparamref name="TKey"/>.</summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing keys, or a null reference to use
            the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> class
            that contains elements copied from the specified collection and uses the default
            comparer for <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})"/>
            for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> class
            that contains elements copied from the specified collection and uses the specified
            comparer for <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing keys, or a null reference to use
            the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.#ctor(Tektosyne.Collections.SortedDictionaryEx{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> class
            that is a read-only view of the specified instance.</summary>
            <param name="dictionary">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> collection that provides the initial
            value for the <see cref="F:Tektosyne.Collections.SortedDictionaryEx`2.InnerDictionary"/> field.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.SortedDictionaryEx`2.IsReadOnly"/> property. This argument must be
            <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="dictionary"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.SortedDictionaryEx`2.InnerDictionary">
            <summary>
            The <see cref="T:System.Collections.Generic.SortedDictionary`2"/> collection that holds the <typeparamref
            name="TKey"/> keys and <typeparamref name="TValue"/> values of the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.SortedDictionaryEx`2.ReadOnlyFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.SortedDictionaryEx`2.IsReadOnly"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.SortedDictionaryEx`2.ReadOnlyWrapper">
            <summary>
            The read-only <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> collection that is returned
            by the <see cref="M:Tektosyne.Collections.SortedDictionaryEx`2.AsReadOnly"/> method.</summary>
        </member>
        <member name="F:Tektosyne.Collections.SortedDictionaryEx`2.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> that is used to determine the relative order of
            keys in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> instance that is used to order keys.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedDictionary`2.Comparer"/> for details.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            The number of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements contained in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedDictionary`2.Count"/> for details.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> has a
            fixed size.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.SortedDictionaryEx`2.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is also read-only,
            and vice versa.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is
            read-only.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is synchronized (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is read, and <paramref name="key"/> does not exist in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is
            read-only.</exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedDictionary`2.Item(`0)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>. When the property is
            set, this argument must be compatible with <typeparamref name="TValue"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><para>
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.
            </para><para>-or-</para><para>
            The property is set to a value that is not compatible with <typeparamref
            name="TValue"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is
            read-only.</exception>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection"/> containing the
            keys in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedDictionary`2.Keys"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.ICollection"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            An object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>, obtain a lock on the <b>SyncRoot</b> object rather than the collection
            itself. A read-only view always returns the same <b>SyncRoot</b> object as the
            underlying writable collection.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection"/> containing the
            values in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedDictionary`2.Values"/> for details.
            </remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <value>
            A read-only <see cref="T:System.Collections.ICollection"/> containing the values in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</value>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Add(`0,`1)">
            <overloads>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </overloads>
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </summary>
            <param name="key">
            The key of the element to add. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <param name="value">
            The value of the element to add. This argument must be compatible with <typeparamref
            name="TValue"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><para>
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.
            </para><para>-or-</para><para>
            <paramref name="value"/> is not compatible with <typeparamref name="TValue"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified key-and-value pair to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>
            already exists in the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>. </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements to add.</param>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> already contains one or more keys in
            the specified <paramref name="dictionary"/>.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains one or more duplicate keys.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.Clear"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</returns>
            <remarks>
            <b>Clone</b> does not preserve the values of the <see cref="P:Tektosyne.Collections.SortedDictionaryEx`2.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.SortedDictionaryEx`2.IsReadOnly"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> contains the
            specified key-and-value pair.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> is found in the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> contains the
            specified key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate. This argument must be compatible with <typeparamref name="TKey"/>.
            </param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> contains the
            specified value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> contains an element
            with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.SortedDictionaryEx`2.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> by invoking <see cref="M:System.ICloneable.Clone"/> on 
            all <typeparamref name="TValue"/> values. The <typeparamref name="TKey"/> keys are
            always duplicated by a shallow copy.
            </para><para>
            <b>Copy</b> does not preserve the values of the <see cref="P:Tektosyne.Collections.SortedDictionaryEx`2.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.SortedDictionaryEx`2.IsReadOnly"/> properties.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> to a one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>. The <b>Array</b> must have zero-based
            indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is
            greater than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> to a one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>. The <b>Array</b> must have zero-based
            indexing.</param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is
            greater than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Determines whether the specified collection contains the same key-and-value pairs in the
            same order as the current <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements to
            compare with the current <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>, and all elements
            compare as equal when retrieved in the enumeration sequence for each collection.
            </item></list></returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})"/> to test the two
            collections for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.GetEnumerator">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator"/> that can iterate
            through the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <returns>
            A <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator"/> for the entire <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>. Each enumerated item is a <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>. Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the entire <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>. Each enumerated item is a <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>. Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Remove(`0)">
            <overloads>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.
            </overloads>
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the associated element was removed;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <param name="key">
            The key of the element to remove. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified key-and-value pair from the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.ToArray">
            <summary>
            Copies the key-and-value pairs of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/> to
            a new <see cref="T:System.Array"/>.</summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements of the <see cref="T:Tektosyne.Collections.SortedDictionaryEx`2"/>.</returns>
            <remarks>
            <b>ToArray</b> has the same effect as <see cref="M:Tektosyne.Collections.SortedDictionaryEx`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"/> with a starting index of
            zero, but also allocates the target array.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedDictionaryEx`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)"/> for details.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.SortedListEx`2">
            <summary>
            Provides a generic collection of keys and values that are sorted and accessible by key.
            </summary>
            <typeparam name="TKey">
            The type of all keys in the collection. Keys cannot be null references.</typeparam>
            <typeparam name="TValue">
            The type of all values that are associated with the keys. If <typeparamref name="TValue"/>
            is a reference type, values may be null references.</typeparam>
            <remarks><para>
            <b>SortedListEx</b> provides a <see cref="T:System.Collections.Generic.SortedList`2"/> with a few extra
            features:
            </para><list type="bullet"><item>
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> property of any <typeparamref name="TValue"/> that
            implements the <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> interface is automatically checked against
            the associated dictionary key when a key or value is changed or inserted.
            </item><item>
            <see cref="M:Tektosyne.Collections.SortedListEx`2.AsReadOnly"/> returns a read-only wrapper that has the
            same public type as the original collection. Attempting to modify the collection through
            such a read-only view will raise a <see cref="T:System.NotSupportedException"/>.
            </item><item>
            <see cref="M:Tektosyne.Collections.SortedListEx`2.Copy"/> creates a deep copy of the collection by
            invoking <see cref="M:System.ICloneable.Clone"/> on each value. This feature requires that all copied
            values implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="F:Tektosyne.Collections.SortedListEx`2.Empty"/> returns an immutable empty collection that is
            cached for repeated access.
            </item><item>
            <see cref="M:Tektosyne.Collections.SortedListEx`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})"/> compares two collections with identical
            element types for value equality of all elements. The collections compare as equal if they
            contain the same elements in the same order.
            </item><item>
            <see cref="M:Tektosyne.Collections.SortedListEx`2.GetByIndex(System.Int32)"/>, <see cref="M:Tektosyne.Collections.SortedListEx`2.GetKey(System.Int32)"/>, and <see cref="M:Tektosyne.Collections.SortedListEx`2.SetByIndex(System.Int32,`1)"/> are adopted from
            the non-generic <see cref="T:System.Collections.SortedList"/> class.
            </item></list><para>
            Moreover, several properties and methods that the standard class provides as explicit
            interface implementations have been elevated to public visibility.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class that is
            empty, has the default initial capacity, and uses the default comparer for <typeparamref
            name="TKey"/>.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class that is
            empty, has the default initial capacity, and uses the specified comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing keys, or a null reference to use
            the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class that
            contains elements copied from the specified collection and uses the default comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class that
            contains elements copied from the specified collection and uses the specified comparer
            for <typeparamref name="TKey"/>.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
            collection.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing keys, or a null reference to use
            the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class that is
            empty, has the specified initial capacity, and uses the default comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is
            initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class that is
            empty, has the specified initial capacity, and uses the specified comparer for
            <typeparamref name="TKey"/>.</summary>
            <param name="capacity">
            The number of elements that the new <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is
            initially capable of storing.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use when comparing keys, or a null reference to use
            the default <see cref="T:System.Collections.Generic.Comparer`1"/> for <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})"/> for
            details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.#ctor(Tektosyne.Collections.SortedListEx{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> class that is
            a read-only view of the specified instance.</summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.SortedList`2"/> collection that provides the initial value
            for the <see cref="F:Tektosyne.Collections.SortedListEx`2.InnerDictionary"/> field.</param>
            <param name="readOnly">
            The initial value for the <see cref="P:Tektosyne.Collections.SortedListEx`2.IsReadOnly"/> property. This argument must be
            <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="readOnly"/> is <c>false</c>.</exception>
            <remarks>
            This constructor is used to create a read-only wrapper around an existing collection.
            The new instance shares the data of the specified <paramref name="dictionary"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Collections.SortedListEx`2.InnerDictionary">
            <summary>
            The <see cref="T:System.Collections.Generic.SortedList`2"/> collection that holds the <typeparamref
            name="TKey"/> keys and <typeparamref name="TValue"/> values of the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.Collections.SortedListEx`2.ReadOnlyFlag">
            <summary>
            Backs the <see cref="P:Tektosyne.Collections.SortedListEx`2.IsReadOnly"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Collections.SortedListEx`2.ReadOnlyWrapper">
            <summary>
            The read-only <see cref="T:Tektosyne.Collections.SortedListEx`2"/> collection that is returned by
            the <see cref="M:Tektosyne.Collections.SortedListEx`2.AsReadOnly"/> method.</summary>
        </member>
        <member name="F:Tektosyne.Collections.SortedListEx`2.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <remarks>
            Attempting to modify the <b>Empty</b> collection will raise a <see
            cref="T:System.NotSupportedException"/>. The collection has zero capacity and is guaranteed to
            never change, as there are no writable references to the collection.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <value>
            The number of elements that the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> can contain.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a value that is less than <see cref="P:Tektosyne.Collections.SortedListEx`2.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.
            </exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Capacity"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> that is used to determine the relative order of
            keys in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <value>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> instance that is used to order keys.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Comparer"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <value>
            The number of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements contained in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Count"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> has a fixed
            size.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> has a fixed size; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.
            </para><para>
            This property always returns the same value as the <see cref="P:Tektosyne.Collections.SortedListEx`2.IsReadOnly"/> property
            since any fixed-size <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is also read-only, and
            vice versa.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is
            read-only.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>
            is synchronized (thread-safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is synchronized
            (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.
            </para><para>
            This property is provided for backwards compatibility only, as none of the
            <b>Tektosyne.Collections</b> classes support synchronized wrappers.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The property is set to an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> differs from the specified <paramref
            name="key"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is read, and <paramref name="key"/> does not exist in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.
            </exception>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Item(`0)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get or set. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <value><para>
            The value associated with the specified <paramref name="key"/>. When the property is
            set, this argument must be compatible with <typeparamref name="TValue"/>.
            </para><para>
            If <paramref name="key"/> is not found, attempting to get it throws a <see
            cref="T:System.Collections.Generic.KeyNotFoundException"/>, and attempting to set it adds a new element with the
            specified key and value to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</para></value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><para>
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.
            </para><para>-or-</para><para>
            The property is set to a value that is not compatible with <typeparamref
            name="TValue"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, and the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.
            </exception>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.IList`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Keys"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.ICollection"/> containing the keys in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>, obtain a lock on the <b>SyncRoot</b> object rather than the collection
            itself. A read-only view always returns the same <b>SyncRoot</b> object as the
            underlying writable collection.</para></remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.IList`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
            <remarks>
            Please refer to <see cref="P:System.Collections.Generic.SortedList`2.Values"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
        </member>
        <member name="P:Tektosyne.Collections.SortedListEx`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <value>
            A read-only <see cref="T:System.Collections.ICollection"/> containing the values in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</value>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Add(`0,`1)">
            <overloads>
            Adds the specified element to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</overloads>
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <param name="key">
            The key of the element to add.</param>
            <param name="value">
            The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from <paramref name="key"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the specified key and value to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <param name="key">
            The key of the element to add. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <param name="value">
            The value of the element to add. This argument must be compatible with <typeparamref
            name="TValue"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> already exists in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><para>
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.
            </para><para>-or-</para><para>
            <paramref name="value"/> is not compatible with <typeparamref name="TValue"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified key-and-value pair to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to add.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/>
            already exists in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>. </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements to add.</param>
            <exception cref="T:System.ArgumentNullException"><para>
            <paramref name="dictionary"/> is a null reference.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is a null reference. </para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="dictionary"/> contains an element whose <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> already contains one or more keys in the
            specified <paramref name="dictionary"/>.
            </para><para>-or-</para><para>
            <paramref name="dictionary"/> contains one or more duplicate keys.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original collection may still change,
            and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.Clear"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</returns>
            <remarks>
            <b>Clone</b> does not preserve the values of the <see cref="P:Tektosyne.Collections.SortedListEx`2.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.SortedListEx`2.IsReadOnly"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> contains the specified
            key-and-value pair.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to locate.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> is found in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> contains the specified
            key.</summary>
            <param name="key">
            The key to locate. This argument must be compatible with <typeparamref name="TKey"/>.
            </param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> contains an element with the
            specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> contains the specified
            value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> contains an element with the
            specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="TValue"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks><para>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.SortedListEx`2.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all 
            <typeparamref name="TValue"/> values. The <typeparamref name="TKey"/> keys are always
            duplicated by a shallow copy.
            </para><para>
            <b>Copy</b> does not preserve the values of the <see cref="P:Tektosyne.Collections.SortedListEx`2.IsFixedSize"/> and <see
            cref="P:Tektosyne.Collections.SortedListEx`2.IsReadOnly"/> properties.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.SortedListEx`2"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Tektosyne.Collections.SortedListEx`2"/> to a one-dimensional <see
            cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>. The <b>Array</b> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref
            name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Equals(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Determines whether the specified collection contains the same key-and-value pairs in the
            same order as the current <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> elements to
            compare with the current <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.SortedListEx`2"/>, and all elements compare as
            equal when retrieved in the enumeration sequence for each collection.
            </item></list></returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})"/> to test the two
            collections for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.GetByIndex(System.Int32)">
            <summary>
            Gets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to get.</param>
            <returns>
            The value at the specified <paramref name="index"/> in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.SortedListEx`2.Count"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the entire <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.SortedListEx`2"/>. Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            Each enumerated item is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.GetKey(System.Int32)">
            <summary>
            Gets the key at the specified index.</summary>
            <param name="index">
            The zero-based index of the key to get.</param>
            <returns>
            The key at the specified <paramref name="index"/> in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.SortedListEx`2.Count"/>.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified key.</summary>
            <param name="key">
            The key to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="key"/> in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.IndexOfValue(`1)">
            <summary>
            Returns the zero-based index of first occurrence of the specified value.</summary>
            <param name="value">
            The value to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/> in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>, if found; otherwise, -1.</returns>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)"/> for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Remove(`0)">
            <overloads>
            Removes the specified element from the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </overloads>
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <param name="key">
            The key of the element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found and the associated element was removed;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <param name="key">
            The key of the element to remove. This argument must be compatible with <typeparamref
            name="TKey"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> is not compatible with <typeparamref name="TKey"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified key-and-value pair from the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <param name="pair">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> element to remove.</param>
            <returns>
            <c>true</c> if <paramref name="pair"/> was found and removed; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component of <paramref name="pair"/> is
            a null reference.</exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> component of <paramref name="pair"/>
            is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/>
            differs from the associated <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> component.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</summary>
            <param name="index">
            The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.SortedListEx`2.Count"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.SetByIndex(System.Int32,`1)">
            <summary>
            Sets the value at the specified index.</summary>
            <param name="index">
            The zero-based index of the value to set.</param>
            <param name="value">
            The value to store at the specified <paramref name="index"/> in the <see
            cref="T:Tektosyne.Collections.SortedListEx`2"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than <see cref="P:Tektosyne.Collections.SortedListEx`2.Count"/>.</para></exception>
            <exception cref="T:Tektosyne.Collections.KeyMismatchException">
            <paramref name="value"/> is an <see cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance whose <see
            cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> differs from the key at the specified <paramref
            name="index"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.
            </para><para>
            <b>SetByIndex</b> must perform a key search since the generic <see
            cref="T:System.Collections.Generic.SortedList`2"/> class does not provide direct write access by
            positional indexing. Unlike the non-generic equivalent, this method is therefore
            <em>less</em> efficient than using the key indexer.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.ToArray">
            <summary>
            Copies the key-and-value pairs of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/> to a new
            <see cref="T:System.Array"/>.</summary>
            <returns>
            A one-dimensional <see cref="T:System.Array"/> containing copies of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements of the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.</returns>
            <remarks>
            <b>ToArray</b> has the same effect as <see cref="M:Tektosyne.Collections.SortedListEx`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)"/> with a starting index of
            zero, but also allocates the target array.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Tektosyne.Collections.SortedListEx`2"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Collections.SortedListEx`2"/> is read-only.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.TrimExcess"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.SortedListEx`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.</summary>
            <param name="key">
            The key whose value to get.</param>
            <param name="value">
            The value associated with the first occurrence of <paramref name="key"/>, if found;
            otherwise, the default value for <typeparamref name="TValue"/>.</param>
            <returns>
            <c>true</c> if <paramref name="key"/> was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)"/> for details.
            </remarks>
        </member>
        <member name="T:Tektosyne.Collections.Sorting">
            <summary>
            Provides sorting algorithms for <see cref="T:System.Collections.Generic.IList`1"/> collections.</summary>
            <remarks><para>
            <b>Sorting</b> provides a variety of standard sorting algorithms that operate on any <see
            cref="T:System.Collections.Generic.IList`1"/> collection. The implementations are based on Robert Sedgewick, "Algorithms
            in Java" (3rd ed.), Addison-Wesley 2003.
            </para><para>
            All <b>Sorting</b> algorithms return immediately if the specified collection contains less
            than two elements. The relatively complex algorithms <see cref="M:Tektosyne.Collections.Sorting.HeapSort``1(System.Collections.Generic.IList{``0})"/>, <see
            cref="M:Tektosyne.Collections.Sorting.QuickSort``1(System.Collections.Generic.IList{``0})"/>, and <see cref="M:Tektosyne.Collections.Sorting.BestQuickSort``1(System.Collections.Generic.IList{``0})"/> also defer collections
            with exactly two elements to the <see cref="M:Tektosyne.Collections.CollectionsUtility.ConditionalSwap``1(System.Collections.Generic.IList{``0},System.Comparison{``0},System.Int32,System.Int32)"/> method,
            and use an optimal algorithm for collections with exactly three elements.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.BinarySearchCore``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})">
            <summary>
            Searches the specified sorted <see cref="T:System.Collections.Generic.IList`1"/> collection for the specified
            element, using the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The sorted <see cref="T:System.Collections.Generic.IList`1"/> collection to search.</param>
            <param name="value">
            The element to locate. This argument may be a null reference if <typeparamref name="T"/>
            is a reference type.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order.</param>
            <returns>
            The zero-based index of <paramref name="value"/> in <paramref name="list"/>, if found;
            otherwise, a negative number that is the bitwise complement of the index of the first
            element larger than <paramref name="value"/>, if any; otherwise, the bitwise complement
            of the <see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="list"/>.</returns>
            <remarks>
            <b>BinarySearchCore</b> implements the binary search algorithm used by the <see
            cref="M:Tektosyne.Collections.Sorting.BinarySearch``1(System.Collections.Generic.IList{``0},``0)"/> and <see cref="M:Tektosyne.Collections.Sorting.BestBinarySearch``1(System.Collections.Generic.IList{``0},``0)"/> methods.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.HeapSortSink``1(System.Collections.Generic.IList{``0},System.Comparison{``0},System.Int32,System.Int32)">
            <summary>
            Fixes a heap for <see cref="M:Tektosyne.Collections.Sorting.HeapSort``1(System.Collections.Generic.IList{``0})"/> by sinking the specified element in the
            specified <see cref="T:System.Collections.Generic.IList`1"/> collection.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order.</param>
            <param name="k">
            The one-based index of the <paramref name="list"/> element to sink.</param>
            <param name="n">
            The greatest one-based index in <paramref name="list"/> to compare against.</param>
            <remarks>
            <see cref="M:Tektosyne.Collections.Sorting.HeapSort``1(System.Collections.Generic.IList{``0})"/> internally uses one-based indices which must be adjusted to
            zero-based indices whenever <paramref name="list"/> elements are retrieved.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.QuickSortRange``1(System.Collections.Generic.IList{``0},System.Comparison{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the specified subrange of the specified <see cref="T:System.Collections.Generic.IList`1"/> collection, using
            the Quicksort algorithm and the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order.</param>
            <param name="l">
            The zero-based index of the first <paramref name="list"/> element to sort.</param>
            <param name="r">
            The zero-based index of the last <paramref name="list"/> element to sort.</param>
            <remarks>
            <b>QuickSortRange</b> implements partitioning and recursive partition sorting for <see
            cref="M:Tektosyne.Collections.Sorting.QuickSort``1(System.Collections.Generic.IList{``0})"/>. The range between the specified <paramref name="l"/> and
            <paramref name="r"/> indices must contain at least two elements, although our
            implementation ensures that the range contains at least four elements.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.TripleSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0},System.Int32)">
            <summary>
            Sorts three elements in the specified <see cref="T:System.Collections.Generic.IList`1"/> collection, starting at the
            specified index and using the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order.</param>
            <param name="i">
            The zero-based index of the first <paramref name="list"/> element to sort.</param>
            <remarks>
            <b>TripleSort</b> sorts the three <paramref name="list"/> elements starting at index
            position <paramref name="i"/> using two or at most three comparisons. This method is
            also called by <see cref="M:Tektosyne.Collections.Sorting.QuickSortRange``1(System.Collections.Generic.IList{``0},System.Comparison{``0},System.Int32,System.Int32)"/> for subranges of exactly three elements.
            </remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <overloads>
            Searches the specified sorted <see cref="T:System.Collections.Generic.IList`1"/> collection for the specified
            element.</overloads>
            <summary>
            Searches the specified sorted <see cref="T:System.Collections.Generic.IList`1"/> collection for the specified
            element.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The sorted <see cref="T:System.Collections.Generic.IList`1"/> collection to search.</param>
            <param name="value">
            The element to locate. This argument may be a null reference if <typeparamref name="T"/>
            is a reference type.</param>
            <returns>
            The zero-based index of <paramref name="value"/> in <paramref name="list"/>, if found;
            otherwise, a negative number that is the bitwise complement of the index of the first
            element larger than <paramref name="value"/>, if any; otherwise, the bitwise complement
            of the <see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="list"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            This method calls the <see cref="M:Tektosyne.Collections.Sorting.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})"/> overload
            that also takes a <see cref="T:System.Comparison`1"/> argument, specifying a null reference for
            the second argument. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})">
            <summary>
            Searches the specified sorted <see cref="T:System.Collections.Generic.IList`1"/> collection for the specified
            element, using the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The sorted <see cref="T:System.Collections.Generic.IList`1"/> collection to search.</param>
            <param name="value">
            The element to locate. This argument may be a null reference if <typeparamref name="T"/>
            is a reference type.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order. This argument may
            be a null reference.</param>
            <returns>
            The zero-based index of <paramref name="value"/> in <paramref name="list"/>, if found;
            otherwise, a negative number that is the bitwise complement of the index of the first
            element larger than <paramref name="value"/>, if any; otherwise, the bitwise complement
            of the <see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="list"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks><para>
            <b>BinarySearch</b> searches the specified <paramref name="list"/> using a binary search
            algorithm. To obtain correct results, <paramref name="list"/> must be sorted according
            to <paramref name="comparison"/>.
            </para><para>
            If <paramref name="comparison"/> is a null reference, <b>BinarySearch</b> uses the <see
            cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/> method provided by the <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            comparer for the specified type <typeparamref name="T"/> instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.BestBinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <overloads>
            Searches the specified sorted <see cref="T:System.Collections.Generic.IList`1"/> collection for the specified
            element, using the best binary search algorithm available for its concrete type.
            </overloads>
            <summary>
            Searches the specified sorted <see cref="T:System.Collections.Generic.IList`1"/> collection for the specified
            element, using the best binary search algorithm available for its concrete type.
            </summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The sorted <see cref="T:System.Collections.Generic.IList`1"/> collection to search.</param>
            <param name="value">
            The element to locate. This argument may be a null reference if <typeparamref name="T"/>
            is a reference type.</param>
            <returns>
            The zero-based index of <paramref name="value"/> in <paramref name="list"/>, if found;
            otherwise, a negative number that is the bitwise complement of the index of the first
            element larger than <paramref name="value"/>, if any; otherwise, the bitwise complement
            of the <see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="list"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            This method calls the <see cref="M:Tektosyne.Collections.Sorting.BestBinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})"/>
            overload that also takes a <see cref="T:System.Comparison`1"/> argument, specifying a null
            reference for the second argument. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.BestBinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})">
            <summary>
            Searches the specified sorted <see cref="T:System.Collections.Generic.IList`1"/> collection for the specified
            element, using the specified <see cref="T:System.Comparison`1"/> method and the best binary
            search algorithm available for its concrete type.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The sorted <see cref="T:System.Collections.Generic.IList`1"/> collection to search.</param>
            <param name="value">
            The element to locate. This argument may be a null reference if <typeparamref name="T"/>
            is a reference type.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order. This argument may
            be a null reference.</param>
            <returns>
            The zero-based index of <paramref name="value"/> in <paramref name="list"/>, if found;
            otherwise, a negative number that is the bitwise complement of the index of the first
            element larger than <paramref name="value"/>, if any; otherwise, the bitwise complement
            of the <see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="list"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks><para>
            <b>BinarySearch</b> searches the specified <paramref name="list"/> using a binary search
            algorithm. To obtain correct results, <paramref name="list"/> must be sorted according
            to <paramref name="comparison"/>.
            </para><para>
            <b>BestBinarySearch</b> selects the fastest binary search algorithm that is available
            for the concrete type of the specified <paramref name="list"/>, as follows:
            </para><list type="number"><item>
            If <paramref name="list"/> is an <see cref="T:System.Array"/>, use the <see
            cref="M:System.Array.BinarySearch``1(``0[],``0)"/> method of the <see cref="T:System.Array"/> class.
            </item><item>
            If <paramref name="list"/> is a standard <see cref="T:System.Collections.Generic.List`1"/>, use the <see
            cref="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/> method of the <see cref="T:System.Collections.Generic.List`1"/> class.
            </item><item>
            If <paramref name="list"/> is a <see cref="T:Tektosyne.Collections.ListEx`1"/>, use the <see
            cref="M:Tektosyne.Collections.ListEx`1.BinarySearch(`0)"/> method of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class.
            </item><item>
            Otherwise, use the <see cref="M:Tektosyne.Collections.Sorting.BinarySearch``1(System.Collections.Generic.IList{``0},``0)"/> method.
            </item></list><para>
            If <paramref name="comparison"/> is a null reference, <b>BestBinarySearch</b> uses the
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/> method provided by the <see
            cref="P:System.Collections.Generic.Comparer`1.Default"/> comparer for the specified type <typeparamref name="T"/>
            instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.HeapSort``1(System.Collections.Generic.IList{``0})">
            <overloads>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Heapsort algorithm.
            </overloads>
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Heapsort algorithm.
            </summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            This method calls the <see cref="M:Tektosyne.Collections.Sorting.HeapSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})"/> overload that
            also takes a <see cref="T:System.Comparison`1"/> argument, specifying a null reference for the
            second argument. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.HeapSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Heapsort algorithm and
            the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order. This argument may
            be a null reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks><para>
            <b>HeapSort</b> sorts the specified <paramref name="list"/> using the Heapsort
            algorithm. Like the Quicksort algorithm provided by the <see cref="T:System.Collections.Generic.List`1"/> class,
            this is an unstable algorithm. That is, the relative order of any two elements for which
            the specified <paramref name="comparison"/> returns zero may change randomly.
            </para><para>
            If <paramref name="comparison"/> is a null reference, <b>HeapSort</b> uses the <see
            cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/> method provided by the <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            comparer for the specified type <typeparamref name="T"/> instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.InsertionSort``1(System.Collections.Generic.IList{``0})">
            <overloads>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the insertion sort
            algorithm.</overloads>
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the insertion sort
            algorithm.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            This method calls the <see cref="M:Tektosyne.Collections.Sorting.InsertionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})"/> overload
            that also takes a <see cref="T:System.Comparison`1"/> argument, specifying a null reference for
            the second argument. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.InsertionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the insertion sort algorithm
            and the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order. This argument may
            be a null reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks><para>
            <b>InsertionSort</b> sorts the specified <paramref name="list"/> using the insertion
            sort algorithm. Unlike the Quicksort algorithm provided by the <see cref="T:System.Collections.Generic.List`1"/>
            class, this is a stable algorithm. That is, the relative order of any two elements for
            which the specified <paramref name="comparison"/> returns zero remains unchanged.
            </para><para>
            If <paramref name="comparison"/> is a null reference, <b>InsertionSort</b> uses the <see
            cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/> method provided by the <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            comparer for the specified type <typeparamref name="T"/> instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.QuickSort``1(System.Collections.Generic.IList{``0})">
            <overloads>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Quicksort algorithm.
            </overloads>
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Quicksort algorithm.
            </summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            This method calls the <see cref="M:Tektosyne.Collections.Sorting.QuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})"/> overload that
            also takes a <see cref="T:System.Comparison`1"/> argument, specifying a null reference for the
            second argument. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.QuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Quicksort algorithm and
            the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order. This argument may
            be a null reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks><para>
            <b>QuickSort</b> sorts the specified <paramref name="list"/> using the Quicksort
            algorithm. This algorithm is unstable; that is, the relative order of any two elements
            for which the specified <paramref name="comparison"/> returns zero may change randomly.
            </para><para>
            The standard library already provides a Quicksort algorithm, but only for <see
            cref="T:System.Collections.Generic.List`1"/> and <see cref="T:System.Array"/> instances, whereas <b>QuickSort</b> can operate
            on arbitrary <see cref="T:System.Collections.Generic.IList`1"/> collections.
            </para><para>
            If <paramref name="comparison"/> is a null reference, <b>QuickSort</b> uses the <see
            cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/> method provided by the <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            comparer for the specified type <typeparamref name="T"/> instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.BestQuickSort``1(System.Collections.Generic.IList{``0})">
            <overloads>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the best Quicksort algorithm
            available for its concrete type.</overloads>
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the best Quicksort algorithm
            available for its concrete type.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            This method calls the <see cref="M:Tektosyne.Collections.Sorting.BestQuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})"/> overload
            that also takes a <see cref="T:System.Comparison`1"/> argument, specifying a null reference for
            the second argument. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.BestQuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection, using the specified <see
            cref="T:System.Comparison`1"/> method and the best Quicksort algorithm available for its
            concrete type.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order. This argument may
            be a null reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks><para>
            <b>BestQuickSort</b> sorts the specified <paramref name="list"/> using the Quicksort
            algorithm. This algorithm is unstable; that is, the relative order of any two elements
            for which the specified <paramref name="comparison"/> returns zero may change randomly.
            </para><para>
            <b>BestQuickSort</b> selects the fastest Quicksort algorithm that is available for the
            concrete type of the specified <paramref name="list"/>, as follows:
            </para><list type="number"><item>
            If <paramref name="list"/> is an <see cref="T:System.Array"/>, use the <see
            cref="M:System.Array.Sort``1(``0[])"/> method of the <see cref="T:System.Array"/> class.
            </item><item>
            If <paramref name="list"/> is a standard <see cref="T:System.Collections.Generic.List`1"/>, use the <see
            cref="M:System.Collections.Generic.List`1.Sort"/> method of the <see cref="T:System.Collections.Generic.List`1"/> class.
            </item><item>
            If <paramref name="list"/> is a <see cref="T:Tektosyne.Collections.ListEx`1"/>, use the <see
            cref="M:Tektosyne.Collections.ListEx`1.Sort"/> method of the <see cref="T:Tektosyne.Collections.ListEx`1"/> class.
            </item><item>
            Otherwise, use the <see cref="M:Tektosyne.Collections.Sorting.QuickSort``1(System.Collections.Generic.IList{``0})"/> method.
            </item></list><para>
            If <paramref name="comparison"/> is a null reference, <b>BestQuickSort</b> uses the <see
            cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/> method provided by the <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            comparer for the specified type <typeparamref name="T"/> instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.ShellSort``1(System.Collections.Generic.IList{``0})">
            <overloads>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Shellsort algorithm.
            </overloads>
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Shellsort algorithm.
            </summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks>
            This method calls the <see cref="M:Tektosyne.Collections.Sorting.ShellSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})"/> overload that
            also takes a <see cref="T:System.Comparison`1"/> argument, specifying a null reference for the
            second argument. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.Sorting.ShellSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the specified <see cref="T:System.Collections.Generic.IList`1"/> collection using the Shellsort algorithm and
            the specified <see cref="T:System.Comparison`1"/> method.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> collection to sort.</param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> method that defines the sorting order. This argument may
            be a null reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is a null reference.</exception>
            <remarks><para>
            <b>ShellSort</b> sorts the specified <paramref name="list"/> using the Shellsort
            algorithm. Unlike the Quicksort algorithm provided by the <see cref="T:System.Collections.Generic.List`1"/> class,
            this is a stable algorithm. That is, the relative order of any two elements for which
            the specified <paramref name="comparison"/> returns zero remains unchanged.
            </para><para>
            If <paramref name="comparison"/> is a null reference, <b>ShellSort</b> uses the <see
            cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/> method provided by the <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            comparer for the specified type <typeparamref name="T"/> instead.</para></remarks>
        </member>
        <member name="T:Tektosyne.Collections.StackEx`1">
            <summary>
            Provides a generic last-in, first-out (LIFO) collection of items.</summary>
            <typeparam name="T">
            The type of all items in the stack. If <typeparamref name="T"/> is a reference type, items
            may be null references.</typeparam>
            <remarks><para>
            <b>StackEx</b> is identical with the standard class <see cref="T:System.Collections.Generic.Stack`1"/> from which it
            derives, except for a few extra features:
            </para><list type="bullet"><item>
            <see cref="P:Tektosyne.Collections.StackEx`1.SyncRoot"/> is available as a public property, rather than an explicit
            <see cref="T:System.Collections.ICollection"/> implementation.
            </item><item>
            <see cref="M:Tektosyne.Collections.StackEx`1.Clone"/> creates a shallow copy of the stack, using the <see
            cref="M:Tektosyne.Collections.StackEx`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> constructor that takes a collection argument.
            </item><item>
            <see cref="M:Tektosyne.Collections.StackEx`1.Copy"/> creates a deep copy of the stack by invoking <see
            cref="M:System.ICloneable.Clone"/> on each <typeparamref name="T"/> element. This feature requires
            that all copied elements implement the <see cref="T:System.ICloneable"/> interface.
            </item><item>
            <see cref="M:Tektosyne.Collections.StackEx`1.Equals(System.Collections.ICollection)"/> and <see cref="M:Tektosyne.Collections.StackEx`1.EqualsReverse(System.Collections.ICollection)"/> compare two
            collections with identical element types for value equality of all elements. The collections
            compare as equal if they contain the same elements in the same or in reverse order, 
            respectively.</item></list></remarks>
        </member>
        <member name="M:Tektosyne.Collections.StackEx`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.StackEx`1"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.StackEx`1"/> class that is empty and has
            the default initial capacity.</summary>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Stack`1.#ctor"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.StackEx`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.StackEx`1"/> class that contains elements
            copied from the specified collection and has sufficient capacity to accommodate the
            number of elements copied.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements are copied to the new
            collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.StackEx`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Collections.StackEx`1"/> class that is empty and has
            the specified initial capacity.</summary>
            <param name="capacity">
            The initial number of elements that the new <see cref="T:Tektosyne.Collections.StackEx`1"/> can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:Tektosyne.Collections.StackEx`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.StackEx`1"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tektosyne.Collections.StackEx`1"/>.
            </value>
            <remarks><para>
            Please refer to <see cref="P:System.Collections.Stack.SyncRoot"/> for details.
            </para><para>
            When synchronizing multi-threaded access to the <see cref="T:Tektosyne.Collections.StackEx`1"/>, obtain a lock
            on the <b>SyncRoot</b> object rather than the collection itself. A read-only view always
            returns the same <b>SyncRoot</b> object as the underlying writable collection.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Collections.StackEx`1.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Collections.StackEx`1"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Collections.StackEx`1"/>.</returns>
        </member>
        <member name="M:Tektosyne.Collections.StackEx`1.Copy">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Collections.StackEx`1"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Collections.StackEx`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <typeparamref name="T"/> does not implement <see cref="T:System.ICloneable"/>.</exception>
            <remarks>
            <b>Copy</b> is similar to <see cref="M:Tektosyne.Collections.StackEx`1.Clone"/> but creates a deep copy the <see
            cref="T:Tektosyne.Collections.StackEx`1"/> by invoking <see cref="M:System.ICloneable.Clone"/> on all <typeparamref
            name="T"/> elements.</remarks>
        </member>
        <member name="M:Tektosyne.Collections.StackEx`1.Equals(System.Collections.ICollection)">
            <summary>
            Determines whether the specified collection contains the same elements in the same order
            as the current <see cref="T:Tektosyne.Collections.StackEx`1"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.ICollection"/> to compare with the current <see cref="T:Tektosyne.Collections.StackEx`1"/>.
            </param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is another reference to this <see cref="T:Tektosyne.Collections.StackEx`1"/>.
            </item><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.StackEx`1"/>, and all elements compare as equal when
            retrieved in the enumeration sequence for each collection.</item></list></returns>
            <remarks><para>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqualUntyped(System.Collections.ICollection,System.Collections.ICollection)"/> to test the
            two collections for value equality.
            </para><note type="implementnotes">
            <para>The <see cref="T:Tektosyne.Collections.StackEx`1"/> is a last-in, first-out (LIFO) collection, which
            means that its enumeration sequence is reversed compared to a first-in, first-out (FIFO)
            collection that contains the same elements in the same original insertion order.
            </para><para>
            When comparing to a non-LIFO collection, you must first reverse its element order, or
            that of the <see cref="T:Tektosyne.Collections.StackEx`1"/>, for a successful comparison. Use the alternative
            method <see cref="M:Tektosyne.Collections.StackEx`1.EqualsReverse(System.Collections.ICollection)"/> to automatically perform this inversion.
            </para></note></remarks>
        </member>
        <member name="M:Tektosyne.Collections.StackEx`1.EqualsReverse(System.Collections.ICollection)">
            <summary>
            Determines whether the specified collection contains the same elements in the reverse
            order as the current <see cref="T:Tektosyne.Collections.StackEx`1"/>.</summary>
            <param name="collection">
            The <see cref="T:System.Collections.ICollection"/> to compare with the current <see cref="T:Tektosyne.Collections.StackEx`1"/>.
            </param>
            <returns><para>
            <c>true</c> under the following conditions, otherwise <c>false</c>:
            </para><list type="bullet"><item>
            <paramref name="collection"/> is not a null reference, contains the same number of
            elements as this <see cref="T:Tektosyne.Collections.StackEx`1"/>, and all elements compare as equal when
            retrieved in the original enumeration sequence for the <paramref name="collection"/>,
            and in the reverse enumeration sequence for this <see cref="T:Tektosyne.Collections.StackEx`1"/>.
            </item></list></returns>
            <remarks><para>
            <b>Equals</b> calls <see cref="M:Tektosyne.Collections.CollectionsUtility.SequenceEqualUntyped(System.Collections.ICollection,System.Collections.ICollection)"/> to test the
            two collections for value equality.
            </para><note type="implementnotes">
            <para>The <see cref="T:Tektosyne.Collections.StackEx`1"/> is a last-in, first-out (LIFO) collection, which
            means that its enumeration sequence is reversed compared to a first-in, first-out (FIFO)
            collection that contains the same elements in the same original insertion order.
            </para><para>
            When comparing to a non-LIFO collection, you must first reverse its element order, or
            that of the <see cref="T:Tektosyne.Collections.StackEx`1"/>, for a successful comparison. <b>EqualsReverse</b>
            automatically performs this inversion. Use the alternative method <see cref="M:Tektosyne.Collections.StackEx`1.Equals(System.Collections.ICollection)"/>
            when comparing to another LIFO collection.</para></note></remarks>
        </member>
        <member name="T:Tektosyne.DetailException">
            <summary>
            Represents errors that occur during application execution, providing additional information
            on technical details.</summary>
            <remarks><para>
            <b>DetailException</b> extends the <see cref="T:System.Exception"/> class with an additional <see
            cref="P:Tektosyne.DetailException.Detail"/> property that holds technical details about the error.
            </para><para>
            The <b>Detail</b> property is intended to fill the gap between the standard <see
            cref="P:System.Exception.Message"/> text, which is usually very brief and unspecific, and the full
            <see cref="M:System.Exception.ToString"/> representation of the exception, which is usually extremely
            lengthy and hard to read.</para></remarks>
        </member>
        <member name="M:Tektosyne.DetailException.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.DetailException"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.DetailException"/> class with default
            properties.</summary>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.DetailException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.DetailException.Detail"/></term>
            <description>An empty string.</description>
            </item><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>A system-supplied localized description.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.DetailException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.DetailException"/> class with the specified
            error message.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.DetailException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.DetailException.Detail"/></term>
            <description>An empty string.</description>
            </item><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The specified <paramref name="message"/>.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.DetailException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.DetailException"/> class with the specified
            error message and with the previous exception that is the cause of this <see
            cref="T:Tektosyne.DetailException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current <see
            cref="T:Tektosyne.DetailException"/>.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.DetailException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.DetailException.Detail"/></term>
            <description>The value of the <see cref="P:System.Exception.Message"/> property of the specified
            <paramref name="innerException"/>.</description>
            </item><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The specified <paramref name="innerException"/>.</description>
            </item><item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The specified <paramref name="message"/>.</description>
            </item></list><para>
            The constructor calls <see cref="M:Tektosyne.Xml.XmlUtility.GetXmlMessage(System.Exception)"/> to retrieve the value of
            the <see cref="P:System.Exception.Message"/> property of the specified <paramref
            name="innerException"/>. This means that a localized error location statement will be
            prepended to the new value of the <see cref="P:Tektosyne.DetailException.Detail"/> property if <paramref
            name="innerException"/> is an object of type <see cref="T:System.Xml.XmlException"/> or
            <see cref="T:System.Xml.Schema.XmlSchemaException"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.DetailException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.DetailException"/> class with the specified
            error message and technical details.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="details">
            A message that provides technical details about the exception.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.DetailException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.DetailException.Detail"/></term>
            <description>The specified <paramref name="details"/>.</description>
            </item><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The specified <paramref name="message"/>.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.DetailException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.DetailException"/> class with the specified
            error message and technical details, and with the previous exception that is the cause
            of this <see cref="T:Tektosyne.DetailException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="details">
            A message that provides technical details about the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current <see
            cref="T:Tektosyne.DetailException"/>.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.DetailException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.DetailException.Detail"/></term>
            <description>The specified <paramref name="details"/>.</description>
            </item><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The specified <paramref name="innerException"/>.</description>
            </item><item>
            <term><see cref="P:System.Exception.Message"/></term>
            <description>The specified <paramref name="message"/>.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.DetailException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.DetailException"/> class with serialized
            data.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object providing serialized object data for the <see
            cref="T:Tektosyne.DetailException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for
            details.
            </para><para>
            The value of the <see cref="P:Tektosyne.DetailException.Detail"/> property is deserialized from an additional field,
            named "Detail".</para></remarks>
        </member>
        <member name="P:Tektosyne.DetailException.Detail">
            <summary>
            Gets technical details about the exception.</summary>
            <value>
            A <see cref="T:System.String"/> containing technical details about the <see
            cref="T:Tektosyne.DetailException"/>. The default is an empty string.</value>
            <remarks>
            <b>Detail</b> returns an empty string when set to a null reference during construction.
            </remarks>
        </member>
        <member name="M:Tektosyne.DetailException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the data needed to serialize the
            exception.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that receives the serialized object data of
            the <see cref="T:Tektosyne.DetailException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for details.
            </para><para>
            The value of the <see cref="P:Tektosyne.DetailException.Detail"/> property is serialized to an additional field,
            named "Detail".</para></remarks>
        </member>
        <member name="T:Tektosyne.EventArgs`1">
            <summary>
            Provides an event argument that contains a single arbitrary value.</summary>
            <typeparam name="T">
            The type of the <see cref="F:Tektosyne.EventArgs`1.Value"/> transmitted by the event.</typeparam>
            <remarks>
            <b>EventArgs</b> extends the standard <see cref="T:System.EventArgs"/> class to allow the
            transmission of a single arbitrary value when an event is raised.</remarks>
        </member>
        <member name="M:Tektosyne.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.EventArgs`1"/> class with the specified
            value.</summary>
            <param name="value">
            The <typeparamref name="T"/> object transmitted by the event.</param>
        </member>
        <member name="F:Tektosyne.EventArgs`1.Value">
            <summary>
            The <typeparamref name="T"/> object transmitted by the event.</summary>
        </member>
        <member name="M:Tektosyne.EventArgs`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.EventArgs`1"/> object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            instance type <typeparamref name="T"/> and of the <see cref="F:Tektosyne.EventArgs`1.Value"/> property.
            </returns>
        </member>
        <member name="T:Tektosyne.Fortran">
            <summary>
            Provides functions defined by the Fortran 90 standard.</summary>
            <remarks>
            <b>Fortran</b> supplements the anemic standard <see cref="T:System.Math"/> class with methods
            that mimic selected Fortran 90 functions. All methods provide several overloads for
            different numeric types to avoid type casting.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.AInt(System.Decimal)">
            <overloads>
            Returns the number nearest the specified value, rounded towards zero.</overloads>
            <summary>
            Returns the whole <see cref="T:System.Decimal"/> number nearest the specified value, rounded
            towards zero.</summary>
            <param name="n">
            A <see cref="T:System.Decimal"/> number to round.</param>
            <returns>
            The whole <see cref="T:System.Decimal"/> number nearest <paramref name="n"/> whose absolute value
            is less than or equal to <paramref name="n"/>.</returns>
            <remarks>
            <b>AInt</b> effectively removes all fractional digits from the specified number, as if
            it was cast to an integer type.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.AInt(System.Double)">
            <summary>
            Returns the whole <see cref="T:System.Double"/> number nearest the specified value, rounded
            towards zero.</summary>
            <param name="n">
            A <see cref="T:System.Double"/> number to round.</param>
            <returns>
            The whole <see cref="T:System.Double"/> number nearest <paramref name="n"/> whose absolute value
            is less than or equal to <paramref name="n"/>.</returns>
            <remarks>
            <b>AInt</b> effectively removes all fractional digits from the specified number, as if
            it was cast to an integer type.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.AInt(System.Single)">
            <summary>
            Returns the whole <see cref="T:System.Single"/> number nearest the specified value, rounded
            towards zero.</summary>
            <param name="n">
            A <see cref="T:System.Single"/> number to round.</param>
            <returns>
            The whole <see cref="T:System.Single"/> number nearest <paramref name="n"/> whose absolute value
            is less than or equal to <paramref name="n"/>.</returns>
            <remarks>
            <b>AInt</b> effectively removes all fractional digits from the specified number, as if
            it was cast to an integer type.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.ANInt(System.Decimal)">
            <overloads>
            Returns the number nearest the specified value, using standard rounding.</overloads>
            <summary>
            Returns the whole <see cref="T:System.Decimal"/> number nearest the specified value, using
            standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Decimal"/> number to round.</param>
            <returns>
            The whole <see cref="T:System.Decimal"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>ANInt</b> uses standard rounding, as specified by <see
            cref="F:System.MidpointRounding.AwayFromZero"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.ANInt(System.Double)">
            <summary>
            Returns the whole <see cref="T:System.Double"/> number nearest the specified value, using
            standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Double"/> number to round.</param>
            <returns>
            The whole <see cref="T:System.Double"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>ANInt</b> uses standard rounding, as specified by <see
            cref="F:System.MidpointRounding.AwayFromZero"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.ANInt(System.Single)">
            <summary>
            Returns the whole <see cref="T:System.Single"/> number nearest the specified value, using
            standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Single"/> number to round.</param>
            <returns>
            The whole <see cref="T:System.Single"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>ANInt</b> uses standard rounding, as specified by <see
            cref="F:System.MidpointRounding.AwayFromZero"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.ANInt(System.Decimal,System.Int32)">
            <summary>
            Returns the <see cref="T:System.Decimal"/> number with the specified precision nearest the
            specified value, using standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Decimal"/> number to round.</param>
            <param name="digits">
            The number of significant fractional digits (precision) in the return value.</param>
            <returns>
            The <see cref="T:System.Decimal"/> number nearest <paramref name="n"/> with a precision equal to
            <paramref name="digits"/>.</returns>
            <remarks><para>
            The <paramref name="digits"/> parameter specifies the number of significant fractional
            digits in the return value. If <paramref name="digits"/> is zero, a whole number is
            returned.
            </para><para>
            <b>ANInt</b> uses standard rounding, as specified by <see
            cref="F:System.MidpointRounding.AwayFromZero"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Fortran.ANInt(System.Double,System.Int32)">
            <summary>
            Returns the <see cref="T:System.Double"/> number with the specified precision nearest the
            specified value, using standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Double"/> number to round.</param>
            <param name="digits">
            The number of significant fractional digits (precision) in the return value.</param>
            <returns>
            The <see cref="T:System.Double"/> number nearest <paramref name="n"/> with a precision equal to
            <paramref name="digits"/>.</returns>
            <remarks><para>
            The <paramref name="digits"/> parameter specifies the number of significant fractional
            digits in the return value. If <paramref name="digits"/> is zero, a whole number is
            returned.
            </para><para>
            <b>ANInt</b> uses standard rounding, as specified by <see
            cref="F:System.MidpointRounding.AwayFromZero"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Fortran.ANInt(System.Single,System.Int32)">
            <summary>
            Returns the <see cref="T:System.Single"/> number with the specified precision nearest the
            specified value, using standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Single"/> number to round.</param>
            <param name="digits">
            The number of significant fractional digits (precision) in the return value.</param>
            <returns>
            The <see cref="T:System.Single"/> number nearest <paramref name="n"/> with a precision equal to
            <paramref name="digits"/>.</returns>
            <remarks><para>
            The <paramref name="digits"/> parameter specifies the number of significant fractional
            digits in the return value. If <paramref name="digits"/> is zero, a whole number is
            returned.
            </para><para>
            <b>ANInt</b> uses standard rounding, as specified by <see
            cref="F:System.MidpointRounding.AwayFromZero"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Ceiling(System.Decimal)">
            <overloads>
            Returns the <see cref="T:System.Int32"/> number nearest the specified value, rounded towards
            positive infinity.</overloads>
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Decimal"/>
            value, rounded towards positive infinity.</summary>
            <param name="n">
            A <see cref="T:System.Decimal"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>Ceiling</b> is identical to <see cref="M:System.Decimal.Ceiling(System.Decimal)"/>, except that it returns an
            <see cref="T:System.Int32"/> number.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Ceiling(System.Double)">
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Double"/> value,
            rounded towards positive infinity.</summary>
            <param name="n">
            A <see cref="T:System.Double"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>Ceiling</b> is identical to <see cref="M:System.Math.Ceiling(System.Decimal)"/>, except that it returns an
            <see cref="T:System.Int32"/> number.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Ceiling(System.Single)">
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Single"/> value,
            rounded towards positive infinity.</summary>
            <param name="n">
            A <see cref="T:System.Single"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>Ceiling</b> is identical to <see cref="M:System.Math.Ceiling(System.Decimal)"/>, except that it returns an
            <see cref="T:System.Int32"/> number.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Floor(System.Decimal)">
            <overloads>
            Returns the <see cref="T:System.Int32"/> number nearest the specified value, rounded towards
            negative infinity.</overloads>
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Decimal"/>
            value, rounded towards negative infinity.</summary>
            <param name="n">
            A <see cref="T:System.Decimal"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>Floor</b> is identical to <see cref="M:System.Math.Floor(System.Decimal)"/>, except that it returns an <see
            cref="T:System.Int32"/> number.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Floor(System.Double)">
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Double"/> value,
            rounded towards negative infinity.</summary>
            <param name="n">
            A <see cref="T:System.Double"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>Floor</b> is identical to <see cref="M:System.Math.Floor(System.Decimal)"/>, except that it returns an <see
            cref="T:System.Int32"/> number.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Floor(System.Single)">
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Single"/> value,
            rounded towards negative infinity.</summary>
            <param name="n">
            A <see cref="T:System.Single"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>Floor</b> is identical to <see cref="M:System.Math.Floor(System.Decimal)"/>, except that it returns an <see
            cref="T:System.Int32"/> number.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Max(System.Decimal[])">
            <overloads>
            Returns the largest of the specified <see cref="T:System.Array"/> of numbers.</overloads>
            <summary>
            Returns the largest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Decimal"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Decimal"/> numbers to compare with each other.
            </param>
            <returns>
            The largest <see cref="T:System.Decimal"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Max</b> returns <see cref="F:System.Decimal.MinValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Max(System.Double[])">
            <summary>
            Returns the largest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Double"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Double"/> numbers to compare with each other.
            </param>
            <returns>
            The largest <see cref="T:System.Double"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Max</b> returns <see cref="F:System.Double.MinValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Max(System.Single[])">
            <summary>
            Returns the largest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Single"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Single"/> numbers to compare with each other.
            </param>
            <returns>
            The largest <see cref="T:System.Single"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Max</b> returns <see cref="F:System.Single.MinValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Max(System.Int16[])">
            <summary>
            Returns the largest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int16"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int16"/> numbers to compare with each other.
            </param>
            <returns>
            The largest <see cref="T:System.Int16"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Max</b> returns <see cref="F:System.Int16.MinValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Max(System.Int32[])">
            <summary>
            Returns the largest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int32"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int32"/> numbers to compare with each other.
            </param>
            <returns>
            The largest <see cref="T:System.Int32"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Max</b> returns <see cref="F:System.Int32.MinValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Max(System.Int64[])">
            <summary>
            Returns the largest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int64"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int64"/> numbers to compare with each other.
            </param>
            <returns>
            The largest <see cref="T:System.Int64"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Max</b> returns <see cref="F:System.Int64.MinValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Min(System.Decimal[])">
            <overloads>
            Returns the smallest of the specified <see cref="T:System.Array"/> of numbers.</overloads>
            <summary>
            Returns the smallest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Decimal"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Decimal"/> numbers to compare with each other.
            </param>
            <returns>
            The smallest <see cref="T:System.Decimal"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Min</b> returns <see cref="F:System.Decimal.MaxValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Min(System.Double[])">
            <summary>
            Returns the smallest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Double"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Double"/> numbers to compare with each other.
            </param>
            <returns>
            The smallest <see cref="T:System.Double"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Min</b> returns <see cref="F:System.Double.MaxValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Min(System.Single[])">
            <summary>
            Returns the smallest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Single"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Single"/> numbers to compare with each other.
            </param>
            <returns>
            The smallest <see cref="T:System.Single"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Min</b> returns <see cref="F:System.Single.MaxValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Min(System.Int16[])">
            <summary>
            Returns the smallest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int16"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int16"/> numbers to compare with each other.
            </param>
            <returns>
            The smallest <see cref="T:System.Int16"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Min</b> returns <see cref="F:System.Int16.MaxValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Min(System.Int32[])">
            <summary>
            Returns the smallest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int32"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int32"/> numbers to compare with each other.
            </param>
            <returns>
            The smallest <see cref="T:System.Int32"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Min</b> returns <see cref="F:System.Int32.MaxValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Min(System.Int64[])">
            <summary>
            Returns the smallest of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int64"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int64"/> numbers to compare with each other.
            </param>
            <returns>
            The smallest <see cref="T:System.Int64"/> number found in <paramref name="array"/>.</returns>
            <remarks>
            <b>Min</b> returns <see cref="F:System.Int64.MaxValue"/> if <paramref name="array"/> is empty.
            </remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)">
            <overloads>
            Returns the first value modulo the second value.</overloads>
            <summary>
            Returns the first <see cref="T:System.Decimal"/> value modulo the second value.</summary>
            <param name="a">
            A <see cref="T:System.Decimal"/> number indicating the dividend.</param>
            <param name="p">
            A <see cref="T:System.Decimal"/> number indicating the divisor.</param>
            <returns>
            The <see cref="T:System.Decimal"/> number that equals <paramref name="a"/> modulo <paramref
            name="p"/>.</returns>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="p"/> is zero.</exception>
            <remarks>
            <b>Modulo</b> returns <c>a - Floor(a/p) * p</c> whereas operator% returns <c>a - (int)
            (a/p) * p</c> which is actually the remainder. The result of <b>Modulo</b> is always in
            the interval [0, <paramref name="p"/>), regardless of the signs of <paramref name="a"/>
            and <paramref name="p"/>.</remarks>
            <example><para>
            The following table compares the results of <b>Modulo</b> and operator% for a dividend
            of 12, a divisor of 5, and all possible combinations of signs.
            </para><list type="table"><listheader>
            <term>Quotient</term>
            <description>Modulo</description><description>operator%</description>
            </listheader><item>
            <term>12 / 5</term><description>2</description><description>2</description>
            </item><item>
            <term>-12 / 5</term><description>3</description><description>-2</description>
            </item><item>
            <term>12 / -5</term><description>-3</description><description>2</description>
            </item><item>
            <term>-12 / -5</term><description>-2</description><description>-2</description>
            </item></list></example>
        </member>
        <member name="M:Tektosyne.Fortran.Modulo(System.Double,System.Double)">
            <summary>
            Returns the first <see cref="T:System.Double"/> value modulo the second value.</summary>
            <param name="a">
            A <see cref="T:System.Double"/> number indicating the dividend.</param>
            <param name="p">
            A <see cref="T:System.Double"/> number indicating the divisor.</param>
            <returns>
            The <see cref="T:System.Double"/> number that equals <paramref name="a"/> modulo <paramref
            name="p"/>.</returns>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="p"/> is zero.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Modulo(System.Single,System.Single)">
            <summary>
            Returns the first <see cref="T:System.Single"/> value modulo the second value.</summary>
            <param name="a">
            A <see cref="T:System.Single"/> number indicating the dividend.</param>
            <param name="p">
            A <see cref="T:System.Single"/> number indicating the divisor.</param>
            <returns>
            The <see cref="T:System.Single"/> number that equals <paramref name="a"/> modulo <paramref
            name="p"/>.</returns>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="p"/> is zero.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Modulo(System.Int32,System.Int32)">
            <summary>
            Returns the first <see cref="T:System.Int32"/> value modulo the second value.</summary>
            <param name="a">
            An <see cref="T:System.Int32"/> number indicating the dividend.</param>
            <param name="p">
            An <see cref="T:System.Int32"/> number indicating the divisor.</param>
            <returns>
            The <see cref="T:System.Int32"/> number that equals <paramref name="a"/> modulo <paramref
            name="p"/>.</returns>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="p"/> is zero.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Modulo(System.Int64,System.Int64)">
            <summary>
            Returns the first <see cref="T:System.Int64"/> value modulo the second value.</summary>
            <param name="a">
            An <see cref="T:System.Int64"/> number indicating the dividend.</param>
            <param name="p">
            An <see cref="T:System.Int64"/> number indicating the divisor.</param>
            <returns>
            The <see cref="T:System.Int64"/> number that equals <paramref name="a"/> modulo <paramref
            name="p"/>.</returns>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="p"/> is zero.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.NInt(System.Decimal)">
            <overloads>
            Returns the <see cref="T:System.Int32"/> number nearest the specified value, using standard
            rounding.</overloads>
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Decimal"/>
            value, using standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Decimal"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>NInt</b> is the equivalent of casting the result of <see cref="M:Tektosyne.Fortran.ANInt(System.Decimal)"/> to <see
            cref="T:System.Int32"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.NInt(System.Double)">
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Double"/> value,
            using standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Double"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>NInt</b> is the equivalent of casting the result of <see cref="M:Tektosyne.Fortran.ANInt(System.Decimal)"/> to <see
            cref="T:System.Int32"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.NInt(System.Single)">
            <summary>
            Returns the <see cref="T:System.Int32"/> number nearest the specified <see cref="T:System.Single"/> value,
            using standard rounding.</summary>
            <param name="n">
            A <see cref="T:System.Single"/> number to round.</param>
            <returns>
            The <see cref="T:System.Int32"/> number nearest <paramref name="n"/>.</returns>
            <remarks>
            <b>NInt</b> is the equivalent of casting the result of <see cref="M:Tektosyne.Fortran.ANInt(System.Decimal)"/> to <see
            cref="T:System.Int32"/> but executes faster.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sign(System.Decimal,System.Decimal)">
            <overloads>
            Transfers the sign of one number to the absolute value of another.</overloads>
            <summary>
            Transfers the sign of one <see cref="T:System.Decimal"/> number to the absolute value of
            another.</summary>
            <param name="a">
            A <see cref="T:System.Decimal"/> number whose absolute value to combine with the sign of
            <paramref name="b"/>.</param>
            <param name="b">
            A <see cref="T:System.Decimal"/> number whose sign to combine with the absolute value of
            <paramref name="a"/>.</param>
            <returns>
            The <see cref="T:System.Decimal"/> number that equals the absolute value of <paramref name="a"/>
            with the sign of <paramref name="b"/>.</returns>
            <remarks>
            <b>Sign</b> assumes a positive sign if <paramref name="b"/> is zero, in accordance with
            the Fortran 90 standard.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sign(System.Double,System.Double)">
            <summary>
            Transfers the sign of one <see cref="T:System.Double"/> number to the absolute value of another.
            </summary>
            <param name="a">
            A <see cref="T:System.Double"/> number whose absolute value to combine with the sign of <paramref
            name="b"/>.</param>
            <param name="b">
            A <see cref="T:System.Double"/> number whose sign to combine with the absolute value of <paramref
            name="a"/>.</param>
            <returns>
            The <see cref="T:System.Double"/> number that equals the absolute value of <paramref name="a"/>
            with the sign of <paramref name="b"/>.</returns>
            <remarks>
            <b>Sign</b> assumes a positive sign if <paramref name="b"/> is zero, in accordance with
            the Fortran 90 standard.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sign(System.Single,System.Single)">
            <summary>
            Transfers the sign of one <see cref="T:System.Single"/> number to the absolute value of another.
            </summary>
            <param name="a">
            A <see cref="T:System.Single"/> number whose absolute value to combine with the sign of <paramref
            name="b"/>.</param>
            <param name="b">
            A <see cref="T:System.Single"/> number whose sign to combine with the absolute value of <paramref
            name="a"/>.</param>
            <returns>
            The <see cref="T:System.Single"/> number that equals the absolute value of <paramref name="a"/>
            with the sign of <paramref name="b"/>.</returns>
            <remarks>
            <b>Sign</b> assumes a positive sign if <paramref name="b"/> is zero, in accordance with
            the Fortran 90 standard.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sum(System.Decimal[])">
            <overloads>
            Returns the sum of the specified <see cref="T:System.Array"/> of numbers.</overloads>
            <summary>
            Returns the sum of the specified <see cref="T:System.Array"/> of <see cref="T:System.Decimal"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Decimal"/> numbers to sum up.</param>
            <returns>
            The <see cref="T:System.Decimal"/> number that is the sum of all values in <paramref
            name="array"/>.</returns>
            <remarks>
            <b>Sum</b> returns zero if <paramref name="array"/> is empty.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sum(System.Double[])">
            <summary>
            Returns the sum of the specified <see cref="T:System.Array"/> of <see cref="T:System.Double"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Double"/> numbers to sum up.</param>
            <returns>
            The <see cref="T:System.Double"/> number that is the sum of all values in <paramref
            name="array"/>.</returns>
            <remarks>
            <b>Sum</b> returns zero if <paramref name="array"/> is empty.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sum(System.Single[])">
            <summary>
            Returns the sum of the specified <see cref="T:System.Array"/> of <see cref="T:System.Single"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Single"/> numbers to sum up.</param>
            <returns>
            The <see cref="T:System.Single"/> number that is the sum of all values in <paramref
            name="array"/>.</returns>
            <remarks>
            <b>Sum</b> returns zero if <paramref name="array"/> is empty.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sum(System.Int16[])">
            <summary>
            Returns the sum of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int16"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int16"/> numbers to sum up.</param>
            <returns>
            The <see cref="T:System.Int16"/> number that is the sum of all values in <paramref
            name="array"/>.</returns>
            <remarks>
            <b>Sum</b> returns zero if <paramref name="array"/> is empty.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sum(System.Int32[])">
            <summary>
            Returns the sum of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int32"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int32"/> numbers to sum up.</param>
            <returns>
            The <see cref="T:System.Int32"/> number that is the sum of all values in <paramref
            name="array"/>.</returns>
            <remarks>
            <b>Sum</b> returns zero if <paramref name="array"/> is empty.</remarks>
        </member>
        <member name="M:Tektosyne.Fortran.Sum(System.Int64[])">
            <summary>
            Returns the sum of the specified <see cref="T:System.Array"/> of <see cref="T:System.Int64"/> numbers.
            </summary>
            <param name="array">
            The <see cref="T:System.Array"/> of <see cref="T:System.Int64"/> numbers to sum up.</param>
            <returns>
            The <see cref="T:System.Int64"/> number that is the sum of all values in <paramref
            name="array"/>.</returns>
            <remarks>
            <b>Sum</b> returns zero if <paramref name="array"/> is empty.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.Angle">
            <summary>
            Provides constants and methods to manipulate angles in radians and degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Angle.DegreesToRadians">
            <summary>
            The factor that converts an angle from degrees to radians.</summary>
            <remarks>
            <b>DegreesToRadians</b> holds the value <see cref="F:System.Math.PI"/> / 180.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.Angle.RadiansToDegrees">
            <summary>
            The factor that converts an angle from radians to degrees.</summary>
            <remarks>
            <b>RadiansToDegrees</b> holds the value 180 / <see cref="F:System.Math.PI"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Angle.DegreesToCompass(System.Double)">
            <summary>
            Converts the specified angle, in degrees, to the nearest <see cref="T:Tektosyne.Geometry.Compass"/>
            direction.</summary>
            <param name="degrees">
            The angle to convert, in degrees. This value is taken <see cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> 360
            degrees, and may therefore be outside the interval [0, 360).</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.Compass"/> direction nearest to the specified <paramref name="degrees"/>.
            </returns>
            <remarks>
            The specified <paramref name="degrees"/> are measured in the same way as <see
            cref="T:Tektosyne.Geometry.Compass"/> directions, i.e. starting at zero for <see cref="F:Tektosyne.Geometry.Compass.North"/> and
            increasing clockwise.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Angle.DistanceDegrees(System.Double,System.Double)">
            <summary>
            Finds the shortest distance between two specified normalized angles, in degrees.
            </summary>
            <param name="start">
            The angle from which the distance is measured, in normalized degrees.</param>
            <param name="end">
            The angle to which the distance is measured, in normalized degrees.</param>
            <returns>
            The shortest distance from <paramref name="start"/> to <paramref name="end"/>, in signed
            degrees.</returns>
            <remarks><para>
            <b>DistanceDegrees</b> requires that the specified <paramref name="start"/> and
            <paramref name="end"/> have been normalized to the half-open interval [0, 360), e.g.
            using <see cref="M:Tektosyne.Geometry.Angle.NormalizeDegrees(System.Double)"/>.
            </para><para>
            If so, <b>DistanceDegrees</b> returns the value within the half-open interval (-180,
            +180] that solves the following equation:
            </para><para>
            <paramref name="end"/> = <see cref="M:Tektosyne.Geometry.Angle.NormalizeDegrees(System.Double)"/>(<paramref name="start"/> + 
            <b>DistanceDegrees</b>(<paramref name="start"/>, <paramref name="end"/>))
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Angle.DistanceRadians(System.Double,System.Double)">
            <summary>
            Finds the shortest distance between two specified normalized angles, in radians.
            </summary>
            <param name="start">
            The angle from which the distance is measured, in normalized radians.</param>
            <param name="end">
            The angle to which the distance is measured, in normalized radians.</param>
            <returns>
            The shortest distance from <paramref name="start"/> to <paramref name="end"/>, in signed
            radians.</returns>
            <remarks><para>
            <b>DistanceRadians</b> requires that the specified <paramref name="start"/> and
            <paramref name="end"/> have been normalized to the half-open interval [0, 2 <see
            cref="F:System.Math.PI"/>), e.g. using <see cref="M:Tektosyne.Geometry.Angle.NormalizeRadians(System.Double)"/>.
            </para><para>
            If so, <b>DistanceRadians</b> returns the value within the half-open interval (-<see
            cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>] that solves the following equation:
            </para><para>
            <paramref name="end"/> = <see cref="M:Tektosyne.Geometry.Angle.NormalizeRadians(System.Double)"/>(<paramref name="start"/> + 
            <b>DistanceRadians</b>(<paramref name="start"/>, <paramref name="end"/>))
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Angle.NormalizeDegrees(System.Double)">
            <summary>
            Normalizes the specified angle, in degrees, to the interval [0, 360).</summary>
            <param name="degrees">
            The angle to normalize, in degrees.</param>
            <returns>
            The specified <paramref name="degrees"/> normalized to the half-open interval [0, 360).
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.Angle.NormalizeRoundedDegrees(System.Double)">
            <summary>
            Normalizes the specified angle, in degrees, to the interval [0, 360) after rounding to
            the nearest <see cref="T:System.Int32"/> number.</summary>
            <param name="degrees">
            The angle to normalize, in degrees.</param>
            <returns>
            The specified <paramref name="degrees"/> rounded to the nearest <see cref="T:System.Int32"/>
            number and normalized to the half-open interval [0, 360).</returns>
            <remarks>
            <b>NormalizeRoundedDegrees</b> uses <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> to round the specified
            <paramref name="degrees"/> before normalization. The result is guaranteed to be an <see
            cref="T:System.Int32"/> value between 0 and 359.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Angle.NormalizeRadians(System.Double)">
            <summary>
            Normalizes the specified angle, in radians, to the interval [0, 2 <see
            cref="F:System.Math.PI"/>).</summary>
            <param name="radians">
            The angle to normalize, in radians.</param>
            <returns>
            The specified <paramref name="radians"/> normalized to the half-open interval [0, 2 <see
            cref="F:System.Math.PI"/>).</returns>
        </member>
        <member name="T:Tektosyne.Geometry.Compass">
            <summary>
            Specifies the eight major compass directions.</summary>
            <remarks><para>
            <b>Compass</b> specifies the four cardinal directions of the compass, and the four ordinal
            directions halfway between the cardinal points.
            </para><para>
            Each <b>Compass</b> direction is assigned an <see cref="T:System.Int32"/> value that equals its 
            compass angle, starting with zero degrees for <see cref="F:Tektosyne.Geometry.Compass.North"/> and continuing
            clockwise in 45 degree increments.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.North">
            <summary>Specifies zero degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.NorthEast">
            <summary>Specifies 45 degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.East">
            <summary>Specifies 90 degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.SouthEast">
            <summary>Specifies 135 degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.South">
            <summary>Specifies 180 degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.SouthWest">
            <summary>Specifies 225 degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.West">
            <summary>Specifies 270 degrees.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Compass.NorthWest">
            <summary>Specifies 315 degrees.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.GeoAlgorithms">
            <summary>
            Provides standard algorithms and auxiliary methods for computational geometry.</summary>
            <remarks>
            All <b>Random…</b> methods use the <see cref="F:Tektosyne.MersenneTwister.Default"/> instance of the
            <see cref="T:Tektosyne.MersenneTwister"/> class, and are therefore <em>not</em> thread-safe.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.ConnectPoints(System.Boolean,Tektosyne.Geometry.PointD[])">
            <summary>
            Connects the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates with <see cref="T:Tektosyne.Geometry.LineD"/>
            instances.</summary>
            <param name="isClosed">
            <c>true</c> to create a <see cref="T:Tektosyne.Geometry.LineD"/> instance from the last to the first <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates; otherwise, <c>false</c>.</param>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates the connect.
            </param>
            <returns>
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> instances that connect all
            <paramref name="points"/> in the specified order.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is a null reference.</exception>
            <remarks><para>
            <b>ConnectPoints</b> returns an empty <see cref="T:System.Array"/> if <paramref name="points"/>
            contains less than two elements. Otherwise, <b>ConnectPoints</b> returns an <see
            cref="T:System.Array"/> with the same number of elements as <paramref name="points"/> if
            <paramref name="isClosed"/> is <c>true</c>, and one element less if <paramref
            name="isClosed"/> is <c>false</c>.
            </para><para>
            <b>ConnectPoints</b> does not check for identical adjacent <paramref name="points"/>, or
            for congruent <see cref="T:Tektosyne.Geometry.LineD"/> instances. For example, if <paramref name="points"/>
            contains two elements and <paramref name="isClosed"/> is <c>true</c>, the returned <see
            cref="T:System.Array"/> will contain two <see cref="T:Tektosyne.Geometry.LineD"/> instances with identical coordinates
            but opposite directions.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.ConvexHull(Tektosyne.Geometry.PointD[])">
            <summary>
            Finds the convex hull for the specified set of <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.
            </summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates whose convex hull
            to find.</param>
            <returns>
            An <see cref="T:System.Array"/> containing the subset of the specified <paramref name="points"/>
            that represent the vertices of their convex hull.</returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty array.</exception>
            <remarks><para>
            If the specified <paramref name="points"/> array contains only one or two elements,
            <b>ConvexHull</b> returns a new array containing the same elements. Points that are
            coincident or collinear with other hull vertices are always removed from the returned
            array, however. A <paramref name="points"/> array containing the same <see
            cref="T:Tektosyne.Geometry.PointD"/> twice will return an array containing that <see cref="T:Tektosyne.Geometry.PointD"/> once.
            </para><para>
            <b>ConvexHull</b> performs a Graham scan with an asymptotic runtime of O(n log n). This
            C# implementation was adapted from the <c>Graham</c> algorithm by Joseph O’Rourke,
            <em>Computational Geometry in C</em> (2nd ed.), Cambridge University Press 1998, p.72ff.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.NearestPoint(System.Collections.Generic.IList{Tektosyne.Geometry.PointD},Tektosyne.Geometry.PointD)">
            <summary>
            Searches the specified <see cref="T:Tektosyne.Geometry.PointD"/> collection for the element nearest to the
            specified coordinates.</summary>
            <param name="points">
            An <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to search.
            </param>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="q"/> in <paramref
            name="points"/>, if found; otherwise, the zero-based index of the <paramref
            name="points"/> element with the smallest Euclidean distance to <paramref name="q"/>.
            </returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty collection.</exception>
            <remarks><para>
            <b>NearestPoint</b> performs a linear search within the specified <paramref
            name="points"/> to find the element with the smallest Euclidean distance to <paramref
            name="q"/>. This is always an O(n) operation, where n is the total number of <paramref
            name="points"/>, unless an exact match for <paramref name="q"/> is encountered.
            </para><para>
            If the specified <paramref name="points"/> are already sorted lexicographically, the
            <see cref="T:Tektosyne.Geometry.PointDComparerX"/> and <see cref="T:Tektosyne.Geometry.PointDComparerY"/> classes provide a much
            faster <b>FindNearest</b> method.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.PointInPolygon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD[])">
            <overloads>
            Finds the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> relative to the specified
            arbitrary polygon.</overloads>
            <summary>
            Finds the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> relative to the specified
            arbitrary polygon, using exact coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <param name="polygon">
            An <see cref="T:System.Array"/> containing <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that are the vertices
            of an arbitrary polygon.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PolygonLocation"/> value that indicates the location of <paramref
            name="q"/> relative to the specified <paramref name="polygon"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="polygon"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygon"/> is a null reference.</exception>
            <remarks><para>
            The specified <paramref name="polygon"/> is implicitly assumed to be closed, with an
            edge connecting its first and last vertex. Therefore, all vertices should be different.
            </para><para>
            <b>PointInPolygon</b> performs a ray crossings algorithm with an asymptotic runtime of
            O(n). This C# implementation was adapted from the <c>InPoly1</c> algorithm by Joseph
            O’Rourke, <em>Computational Geometry in C</em> (2nd ed.), Cambridge University Press
            1998, p.244.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.PointInPolygon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD[],System.Double)">
            <summary>
            Finds the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> relative to the specified
            arbitrary polygon, given the specified epsilon for coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <param name="polygon">
            An <see cref="T:System.Array"/> containing <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that are the vertices
            of an arbitrary polygon.</param>
            <param name="epsilon">
            The maximum absolute difference at which two coordinates should be considered equal.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PolygonLocation"/> value that indicates the location of <paramref
            name="q"/> relative to the specified <paramref name="polygon"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="polygon"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygon"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is equal to or less than zero.</exception>
            <remarks>
            <b>PointInPolygon</b> is identical with the basic <see cref="M:Tektosyne.Geometry.GeoAlgorithms.PointInPolygon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD[])"/> overload but calls <see cref="M:Tektosyne.MathUtility.Compare(System.Double,System.Double,System.Double)"/> with the specified
            <paramref name="epsilon"/> to determine whether <paramref name="q"/> coincides with any
            edge or vertex of the specified <paramref name="polygon"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.PolygonArea(Tektosyne.Geometry.PointD[])">
            <summary>
            Computes the area of the specified polygon.</summary>
            <param name="polygon">
            An <see cref="T:System.Array"/> containing <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that are the vertices
            of an arbitrary polygon.</param>
            <returns>
            The area of the specified <paramref name="polygon"/>, with a sign that indicates the
            orientation of its vertices.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="polygon"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygon"/> is a null reference.</exception>
            <remarks><para>
            The specified <paramref name="polygon"/> is implicitly assumed to be closed, with an
            edge connecting its first and last vertex. Therefore, all vertices should be different.
            Moreover, <paramref name="polygon"/> must not self-intersect.
            </para><para>
            The absolute value of <b>PolygonArea</b> equals the area of the specified <paramref
            name="polygon"/>. The sign indicates the orientation of its vertices, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Relationship</description>
            </listheader><item>
            <term>Less than zero</term><description>
            The vertices are specified in clockwise order, assuming y-coordinates increase upward.
            </description></item><item>
            <term>Zero</term><description>
            All vertices are collinear, or otherwise enclose no area.
            </description></item><item>
            <term>Greater than zero</term><description>
            The vertices are specified in counter-clockwise order, assuming y-coordinates increase
            upward.</description></item></list></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.PolygonCentroid(Tektosyne.Geometry.PointD[])">
            <summary>
            Computes the centroid of the specified polygon.</summary>
            <param name="polygon">
            An <see cref="T:System.Array"/> containing <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that are the vertices
            of an arbitrary polygon.</param>
            <returns>
            The centroid (center of gravity) of the specified <paramref name="polygon"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="polygon"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygon"/> is a null reference.</exception>
            <remarks><para>
            The specified <paramref name="polygon"/> is implicitly assumed to be closed, with an
            edge connecting its first and last vertex. Therefore, all vertices should be different.
            </para><para>
            Moreover, <paramref name="polygon"/> must not self-intersect, and its vertices cannot be
            collinear, i.e. <see cref="M:Tektosyne.Geometry.GeoAlgorithms.PolygonArea(Tektosyne.Geometry.PointD[])"/> cannot be zero.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.RandomLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a random <see cref="T:Tektosyne.Geometry.LineD"/> within the specified area.</summary>
            <param name="x">
            The smallest x-coordinate for any <see cref="T:Tektosyne.Geometry.LineD"/> coordinate.</param>
            <param name="y">
            The smallest y-coordinate for any <see cref="T:Tektosyne.Geometry.LineD"/> coordinate.</param>
            <param name="width">
            The width of the area containing all <see cref="T:Tektosyne.Geometry.LineD"/> coordinates.</param>
            <param name="height">
            The height of the area containing all <see cref="T:Tektosyne.Geometry.LineD"/> coordinates.</param>
            <returns>
            A randomly created <see cref="T:Tektosyne.Geometry.LineD"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is equal to or less than zero.
            </exception>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.RandomPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a random <see cref="T:Tektosyne.Geometry.PointD"/> within the specified area.</summary>
            <param name="x">
            The smallest x-coordinate for any <see cref="T:Tektosyne.Geometry.PointD"/>.</param>
            <param name="y">
            The smallest y-coordinate for any <see cref="T:Tektosyne.Geometry.PointD"/>.</param>
            <param name="width">
            The width of the area containing all <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</param>
            <param name="height">
            The height of the area containing all <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</param>
            <returns>
            A randomly created <see cref="T:Tektosyne.Geometry.PointD"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is equal to or less than zero.
            </exception>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.RandomPoints(System.Int32,Tektosyne.Geometry.RectD)">
            <overloads>
            Creates an <see cref="T:System.Array"/> of random <see cref="T:Tektosyne.Geometry.PointD"/> coordinates within the
            specified area.</overloads>
            <summary>
            Creates an <see cref="T:System.Array"/> of random <see cref="T:Tektosyne.Geometry.PointD"/> coordinates within the
            specified area.</summary>
            <param name="count">
            The number of <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to create.</param>
            <param name="bounds">
            The coordinates of the area containing all <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</param>
            <returns>
            An <see cref="T:System.Array"/> containing <paramref name="count"/> randomly created <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="count"/> is less than zero.
            </para><para>-or-</para><para>
            <paramref name="bounds"/> contains a <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectD.Height"/> that is equal to or less than zero.</para></exception>
            <remarks>
            The returned <see cref="T:System.Array"/> is unsorted and may contain duplicate <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.RandomPoints(System.Int32,Tektosyne.Geometry.RectD,Tektosyne.Geometry.IPointDComparer,System.Double)">
            <summary>
            Creates an <see cref="T:System.Array"/> of random <see cref="T:Tektosyne.Geometry.PointD"/> coordinates within the
            specified area, ensuring a specified pairwise minimum distance.</summary>
            <param name="count">
            The number of <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to create.</param>
            <param name="bounds">
            The coordinates of the area containing all <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</param>
            <param name="comparer">
            The <see cref="T:Tektosyne.Geometry.IPointDComparer"/> instance used to sort and search the collection of
            <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</param>
            <param name="distance">
            The smallest Euclidean distance between any two <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.
            </param>
            <returns>
            An <see cref="T:System.Array"/> containing <paramref name="count"/> randomly created <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates whose pairwise distance is equal to or greater than
            <paramref name="distance"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="count"/> is less than zero.
            </para><para>-or-</para><para>
            <paramref name="bounds"/> contains a <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectD.Height"/> that is equal to or less than zero.
            </para><para>-or-</para><para>
            <paramref name="distance"/> is equal to or less than zero.</para></exception>
            <remarks><para>
            The returned <see cref="T:System.Array"/> is sorted using the specified <paramref
            name="comparer"/>, and never contains duplicate <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.
            </para><note type="caution">
            <b>RandomPoints</b> may enter an endless loop if <paramref name="distance"/> is too
            great relative to <paramref name="count"/> and <paramref name="bounds"/>.
            </note></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.RandomPolygon(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a random simple polygon within the specified area.</summary>
            <param name="x">
            The smallest x-coordinate for any polygon vertex.</param>
            <param name="y">
            The smallest y-coordinate for any polygon vertex.</param>
            <param name="width">
            The width of the area containing all polygon vertices.</param>
            <param name="height">
            The height of the area containing all polygon vertices.</param>
            <returns>
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that are the
            vertices of the created polygon.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is equal to or less than zero.
            </exception>
            <remarks>
            <b>RandomPolygon</b> moves in a full circle around the center of the specified area,
            placing vertices at random angles and radii within the area. Any two vertices are
            separated by a minimum angular distance of 6 degrees. The resulting polygon is simple,
            i.e. covering a single contiguous space without self-intersections.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex">
            <summary>
            Represents a potential vertex of a <see cref="M:Tektosyne.Geometry.GeoAlgorithms.ConvexHull(Tektosyne.Geometry.PointD[])"/> under construction.
            </summary>
            <remarks>
            <b>ConvexHullVertex</b> implements the <c>tPointStructure</c> and <c>tStackCell</c>
            structures by Joseph O’Rourke, <em>Computational Geometry in C</em> (2nd ed.), Cambridge
            University Press 1998, p.78.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.#ctor(Tektosyne.Geometry.PointD,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> class with the
            specified <see cref="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Vertex"/> and <see cref="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Index"/>.</summary>
            <param name="vertex">
            The coordinates of the <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/>.</param>
            <param name="index">
            The unique index of the <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Delete">
            <summary>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> is not part of the convex hull and
            should be deleted; otherwise, <c>false</c>. The default is <c>false</c>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Index">
            <summary>
            An <see cref="T:System.Int32"/> value that uniquely identifies the <see
            cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> within the convex hull.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Next">
            <summary>
            The next <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> in the convex hull. The default is a null
            reference.</summary>
            <remarks>
            <b>Next</b> is a null reference if the convex hull ends with this <see
            cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/>, or if the vertices have not yet been linked.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Vertex">
            <summary>
            The coordinates of the <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/>.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertexComparer">
            <summary>
            Provides a method that compares two <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> instances.</summary>
            <remarks>
            <b>ConvexHullVertexComparer</b> implements the <c>Compare</c> algorithm by Joseph
            O’Rourke, <em>Computational Geometry in C</em> (2nd ed.), Cambridge University Press
            1998, p.82.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertexComparer.#ctor(Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertexComparer"/> class with
            the specified initial vertex.</summary>
            <param name="p0">
            The <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> object that represents the first vertex in the
            convex hull under construction.</param>
        </member>
        <member name="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertexComparer.P0">
            <summary>
            The first <see cref="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Vertex"/> in the convex hull under
            construction.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertexComparer.Compare(Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex,Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> objects and returns an
            indication of their precedence in the convex hull under construction.</summary>
            <param name="pi">
            The first <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> to compare.</param>
            <param name="pj">
            The second <see cref="T:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term><description>
            <paramref name="pi"/> is sorted before <paramref name="pj"/>.</description>
            </item><item>
            <term>Zero</term><description>
            <paramref name="pi"/> and <paramref name="pj"/> are the same object or contain the
            same <see cref="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Vertex"/> coordinates.</description>
            </item><item>
            <term>Greater than zero</term><description>
            <paramref name="pi"/> is sorted after <paramref name="pj"/>.</description>
            </item></list></returns>
            <remarks><para>
            <b>Compare</b> sets the <see cref="F:Tektosyne.Geometry.GeoAlgorithms.ConvexHullVertex.Delete"/> flag on either the
            specified <paramref name="pi"/> or <paramref name="pj"/> if the two vertices are
            collinear or coincident.
            </para><para>
            <b>Compare</b> implements the <c>Compare</c> algorithm by Joseph O’Rourke,
            <em>Computational Geometry in C</em> (2nd ed.), Cambridge University Press 1998,
            p.82. See there for an explanation of the established sorting order.
            </para><para>
            Our implementation also compares <paramref name="pi"/> and <paramref name="pj"/> for
            reference equality before doing anything else. This is necessary because sorting
            algorithms may supply the same object for both parameters. </para></remarks>
        </member>
        <member name="T:Tektosyne.Geometry.IPointDComparer">
            <summary>
            Provides methods that compare two <see cref="T:Tektosyne.Geometry.PointD"/> instances, given a specified epsilon
            for lexicographic coordinate comparisons.</summary>
            <remarks><para>
            <b>IPointDComparer</b> defines an <see cref="T:System.Collections.Generic.IComparer`1"/> that lexicographically compares
            <see cref="T:Tektosyne.Geometry.PointD"/> coordinates with a given <see cref="P:Tektosyne.Geometry.IPointDComparer.Epsilon"/>, applied
            in each dimension. <see cref="T:Tektosyne.Geometry.PointDComparerX"/> and <see cref="T:Tektosyne.Geometry.PointDComparerY"/> provide
            implementations whose lexicographic ordering prefers x- and y-coordinates, respectively.
            </para><para>
            <b>IPointDComparer</b> also provides a <see cref="M:Tektosyne.Geometry.IPointDComparer.FindNearest(System.Collections.Generic.IList{Tektosyne.Geometry.PointD},Tektosyne.Geometry.PointD)"/> method to
            search a pre-sorted <see cref="T:Tektosyne.Geometry.PointD"/> collection for given coordinates. This method is
            defined here because it relies on the specific sorting order established by the same
            <b>IPointDComparer</b> instance.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.IPointDComparer.Epsilon">
            <summary>
            Gets or sets the epsilon used for coordinate comparisons.</summary>
            <value><para>
            The maximum absolute difference at which coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. The default is zero.</para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a negative value.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.IPointDComparer.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, given the current <see cref="P:Tektosyne.Geometry.IPointDComparer.Epsilon"/> for coordinate
            comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>, given the
            current <see cref="P:Tektosyne.Geometry.IPointDComparer.Epsilon"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal, given the current
            <see cref="P:Tektosyne.Geometry.IPointDComparer.Epsilon"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>, given the
            current <see cref="P:Tektosyne.Geometry.IPointDComparer.Epsilon"/>.</description>
            </item></list></returns>
        </member>
        <member name="M:Tektosyne.Geometry.IPointDComparer.FindNearest(System.Collections.Generic.IList{Tektosyne.Geometry.PointD},Tektosyne.Geometry.PointD)">
            <summary>
            Searches the specified sorted <see cref="T:Tektosyne.Geometry.PointD"/> collection for the element nearest to
            the specified coordinates, given the current <see cref="P:Tektosyne.Geometry.IPointDComparer.Epsilon"/> for coordinate
            comparisons.</summary>
            <param name="points">
            An <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to search,
            sorted lexicographically using the current <see cref="T:Tektosyne.Geometry.IPointDComparer"/>.</param>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <returns>
            The zero-based index of any occurrence of <paramref name="q"/> in <paramref
            name="points"/>, if found; otherwise, the zero-based index of the <paramref
            name="points"/> element with the smallest Euclidean distance to <paramref name="q"/>.
            </returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty collection.</exception>
            <remarks>
            <b>FindNearest</b> combines a fast initial approximation with a radius search, depending
            on the concrete implementation of <see cref="T:Tektosyne.Geometry.IPointDComparer"/>. Please refer to <see
            cref="T:Tektosyne.Geometry.PointDComparerX"/> and <see cref="T:Tektosyne.Geometry.PointDComparerY"/> for details.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.ISubdivisionMap`1">
            <summary>
            Maps the faces of a planar <see cref="T:Tektosyne.Geometry.Subdivision"/> to arbitrary objects.</summary>
            <typeparam name="T">
            The type of all objects to associate with the faces of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.
            </typeparam>
            <remarks><para>
            <b>ISubdivisionMap</b> provides an application-specific mapping of all <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> of a planar <see cref="T:Tektosyne.Geometry.Subdivision"/> to arbitrary objects. The
            use of an interface allows clients to implement the most efficient mapping for their
            concrete <see cref="T:Tektosyne.Geometry.Subdivision"/> structure and object type <typeparamref name="T"/>.
            </para><para>
            Since the <see cref="T:Tektosyne.Geometry.Subdivision"/> has no knowledge of any <b>ISubdivisionMap</b> instances
            that reference it, you must manually update any such instances whenever the underlying <see
            cref="T:Tektosyne.Geometry.Subdivision"/> changes.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.ISubdivisionMap`1.Source">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all mapped faces.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all faces accepted and returned by the <see
            cref="M:Tektosyne.Geometry.ISubdivisionMap`1.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.ISubdivisionMap`1.ToFace(`0)"/> methods, respectively.</value>
            <remarks>
            <b>Source</b> never returns a null reference. Multiple <see cref="T:Tektosyne.Geometry.ISubdivisionMap`1"/>
            instances may refer to the same <b>Source</b>, mapping its <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> to objects of different types.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.ISubdivisionMap`1.Target">
            <summary>
            Gets the object that defines all mapped <typeparamref name="T"/> objects.</summary>
            <value>
            The object that defines all <typeparamref name="T"/> objects returned and accepted by
            the <see cref="M:Tektosyne.Geometry.ISubdivisionMap`1.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.ISubdivisionMap`1.ToFace(`0)"/> methods, respectively.</value>
            <remarks>
            <b>Target</b> may return a null reference if providing a container for all associated
            values is impossible or inconvenient.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.ISubdivisionMap`1.FromFace(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> into the associated <typeparamref
            name="T"/> object.</summary>
            <param name="face">
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> to convert.</param>
            <returns>
            The <typeparamref name="T"/> object associated with <paramref name="face"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="face"/> was not found within <see cref="P:Tektosyne.Geometry.ISubdivisionMap`1.Source"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="face"/> is a null reference.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.ISubdivisionMap`1.ToFace(`0)">
            <summary>
            Converts the specified <typeparamref name="T"/> object into the associated <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <param name="value">
            The <typeparamref name="T"/> object to convert.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> associated with <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> does not map to any <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> within <see
            cref="P:Tektosyne.Geometry.ISubdivisionMap`1.Source"/>.</exception>
        </member>
        <member name="T:Tektosyne.Geometry.LineD">
            <summary>
            Represents a directed line segment in two-dimensional space, using <see cref="T:System.Double"/>
            coordinates.</summary>
            <remarks><para>
            <b>LineD</b> is an immutable structure whose four <see cref="T:System.Double"/> coordinates indicate
            the <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> points of a directed line segment.
            Its <see cref="P:Tektosyne.Geometry.LineD.Angle"/> and <see cref="P:Tektosyne.Geometry.LineD.Length"/> are calculated on demand.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.LineI"/> structure to represent line segments with <see cref="T:System.Int32"/>
            coordinates, and the <see cref="T:Tektosyne.Geometry.LineF"/> structure to represent line segments with <see
            cref="T:System.Single"/> coordinates. You can convert <see cref="T:Tektosyne.Geometry.LineD"/> instances to and from <see
            cref="T:Tektosyne.Geometry.LineF"/> and <see cref="T:Tektosyne.Geometry.LineI"/> instances, rounding off the <see cref="T:System.Double"/> 
            coordinates as necessary.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineD"/> structure.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineD"/> structure with the specified start
            and end coordinates.</summary>
            <param name="startX">
            The <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineD.Start"/> point.</param>
            <param name="startY">
            The <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineD.Start"/> point.</param>
            <param name="endX">
            The <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineD.End"/> point.</param>
            <param name="endY">
            The the <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineD.End"/> point.</param>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.#ctor(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineD"/> structure with the specified start
            and end coordinates.</summary>
            <param name="start">
            The <see cref="F:Tektosyne.Geometry.LineD.Start"/> point of the <see cref="T:Tektosyne.Geometry.LineD"/>.</param>
            <param name="end">
            The <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the <see cref="T:Tektosyne.Geometry.LineD"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.LineD.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.LineD"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.LineD"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineD.Start">
            <summary>
            The start coordinates of the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineD.End">
            <summary>
            The end coordinates of the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.LineD.Angle">
            <summary>
            Gets the angle of the <see cref="T:Tektosyne.Geometry.LineD"/>, in radians.</summary>
            <value><para>
            The angle, in radians, of the direction on the Cartesian plane into which the line
            segment represented by the <see cref="T:Tektosyne.Geometry.LineD"/> is pointing.
            </para><para>-or-</para><para>
            Zero if <see cref="P:Tektosyne.Geometry.LineD.Length"/> equals zero.</para></value>
            <remarks><para>
            <b>Angle</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the vertical and
            horizontal distances between the <see cref="F:Tektosyne.Geometry.LineD.End"/> and <see cref="F:Tektosyne.Geometry.LineD.Start"/> points.
            </para><para>
            <b>Angle</b> equals zero if the <see cref="T:Tektosyne.Geometry.LineD"/> extends horizontally to the right,
            and increases as the line turns clockwise (y-axis pointing downward) or
            counter-clockwise (y-axis pointing upward). The possible range of values is (-<see
            cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineD.InverseSlope">
            <summary>
            Gets the inverse slope of the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <value><para>
            The quotient of the horizontal and the vertical extent of the <see cref="T:Tektosyne.Geometry.LineD"/>.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineD"/> is horizontal.</para></value>
            <remarks>
            <b>InverseSlope</b> may return a negative value, depending on the <see cref="P:Tektosyne.Geometry.LineD.Angle"/> of
            the <see cref="T:Tektosyne.Geometry.LineD"/>. The value of this property equals 1/<see cref="P:Tektosyne.Geometry.LineD.Slope"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineD.Length">
            <summary>
            Gets the absolute length of the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value indicating the absolute length of the line
            segment represented by the <see cref="T:Tektosyne.Geometry.LineD"/>.</value>
            <remarks>
            <b>Length</b> returns the square root of the sum of the squares of the horizontal and
            vertical distances between the <see cref="F:Tektosyne.Geometry.LineD.End"/> and <see cref="F:Tektosyne.Geometry.LineD.Start"/> points.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineD.LengthSquared">
            <summary>
            Gets the squared absolute length of the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value that equals the square of the <see
            cref="P:Tektosyne.Geometry.LineD.Length"/> property.</value>
            <remarks>
            <b>LengthSquared</b> performs the same operations as <see cref="P:Tektosyne.Geometry.LineD.Length"/> but without
            the final <see cref="M:System.Math.Sqrt(System.Double)"/> call, and is therefore faster if you only need the
            squared <see cref="P:Tektosyne.Geometry.LineD.Length"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineD.Slope">
            <summary>
            Gets the slope of the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <value><para>
            The quotient of the vertical and the horizontal extent of the <see cref="T:Tektosyne.Geometry.LineD"/>.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineD"/> is vertical.</para></value>
            <remarks>
            <b>Slope</b> may return a negative value, depending on the <see cref="P:Tektosyne.Geometry.LineD.Angle"/> of the
            <see cref="T:Tektosyne.Geometry.LineD"/>. The value of this property equals 1/<see cref="P:Tektosyne.Geometry.LineD.InverseSlope"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineD.Vector">
            <summary>
            Gets the vector defined by the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointD"/> value defined as (<see cref="F:Tektosyne.Geometry.LineD.End"/> - <see cref="F:Tektosyne.Geometry.LineD.Start"/>).
            </value>
            <remarks>
            <b>Vector</b> returns the <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the <see cref="T:Tektosyne.Geometry.LineD"/> with its
            <see cref="F:Tektosyne.Geometry.LineD.Start"/> point shifted to the origins of the coordinate system.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.DistanceSquared(Tektosyne.Geometry.PointD)">
            <summary>
            Determines the squared distance between the <see cref="T:Tektosyne.Geometry.LineD"/> and the specified <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            The squared distance between <paramref name="q"/> and the <see cref="T:Tektosyne.Geometry.LineD"/>.</returns>
            <remarks>
            <b>DistanceSquared</b> returns either the squared length of the perpendicular dropped
            from <paramref name="q"/> on the <see cref="T:Tektosyne.Geometry.LineD"/>, or the squared distance between
            <paramref name="q"/> and <see cref="F:Tektosyne.Geometry.LineD.Start"/> or <see cref="F:Tektosyne.Geometry.LineD.End"/> if the perpendicular
            does not intersect the <see cref="T:Tektosyne.Geometry.LineD"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.FindX(System.Double)">
            <summary>
            Finds the x-coordinate for the specified y-coordinate on the <see cref="T:Tektosyne.Geometry.LineD"/> or its
            infinite extension.</summary>
            <param name="y">
            The y-coordinate on the <see cref="T:Tektosyne.Geometry.LineD"/> to examine.</param>
            <returns><para>
            The x-coordinate for the specified <paramref name="y"/> coordinate on the <see
            cref="T:Tektosyne.Geometry.LineD"/> or its infinite extension.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineD"/> is horizontal.</para></returns>
            <remarks>
            <b>FindX</b> returns the <see cref="F:Tektosyne.Geometry.PointD.X"/> component of <see cref="F:Tektosyne.Geometry.LineD.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineD.End"/> if the specified <paramref name="y"/> coordinate exactly equals the
            corresponding <see cref="F:Tektosyne.Geometry.PointD.Y"/> component; otherwise, a computed x-coordinate.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.FindY(System.Double)">
            <summary>
            Finds the y-coordinate for the specified x-coordinate on the <see cref="T:Tektosyne.Geometry.LineD"/> or its
            infinite extension.</summary>
            <param name="x">
            The x-coordinate on the <see cref="T:Tektosyne.Geometry.LineD"/> to examine.</param>
            <returns><para>
            The y-coordinate for the specified <paramref name="x"/> coordinate on the <see
            cref="T:Tektosyne.Geometry.LineD"/> or its infinite extension.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineD"/> is vertical.</para></returns>
            <remarks>
            <b>FindY</b> returns the <see cref="F:Tektosyne.Geometry.PointD.Y"/> component of <see cref="F:Tektosyne.Geometry.LineD.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineD.End"/> if the specified <paramref name="x"/> coordinate exactly equals the
            corresponding <see cref="F:Tektosyne.Geometry.PointD.X"/> component; otherwise, a computed y-coordinate.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.FromIndexPoints(Tektosyne.Geometry.PointD[],Tektosyne.Geometry.PointI[])">
            <summary>
            Converts the specified collections of <see cref="T:Tektosyne.Geometry.PointD"/> coordinates and zero-based
            indices into the equivalent <see cref="T:Tektosyne.Geometry.LineD"/> instances.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing all <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that represent
            <see cref="F:Tektosyne.Geometry.LineD.Start"/> or <see cref="F:Tektosyne.Geometry.LineD.End"/> points.</param>
            <param name="indices">
            An <see cref="T:System.Array"/> containing all pairs of zero-based indices within <paramref
            name="points"/> that represent <see cref="T:Tektosyne.Geometry.LineD"/> instances.</param>
            <returns>
            An <see cref="T:System.Array"/> containing all <see cref="T:Tektosyne.Geometry.LineD"/> instances represented by the
            combination of <paramref name="points"/> and <paramref name="indices"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> or <paramref name="indices"/> is a null reference.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="indices"/> contains an index that is less than zero, or equal to or
            greater than the number of elements in <paramref name="points"/>.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.LineD"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/>
            components of the <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Intersect(Tektosyne.Geometry.LineD)">
            <overloads>
            Finds the intersection between the <see cref="T:Tektosyne.Geometry.LineD"/> and a specified line segment.
            </overloads>
            <summary>
            Finds the intersection between this instance and a specified <see cref="T:Tektosyne.Geometry.LineD"/>, using
            exact coordinate comparisons.</summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineD"/> to intersect with this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance that describes if and how the specified
            <paramref name="line"/> and this instance intersect.</returns>
            <remarks>
            <b>Intersect</b> returns the result of <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> for the <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> points of this
            instance and of the specified <paramref name="line"/>, in that order.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Intersect(Tektosyne.Geometry.LineD,System.Double)">
            <summary>
            Finds the intersection between this instance and a specified <see cref="T:Tektosyne.Geometry.LineD"/>, given
            the specified epsilon for coordinate comparisons.</summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineD"/> to intersect with this instance.</param>
            <param name="epsilon">
            The maximum absolute difference at which coordinates and intermediate results should be
            considered equal. This value is always raised to a minium of 1e-10.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance that describes if and how the specified
            <paramref name="line"/> and this instance intersect.</returns>
            <remarks>
            <b>Intersect</b> returns the result of <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)"/> for the <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> points of
            this instance and of the specified <paramref name="line"/>, in that order, and for the
            specified <paramref name="epsilon"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Intersect(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the intersection between the <see cref="T:Tektosyne.Geometry.LineD"/> and the perpendicular dropped
            from the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates where the perpendicular dropped from <paramref
            name="q"/> intersects the <see cref="T:Tektosyne.Geometry.LineD"/> or its infinite extension.</returns>
            <remarks>
            <b>Intersect</b> returns <see cref="F:Tektosyne.Geometry.LineD.Start"/> if <see cref="P:Tektosyne.Geometry.LineD.Length"/> equals zero.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Locate(Tektosyne.Geometry.PointD)">
            <overloads>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineD"/>.</overloads>
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineD"/>, using exact coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineD"/>.</returns>
            <remarks><para>
            <b>Locate</b> never returns <see cref="F:Tektosyne.Geometry.LineLocation.None"/>. The values <see
            cref="F:Tektosyne.Geometry.LineLocation.Left"/> and <see cref="F:Tektosyne.Geometry.LineLocation.Right"/> assume that
            y-coordinates increase upward.
            </para><para>
            <b>Locate</b> is based on the <c>classify</c> algorithm by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.76.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Locate(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineD"/>, given the specified epsilon for coordinate comparisons.
            </summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <param name="epsilon">
            The maximum absolute value at which intermediate results should be considered zero.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineD"/>.</returns>
            <remarks><para>
            <b>Locate</b> is identical with the basic <see cref="M:Tektosyne.Geometry.LineD.Locate(Tektosyne.Geometry.PointD)"/> overload but uses
            the specified <paramref name="epsilon"/> to compare intermediate results to zero.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Locate</b>
            does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.LocateCollinear(Tektosyne.Geometry.PointD)">
            <overloads>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineD"/>, assuming they are collinear.</overloads>
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineD"/>, assuming they are collinear and using exact coordinate
            comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineD"/>.</returns>
            <remarks>
            <b>LocateCollinear</b> is identical with <see cref="M:Tektosyne.Geometry.LineD.Locate(Tektosyne.Geometry.PointD)"/> but assumes that <paramref
            name="q"/> is collinear with the <see cref="T:Tektosyne.Geometry.LineD"/>, and therefore never returns the
            values <see cref="F:Tektosyne.Geometry.LineLocation.Left"/> or <see cref="F:Tektosyne.Geometry.LineLocation.Right"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.LocateCollinear(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineD"/>, assuming they are collinear and given the specified epsilon for
            coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <param name="epsilon">
            The maximum absolute value at which intermediate results should be considered zero.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineD"/>.</returns>
            <remarks><para>
            <b>LocateCollinear</b> is identical with the basic <see cref="M:Tektosyne.Geometry.LineD.LocateCollinear(Tektosyne.Geometry.PointD)"/>
            overload but uses the specified <paramref name="epsilon"/> to compare <paramref
            name="q"/> to the <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> points.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but
            <b>LocateCollinear</b> does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Reverse">
            <summary>
            Reverses the direction of the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.LineD"/> instance whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> property equals the <see
            cref="F:Tektosyne.Geometry.LineD.End"/> property of this instance, and vice versa.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.LineD"/> to a <see cref="T:Tektosyne.Geometry.LineI"/> by rounding coordinates to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineI"/> instance whose <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineI.End"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.LineD"/>, rounded to the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Double"/> coordinates of the <see cref="T:Tektosyne.Geometry.LineD"/> are converted to <see
            cref="T:System.Int32"/> coordinates using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.ToLineF">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.LineD"/> to a <see cref="T:Tektosyne.Geometry.LineF"/> by casting coordinates to the
            equivalent <see cref="T:System.Single"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineF"/> instance whose <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineF.End"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.LineD"/>, cast to the equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.ToLineI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.LineD"/> to a <see cref="T:Tektosyne.Geometry.LineI"/> by truncating coordinates to 
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineI"/> instance whose <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineI.End"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.LineD"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the coordinates of the <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineD.End"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.op_Equality(Tektosyne.Geometry.LineD,Tektosyne.Geometry.LineD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineD"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineD.Equals(Tektosyne.Geometry.LineD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.LineD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.op_Inequality(Tektosyne.Geometry.LineD,Tektosyne.Geometry.LineD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineD"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineD.Equals(Tektosyne.Geometry.LineD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.LineD"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.op_Implicit(Tektosyne.Geometry.LineF)~Tektosyne.Geometry.LineD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.LineF"/> to a <see cref="T:Tektosyne.Geometry.LineD"/> with identical coordinates.
            </summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.LineD"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineD"/> instance whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/>
            properties equal the corresponding properties of the specified <paramref name="line"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.op_Explicit(Tektosyne.Geometry.LineD)~Tektosyne.Geometry.LineF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.LineD"/> to a <see cref="T:Tektosyne.Geometry.LineF"/> by casting coordinates to the
            equivalent <see cref="T:System.Single"/> values.</summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.LineI"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineF"/> instance whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/>
            properties equal the corresponding properties of the specified <paramref name="line"/>,
            cast to the equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.op_Implicit(Tektosyne.Geometry.LineI)~Tektosyne.Geometry.LineD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.LineI"/> to a <see cref="T:Tektosyne.Geometry.LineD"/> with identical coordinates.
            </summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.LineD"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineD"/> instance whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/>
            properties equal the corresponding properties of the specified <paramref name="line"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.op_Explicit(Tektosyne.Geometry.LineD)~Tektosyne.Geometry.LineI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.LineD"/> to a <see cref="T:Tektosyne.Geometry.LineI"/> by truncating coordinates to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.LineI"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineI"/> instance whose <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineI.End"/> properties equal the corresponding properties of the specified
            <paramref name="line"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineD"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.LineD"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.LineD"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.LineD"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineD"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineD"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.LineD.Equals(Tektosyne.Geometry.LineD)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Equals(Tektosyne.Geometry.LineD)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.LineD"/> have the same
            value.</summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineD"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="line"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/>
            properties of the two <see cref="T:Tektosyne.Geometry.LineD"/> instances to test for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Equals(Tektosyne.Geometry.LineD,Tektosyne.Geometry.LineD)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.LineD"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.LineD.Equals(Tektosyne.Geometry.LineD)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.LineD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineD.Equals(Tektosyne.Geometry.LineD,Tektosyne.Geometry.LineD,System.Double)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.LineD"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineD"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the coordinates of <paramref name="a"/>
            and <paramref name="b"/> is less than or equal to <paramref name="epsilon"/>; otherwise,
            <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.LineF">
            <summary>
            Represents a directed line segment in two-dimensional space, using <see cref="T:System.Single"/>
            coordinates.</summary>
            <remarks><para>
            <b>LineF</b> is an immutable structure whose four <see cref="T:System.Single"/> coordinates indicate
            the <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see cref="F:Tektosyne.Geometry.LineF.End"/> points of a directed line segment.
            Its <see cref="P:Tektosyne.Geometry.LineF.Angle"/> and <see cref="P:Tektosyne.Geometry.LineF.Length"/> are calculated on demand.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.LineI"/> structure to represent line segments with <see cref="T:System.Int32"/>
            coordinates, and the <see cref="T:Tektosyne.Geometry.LineD"/> structure to represent line segments with <see
            cref="T:System.Double"/> coordinates. You can convert <see cref="T:Tektosyne.Geometry.LineF"/> instances to and from <see
            cref="T:Tektosyne.Geometry.LineI"/> instances, rounding off the <see cref="T:System.Single"/> coordinates as necessary.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineF"/> structure.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineF"/> structure with the specified start
            and end coordinates.</summary>
            <param name="startX">
            The <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineF.Start"/> point.</param>
            <param name="startY">
            The <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineF.Start"/> point.</param>
            <param name="endX">
            The <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineF.End"/> point.</param>
            <param name="endY">
            The the <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineF.End"/> point.</param>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.#ctor(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineF"/> structure with the specified start
            and end coordinates.</summary>
            <param name="start">
            The <see cref="F:Tektosyne.Geometry.LineF.Start"/> point of the <see cref="T:Tektosyne.Geometry.LineF"/>.</param>
            <param name="end">
            The <see cref="F:Tektosyne.Geometry.LineF.End"/> point of the <see cref="T:Tektosyne.Geometry.LineF"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.LineF.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.LineF"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.LineF"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineF.Start">
            <summary>
            The start coordinates of the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineF.End">
            <summary>
            The end coordinates of the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.LineF.Angle">
            <summary>
            Gets the angle of the <see cref="T:Tektosyne.Geometry.LineF"/>, in radians.</summary>
            <value><para>
            The angle, in radians, of the direction on the Cartesian plane into which the line
            segment represented by the <see cref="T:Tektosyne.Geometry.LineF"/> is pointing.
            </para><para>-or-</para><para>
            Zero if <see cref="P:Tektosyne.Geometry.LineF.Length"/> equals zero.</para></value>
            <remarks><para>
            <b>Angle</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the vertical and
            horizontal distances between the <see cref="F:Tektosyne.Geometry.LineF.End"/> and <see cref="F:Tektosyne.Geometry.LineF.Start"/> points.
            </para><para>
            <b>Angle</b> equals zero if the <see cref="T:Tektosyne.Geometry.LineF"/> extends horizontally to the right,
            and increases as the line turns clockwise (y-axis pointing downward) or
            counter-clockwise (y-axis pointing upward). The possible range of values is (-<see
            cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineF.InverseSlope">
            <summary>
            Gets the inverse slope of the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <value><para>
            The quotient of the horizontal and the vertical extent of the <see cref="T:Tektosyne.Geometry.LineF"/>.
            </para><para>-or-</para><para>
            <see cref="F:System.Single.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineF"/> is horizontal.</para></value>
            <remarks>
            <b>InverseSlope</b> may return a negative value, depending on the <see cref="P:Tektosyne.Geometry.LineF.Angle"/> of
            the <see cref="T:Tektosyne.Geometry.LineF"/>. The value of this property equals 1/<see cref="P:Tektosyne.Geometry.LineF.Slope"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineF.Length">
            <summary>
            Gets the absolute length of the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value indicating the absolute length of the line
            segment represented by the <see cref="T:Tektosyne.Geometry.LineF"/>.</value>
            <remarks>
            <b>Length</b> returns the square root of the sum of the squares of the horizontal and
            vertical distances between the <see cref="F:Tektosyne.Geometry.LineF.End"/> and <see cref="F:Tektosyne.Geometry.LineF.Start"/> points.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineF.LengthSquared">
            <summary>
            Gets the squared absolute length of the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <value>
            A non-negative <see cref="T:System.Single"/> value that equals the square of the <see
            cref="P:Tektosyne.Geometry.LineF.Length"/> property.</value>
            <remarks>
            <b>LengthSquared</b> performs the same operations as <see cref="P:Tektosyne.Geometry.LineF.Length"/> but without
            the final <see cref="M:System.Math.Sqrt(System.Double)"/> call, and is therefore faster if you only need the
            squared <see cref="P:Tektosyne.Geometry.LineF.Length"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineF.Slope">
            <summary>
            Gets the slope of the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <value><para>
            The quotient of the vertical and the horizontal extent of the <see cref="T:Tektosyne.Geometry.LineF"/>.
            </para><para>-or-</para><para>
            <see cref="F:System.Single.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineF"/> is vertical.</para></value>
            <remarks>
            <b>Slope</b> may return a negative value, depending on the <see cref="P:Tektosyne.Geometry.LineF.Angle"/> of the
            <see cref="T:Tektosyne.Geometry.LineF"/>. The value of this property equals 1/<see cref="P:Tektosyne.Geometry.LineF.InverseSlope"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineF.Vector">
            <summary>
            Gets the vector defined by the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointF"/> value defined as (<see cref="F:Tektosyne.Geometry.LineF.End"/> - <see cref="F:Tektosyne.Geometry.LineF.Start"/>).
            </value>
            <remarks>
            <b>Vector</b> returns the <see cref="F:Tektosyne.Geometry.LineF.End"/> point of the <see cref="T:Tektosyne.Geometry.LineF"/> with its
            <see cref="F:Tektosyne.Geometry.LineF.Start"/> point shifted to the origins of the coordinate system.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.DistanceSquared(Tektosyne.Geometry.PointF)">
            <summary>
            Determines the squared distance between the <see cref="T:Tektosyne.Geometry.LineF"/> and the specified <see
            cref="T:Tektosyne.Geometry.PointF"/> coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <returns>
            The squared distance between <paramref name="q"/> and the <see cref="T:Tektosyne.Geometry.LineF"/>.</returns>
            <remarks>
            <b>DistanceSquared</b> returns either the squared length of the perpendicular dropped
            from <paramref name="q"/> on the <see cref="T:Tektosyne.Geometry.LineF"/>, or the squared distance between
            <paramref name="q"/> and <see cref="F:Tektosyne.Geometry.LineF.Start"/> or <see cref="F:Tektosyne.Geometry.LineF.End"/> if the perpendicular
            does not intersect the <see cref="T:Tektosyne.Geometry.LineF"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.FindX(System.Single)">
            <summary>
            Finds the x-coordinate for the specified y-coordinate on the <see cref="T:Tektosyne.Geometry.LineF"/> or its
            infinite extension.</summary>
            <param name="y">
            The y-coordinate on the <see cref="T:Tektosyne.Geometry.LineF"/> to examine.</param>
            <returns><para>
            The x-coordinate for the specified <paramref name="y"/> coordinate on the <see
            cref="T:Tektosyne.Geometry.LineF"/> or its infinite extension.
            </para><para>-or-</para><para>
            <see cref="F:System.Single.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineF"/> is horizontal.</para></returns>
            <remarks>
            <b>FindX</b> returns the <see cref="F:Tektosyne.Geometry.PointF.X"/> component of <see cref="F:Tektosyne.Geometry.LineF.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineF.End"/> if the specified <paramref name="y"/> coordinate exactly equals the
            corresponding <see cref="F:Tektosyne.Geometry.PointF.Y"/> component; otherwise, a computed x-coordinate.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.FindY(System.Single)">
            <summary>
            Finds the y-coordinate for the specified x-coordinate on the <see cref="T:Tektosyne.Geometry.LineF"/> or its
            infinite extension.</summary>
            <param name="x">
            The x-coordinate on the <see cref="T:Tektosyne.Geometry.LineF"/> to examine.</param>
            <returns><para>
            The y-coordinate for the specified <paramref name="x"/> coordinate on the <see
            cref="T:Tektosyne.Geometry.LineF"/> or its infinite extension.
            </para><para>-or-</para><para>
            <see cref="F:System.Single.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineF"/> is vertical.</para></returns>
            <remarks>
            <b>FindY</b> returns the <see cref="F:Tektosyne.Geometry.PointF.Y"/> component of <see cref="F:Tektosyne.Geometry.LineF.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineF.End"/> if the specified <paramref name="x"/> coordinate exactly equals the
            corresponding <see cref="F:Tektosyne.Geometry.PointF.X"/> component; otherwise, a computed y-coordinate.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.LineF"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/>
            components of the <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see cref="F:Tektosyne.Geometry.LineF.End"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Intersect(Tektosyne.Geometry.LineF)">
            <overloads>
            Finds the intersection between the <see cref="T:Tektosyne.Geometry.LineF"/> and a specified line segment.
            </overloads>
            <summary>
            Finds the intersection between this instance and a specified <see cref="T:Tektosyne.Geometry.LineF"/>, using
            exact coordinate comparisons.</summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineF"/> to intersect with this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance that describes if and how the specified
            <paramref name="line"/> and this instance intersect.</returns>
            <remarks>
            <b>Intersect</b> returns the result of <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> for the <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see cref="F:Tektosyne.Geometry.LineF.End"/> points of this
            instance and of the specified <paramref name="line"/>, in that order.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Intersect(Tektosyne.Geometry.LineF,System.Single)">
            <summary>
            Finds the intersection between this instance and a specified <see cref="T:Tektosyne.Geometry.LineF"/>, given
            the specified epsilon for coordinate comparisons.</summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineF"/> to intersect with this instance.</param>
            <param name="epsilon">
            The maximum absolute difference at which coordinates and intermediate results should be
            considered equal. This value is always raised to a minium of 1e-10.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance that describes if and how the specified
            <paramref name="line"/> and this instance intersect.</returns>
            <remarks>
            <b>Intersect</b> returns the result of <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)"/> for the <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see cref="F:Tektosyne.Geometry.LineF.End"/> points of
            this instance and of the specified <paramref name="line"/>, in that order, and for the
            specified <paramref name="epsilon"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Intersect(Tektosyne.Geometry.PointF)">
            <summary>
            Finds the intersection between the <see cref="T:Tektosyne.Geometry.LineF"/> and the perpendicular dropped
            from the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates where the perpendicular dropped from <paramref
            name="q"/> intersects the <see cref="T:Tektosyne.Geometry.LineF"/> or its infinite extension.</returns>
            <remarks>
            <b>Intersect</b> returns <see cref="F:Tektosyne.Geometry.LineF.Start"/> if <see cref="P:Tektosyne.Geometry.LineF.Length"/> equals zero.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Locate(Tektosyne.Geometry.PointF)">
            <overloads>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineF"/>.</overloads>
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineF"/>, using exact coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineF"/>.</returns>
            <remarks><para>
            <b>Locate</b> never returns <see cref="F:Tektosyne.Geometry.LineLocation.None"/>. The values <see
            cref="F:Tektosyne.Geometry.LineLocation.Left"/> and <see cref="F:Tektosyne.Geometry.LineLocation.Right"/> assume that
            y-coordinates increase upward.
            </para><para>
            <b>Locate</b> is based on the <c>classify</c> algorithm by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.76.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Locate(Tektosyne.Geometry.PointF,System.Single)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineF"/>, given the specified epsilon for coordinate comparisons.
            </summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <param name="epsilon">
            The maximum absolute value at which intermediate results should be considered zero.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineF"/>.</returns>
            <remarks><para>
            <b>Locate</b> is identical with the basic <see cref="M:Tektosyne.Geometry.LineF.Locate(Tektosyne.Geometry.PointF)"/> overload but uses
            the specified <paramref name="epsilon"/> to compare intermediate results to zero.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Locate</b>
            does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.LocateCollinear(Tektosyne.Geometry.PointF)">
            <overloads>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineF"/>, assuming they are collinear.</overloads>
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineF"/>, assuming they are collinear and using exact coordinate
            comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineF"/>.</returns>
            <remarks>
            <b>LocateCollinear</b> is identical with <see cref="M:Tektosyne.Geometry.LineF.Locate(Tektosyne.Geometry.PointF)"/> but assumes that <paramref
            name="q"/> is collinear with the <see cref="T:Tektosyne.Geometry.LineF"/>, and therefore never returns the
            values <see cref="F:Tektosyne.Geometry.LineLocation.Left"/> or <see cref="F:Tektosyne.Geometry.LineLocation.Right"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.LocateCollinear(Tektosyne.Geometry.PointF,System.Single)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineF"/>, assuming they are collinear and given the specified epsilon for
            coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <param name="epsilon">
            The maximum absolute value at which intermediate results should be considered zero.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineF"/>.</returns>
            <remarks><para>
            <b>LocateCollinear</b> is identical with the basic <see cref="M:Tektosyne.Geometry.LineF.LocateCollinear(Tektosyne.Geometry.PointF)"/>
            overload but uses the specified <paramref name="epsilon"/> to compare <paramref
            name="q"/> to the <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see cref="F:Tektosyne.Geometry.LineF.End"/> points.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but
            <b>LocateCollinear</b> does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Reverse">
            <summary>
            Reverses the direction of the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.LineF"/> instance whose <see cref="F:Tektosyne.Geometry.LineF.Start"/> property equals the <see
            cref="F:Tektosyne.Geometry.LineF.End"/> property of this instance, and vice versa.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.LineF"/> to a <see cref="T:Tektosyne.Geometry.LineI"/> by rounding coordinates to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineI"/> instance whose <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineI.End"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.LineF"/>, rounded to the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Single"/> coordinates of the <see cref="T:Tektosyne.Geometry.LineF"/> are converted to <see
            cref="T:System.Int32"/> coordinates using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.ToLineI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.LineF"/> to a <see cref="T:Tektosyne.Geometry.LineI"/> by truncating coordinates to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineI"/> instance whose <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineI.End"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.LineF"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the coordinates of the <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineF.End"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.op_Equality(Tektosyne.Geometry.LineF,Tektosyne.Geometry.LineF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineF"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineF.Equals(Tektosyne.Geometry.LineF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.LineF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.op_Inequality(Tektosyne.Geometry.LineF,Tektosyne.Geometry.LineF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineF"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineF.Equals(Tektosyne.Geometry.LineF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.LineF"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.op_Implicit(Tektosyne.Geometry.LineI)~Tektosyne.Geometry.LineF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.LineI"/> to a <see cref="T:Tektosyne.Geometry.LineF"/> with identical coordinates.
            </summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.LineF"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineF"/> instance whose <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see cref="F:Tektosyne.Geometry.LineF.End"/>
            properties equal the corresponding properties of the specified <paramref name="line"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.op_Explicit(Tektosyne.Geometry.LineF)~Tektosyne.Geometry.LineI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.LineF"/> to a <see cref="T:Tektosyne.Geometry.LineI"/> by truncating coordinates to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.LineI"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineI"/> instance whose <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineI.End"/> properties equal the corresponding properties of the specified
            <paramref name="line"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineF"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.LineF"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.LineF"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.LineF"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineF"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineF"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.LineF.Equals(Tektosyne.Geometry.LineF)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Equals(Tektosyne.Geometry.LineF)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.LineF"/> have the same
            value.</summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineF"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="line"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.LineF.Start"/> and <see cref="F:Tektosyne.Geometry.LineF.End"/>
            properties of the two <see cref="T:Tektosyne.Geometry.LineF"/> instances to test for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Equals(Tektosyne.Geometry.LineF,Tektosyne.Geometry.LineF)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.LineF"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.LineF.Equals(Tektosyne.Geometry.LineF)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.LineF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineF.Equals(Tektosyne.Geometry.LineF,Tektosyne.Geometry.LineF,System.Single)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.LineF"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineF"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the coordinates of <paramref name="a"/>
            and <paramref name="b"/> is less than or equal to <paramref name="epsilon"/>; otherwise,
            <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.LineI">
            <summary>
            Represents a directed line segment in two-dimensional space, using <see cref="T:System.Int32"/>
            coordinates.</summary>
            <remarks><para>
            <b>LineI</b> is an immutable structure whose four <see cref="T:System.Int32"/> coordinates indicate
            the <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see cref="F:Tektosyne.Geometry.LineI.End"/> points of a directed line segment.
            Its <see cref="P:Tektosyne.Geometry.LineI.Angle"/> and <see cref="P:Tektosyne.Geometry.LineI.Length"/> are calculated on demand.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.LineF"/> structure to represent line segments with <see cref="T:System.Single"/>
            coordinates, and the <see cref="T:Tektosyne.Geometry.LineD"/> structure to represent line segments with <see
            cref="T:System.Double"/> coordinates.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineI"/> structure.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineI"/> structure with the specified start
            and end coordinates.</summary>
            <param name="startX">
            The <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineI.Start"/> point.</param>
            <param name="startY">
            The <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineI.Start"/> point.</param>
            <param name="endX">
            The <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineI.End"/> point.</param>
            <param name="endY">
            The the <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate of the <see cref="F:Tektosyne.Geometry.LineI.End"/> point.</param>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.#ctor(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineI"/> structure with the specified start
            and end coordinates.</summary>
            <param name="start">
            The <see cref="F:Tektosyne.Geometry.LineI.Start"/> point of the <see cref="T:Tektosyne.Geometry.LineI"/>.</param>
            <param name="end">
            The <see cref="F:Tektosyne.Geometry.LineI.End"/> point of the <see cref="T:Tektosyne.Geometry.LineI"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.LineI.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.LineI"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.LineI"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineI.Start">
            <summary>
            The start coordinates of the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineI.End">
            <summary>
            The end coordinates of the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.LineI.Angle">
            <summary>
            Gets the angle of the <see cref="T:Tektosyne.Geometry.LineI"/>, in radians.</summary>
            <value><para>
            The angle, in radians, of the direction on the Cartesian plane into which the line
            segment represented by the <see cref="T:Tektosyne.Geometry.LineI"/> is pointing.
            </para><para>-or-</para><para>
            Zero if <see cref="P:Tektosyne.Geometry.LineI.Length"/> equals zero.</para></value>
            <remarks><para>
            <b>Angle</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the vertical and
            horizontal distances between the <see cref="F:Tektosyne.Geometry.LineI.End"/> and <see cref="F:Tektosyne.Geometry.LineI.Start"/> points.
            </para><para>
            <b>Angle</b> equals zero if the <see cref="T:Tektosyne.Geometry.LineI"/> extends horizontally to the right,
            and increases as the line turns clockwise (y-axis pointing downward) or
            counter-clockwise (y-axis pointing upward). The possible range of values is (-<see
            cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineI.InverseSlope">
            <summary>
            Gets the inverse slope of the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <value><para>
            The quotient of the horizontal and the vertical extent of the <see cref="T:Tektosyne.Geometry.LineI"/>.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineI"/> is horizontal.</para></value>
            <remarks>
            <b>InverseSlope</b> may return a negative value, depending on the <see cref="P:Tektosyne.Geometry.LineI.Angle"/> of
            the <see cref="T:Tektosyne.Geometry.LineI"/>. The value of this property equals 1/<see cref="P:Tektosyne.Geometry.LineI.Slope"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineI.Length">
            <summary>
            Gets the absolute length of the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value indicating the absolute length of the line
            segment represented by the <see cref="T:Tektosyne.Geometry.LineI"/>.</value>
            <remarks>
            <b>Length</b> returns the square root of the sum of the squares of the horizontal and
            vertical distances between the <see cref="F:Tektosyne.Geometry.LineI.End"/> and <see cref="F:Tektosyne.Geometry.LineI.Start"/> points.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineI.LengthSquared">
            <summary>
            Gets the squared absolute length of the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <value>
            A non-negative <see cref="T:System.Int32"/> value that equals the square of the <see
            cref="P:Tektosyne.Geometry.LineI.Length"/> property.</value>
            <remarks>
            <b>LengthSquared</b> performs the same operations as <see cref="P:Tektosyne.Geometry.LineI.Length"/> but without
            the final <see cref="M:System.Math.Sqrt(System.Double)"/> call, and is therefore faster if you only need the
            squared <see cref="P:Tektosyne.Geometry.LineI.Length"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineI.Slope">
            <summary>
            Gets the slope of the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <value><para>
            The quotient of the vertical and the horizontal extent of the <see cref="T:Tektosyne.Geometry.LineI"/>.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineI"/> is vertical.</para></value>
            <remarks>
            <b>Slope</b> may return a negative value, depending on the <see cref="P:Tektosyne.Geometry.LineI.Angle"/> of the
            <see cref="T:Tektosyne.Geometry.LineI"/>. The value of this property equals 1/<see cref="P:Tektosyne.Geometry.LineI.InverseSlope"/>.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineI.Vector">
            <summary>
            Gets the vector defined by the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointI"/> value defined as (<see cref="F:Tektosyne.Geometry.LineI.End"/> - <see cref="F:Tektosyne.Geometry.LineI.Start"/>).
            </value>
            <remarks>
            <b>Vector</b> returns the <see cref="F:Tektosyne.Geometry.LineI.End"/> point of the <see cref="T:Tektosyne.Geometry.LineI"/> with its
            <see cref="F:Tektosyne.Geometry.LineI.Start"/> point shifted to the origins of the coordinate system.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.DistanceSquared(Tektosyne.Geometry.PointI)">
            <summary>
            Determines the squared distance between the <see cref="T:Tektosyne.Geometry.LineI"/> and the specified <see
            cref="T:Tektosyne.Geometry.PointI"/> coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to examine.</param>
            <returns>
            The squared distance between <paramref name="q"/> and the <see cref="T:Tektosyne.Geometry.LineI"/>.</returns>
            <remarks>
            <b>DistanceSquared</b> returns either the squared length of the perpendicular dropped
            from <paramref name="q"/> on the <see cref="T:Tektosyne.Geometry.LineI"/>, or the squared distance between
            <paramref name="q"/> and <see cref="F:Tektosyne.Geometry.LineI.Start"/> or <see cref="F:Tektosyne.Geometry.LineI.End"/> if the perpendicular
            does not intersect the <see cref="T:Tektosyne.Geometry.LineI"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.FindX(System.Double)">
            <summary>
            Finds the x-coordinate for the specified y-coordinate on the <see cref="T:Tektosyne.Geometry.LineI"/> or its
            infinite extension.</summary>
            <param name="y">
            The y-coordinate on the <see cref="T:Tektosyne.Geometry.LineI"/> to examine.</param>
            <returns><para>
            The x-coordinate for the specified <paramref name="y"/> coordinate on the <see
            cref="T:Tektosyne.Geometry.LineI"/> or its infinite extension.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineI"/> is horizontal.</para></returns>
            <remarks>
            <b>FindX</b> returns the <see cref="F:Tektosyne.Geometry.PointI.X"/> component of <see cref="F:Tektosyne.Geometry.LineI.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineI.End"/> if the specified <paramref name="y"/> coordinate exactly equals the
            corresponding <see cref="F:Tektosyne.Geometry.PointI.Y"/> component; otherwise, a computed x-coordinate.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.FindY(System.Double)">
            <summary>
            Finds the y-coordinate for the specified x-coordinate on the <see cref="T:Tektosyne.Geometry.LineI"/> or its
            infinite extension.</summary>
            <param name="x">
            The x-coordinate on the <see cref="T:Tektosyne.Geometry.LineI"/> to examine.</param>
            <returns><para>
            The y-coordinate for the specified <paramref name="x"/> coordinate on the <see
            cref="T:Tektosyne.Geometry.LineI"/> or its infinite extension.
            </para><para>-or-</para><para>
            <see cref="F:System.Double.MaxValue"/> if the <see cref="T:Tektosyne.Geometry.LineI"/> is vertical.</para></returns>
            <remarks>
            <b>FindY</b> returns the <see cref="F:Tektosyne.Geometry.PointI.Y"/> component of <see cref="F:Tektosyne.Geometry.LineI.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineI.End"/> if the specified <paramref name="x"/> coordinate exactly equals the
            corresponding <see cref="F:Tektosyne.Geometry.PointI.X"/> component; otherwise, a computed y-coordinate.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.LineI"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            components of the <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see cref="F:Tektosyne.Geometry.LineI.End"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.Intersect(Tektosyne.Geometry.LineI)">
            <overloads>
            Finds the intersection between the <see cref="T:Tektosyne.Geometry.LineI"/> and a specified line segment.
            </overloads>
            <summary>
            Finds the intersection between this instance and a specified <see cref="T:Tektosyne.Geometry.LineI"/>.
            </summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineI"/> to intersect with this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance that describes if and how the specified
            <paramref name="line"/> and this instance intersect.</returns>
            <remarks>
            <b>Intersect</b> returns the result of <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> for the <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see cref="F:Tektosyne.Geometry.LineI.End"/> points of this
            instance and of the specified <paramref name="line"/>, in that order.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.Intersect(Tektosyne.Geometry.PointI)">
            <summary>
            Finds the intersection between the <see cref="T:Tektosyne.Geometry.LineI"/> and the perpendicular dropped
            from the specified <see cref="T:Tektosyne.Geometry.PointI"/> coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates where the perpendicular dropped from <paramref
            name="q"/> intersects the <see cref="T:Tektosyne.Geometry.LineI"/> or its infinite extension.</returns>
            <remarks>
            <b>Intersect</b> returns <see cref="F:Tektosyne.Geometry.LineI.Start"/> if <see cref="P:Tektosyne.Geometry.LineI.Length"/> equals zero.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.Locate(Tektosyne.Geometry.PointI)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointI"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineI"/>.</returns>
            <remarks><para>
            <b>Locate</b> never returns <see cref="F:Tektosyne.Geometry.LineLocation.None"/>. The values <see
            cref="F:Tektosyne.Geometry.LineLocation.Left"/> and <see cref="F:Tektosyne.Geometry.LineLocation.Right"/> assume that
            y-coordinates increase upward.
            </para><para>
            <b>Locate</b> is based on the <c>classify</c> algorithm by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.76.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.LocateCollinear(Tektosyne.Geometry.PointI)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointI"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.LineI"/>, assuming they are collinear.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.LineI"/>.</returns>
            <remarks>
            <b>LocateCollinear</b> is identical with <see cref="M:Tektosyne.Geometry.LineI.Locate(Tektosyne.Geometry.PointI)"/> but assumes that <paramref
            name="q"/> is collinear with the <see cref="T:Tektosyne.Geometry.LineI"/>, and therefore never returns the
            values <see cref="F:Tektosyne.Geometry.LineLocation.Left"/> or <see cref="F:Tektosyne.Geometry.LineLocation.Right"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.Reverse">
            <summary>
            Reverses the direction of the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.LineI"/> instance whose <see cref="F:Tektosyne.Geometry.LineI.Start"/> property equals the <see
            cref="F:Tektosyne.Geometry.LineI.End"/> property of this instance, and vice versa.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.LineI"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the coordinates of the <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see
            cref="F:Tektosyne.Geometry.LineI.End"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.op_Equality(Tektosyne.Geometry.LineI,Tektosyne.Geometry.LineI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineI"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineI.Equals(Tektosyne.Geometry.LineI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.LineI"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.op_Inequality(Tektosyne.Geometry.LineI,Tektosyne.Geometry.LineI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineI"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineI.Equals(Tektosyne.Geometry.LineI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.LineI"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineI"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.LineI"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.LineI"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.LineI"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineI"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineI"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.LineI.Equals(Tektosyne.Geometry.LineI)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.Equals(Tektosyne.Geometry.LineI)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.LineI"/> have the same
            value.</summary>
            <param name="line">
            A <see cref="T:Tektosyne.Geometry.LineI"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="line"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.LineI.Start"/> and <see cref="F:Tektosyne.Geometry.LineI.End"/>
            properties of the two <see cref="T:Tektosyne.Geometry.LineI"/> instances to test for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineI.Equals(Tektosyne.Geometry.LineI,Tektosyne.Geometry.LineI)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.LineI"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.LineI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.LineI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.LineI.Equals(Tektosyne.Geometry.LineI)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.LineI"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.LineIntersection">
            <summary>
            Provides algorithms to find the intersection of two line segments.</summary>
            <remarks><para>
            <b>LineIntersection</b> is an immutable structure that describes the intersection of two
            line segments. This includes the absolute and relative locations of the intersection point
            and the spatial relationship between the intersected line segments.
            </para><para>
            <b>LineIntersection</b> also provides a static <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> method 
            that determines the intersection of two specified line segments, defined by the <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates of their start and end points.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.#ctor(Tektosyne.Geometry.LineRelation)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineIntersection"/> structure.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineIntersection"/> structure with the
            specified spatial relationship between the intersected lines.</summary>
            <param name="relation">
            The spatial relationship between the two line segments.</param>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.LineIntersection.First"/>, <see cref="F:Tektosyne.Geometry.LineIntersection.Second"/>, and <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> properties
            remain at their default values. Use this constructor for collinear or parallel line
            segments that share no points.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.#ctor(System.Nullable{Tektosyne.Geometry.PointD},Tektosyne.Geometry.LineLocation,Tektosyne.Geometry.LineLocation,Tektosyne.Geometry.LineRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.LineIntersection"/> structure with the
            specified shared coordinates, relative locations, and spatial relationship between the
            intersected lines.</summary>
            <param name="shared">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates shared by the two line segments or their infinite
            extensions.</param>
            <param name="first">
            The location of the <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> coordinates relative to the first line segment.
            </param>
            <param name="second">
            The location of the <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> coordinates relative to the second line
            segment.</param>
            <param name="relation">
            The spatial relationship between the two line segments.</param>
        </member>
        <member name="P:Tektosyne.Geometry.LineIntersection.Exists">
            <summary>
            Gets a value indicating whether both line segments contain the <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/>
            coordinates.</summary>
            <value>
            <c>true</c> if both <see cref="F:Tektosyne.Geometry.LineIntersection.First"/> and <see cref="F:Tektosyne.Geometry.LineIntersection.Second"/> equal either <see
            cref="F:Tektosyne.Geometry.LineLocation.Start"/>, <see cref="F:Tektosyne.Geometry.LineLocation.Between"/>, or <see
            cref="F:Tektosyne.Geometry.LineLocation.End"/>; otherwise, <c>false</c>.</value>
            <remarks><para>
            <b>Exists</b> requires that both <see cref="F:Tektosyne.Geometry.LineIntersection.First"/> and <see cref="F:Tektosyne.Geometry.LineIntersection.Second"/> equal one
            of the indicated <see cref="T:Tektosyne.Geometry.LineLocation"/> values, but not necessarily the same value.
            </para><para>
            <b>Exists</b> indicates whether the two line segments themselves intersect. The <see
            cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> coordinates may be valid even if <b>Exists</b> is <c>false</c>,
            indicating an intersection of the infinite extensions of either or both line segments.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.LineIntersection.ExistsBetween">
            <summary>
            Gets a value indicating whether both line segments contain the <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/>
            coordinates, excluding the end points of at least one line segment.</summary>
            <value>
            <c>true</c> if either <see cref="F:Tektosyne.Geometry.LineIntersection.First"/> or <see cref="F:Tektosyne.Geometry.LineIntersection.Second"/> equals <see
            cref="F:Tektosyne.Geometry.LineLocation.Between"/>, and the other property equals either <see
            cref="F:Tektosyne.Geometry.LineLocation.Start"/>, <see cref="F:Tektosyne.Geometry.LineLocation.Between"/>, or <see
            cref="F:Tektosyne.Geometry.LineLocation.End"/>; otherwise, <c>false</c>.</value>
            <remarks>
            <b>ExistsBetween</b> indicates whether the two line segments themselves intersect.
            Unlike <see cref="P:Tektosyne.Geometry.LineIntersection.Exists"/>, at least one line segment must be properly intersected by
            the other, i.e. not just touched at an end point.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineIntersection.First">
            <summary>
            The location of the <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> coordinates relative to the first line segment.
            </summary>
            <remarks>
            <b>First</b> holds a <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of the
            <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> coordinates relative to the first line segment, or <see
            cref="F:Tektosyne.Geometry.LineLocation.None"/> if no intersection was found. The default is <see
            cref="F:Tektosyne.Geometry.LineLocation.None"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineIntersection.Relation">
            <summary>
            The spatial relationship between the two line segments.</summary>
            <remarks>
            <b>Relation</b> holds a <see cref="T:Tektosyne.Geometry.LineRelation"/> value indicating the spatial
            relationship between the two line segments. The default is <see
            cref="F:Tektosyne.Geometry.LineRelation.Parallel"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineIntersection.Second">
            <summary>
            The location of the <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> coordinates relative to the second line
            segment.</summary>
            <remarks>
            <b>Second</b> holds a <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of the
            <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> coordinates relative to the second line segment, or <see
            cref="F:Tektosyne.Geometry.LineLocation.None"/> if no intersection was found. The default is <see
            cref="F:Tektosyne.Geometry.LineLocation.None"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineIntersection.Shared">
            <summary>
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates shared by the two line segments or their infinite
            extensions.</summary>
            <remarks><para>
            <b>Shared</b> holds the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates shared by the two line segments
            or their infinite extensions, or a null reference if no intersection was found. The
            default is a null reference.
            </para><para>
            Valid <b>Shared</b> coordinates are generally computed, but may be copied from the <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> or <see cref="F:Tektosyne.Geometry.LineD.End"/> points of an intersecting line if <see
            cref="F:Tektosyne.Geometry.LineIntersection.First"/> and/or <see cref="F:Tektosyne.Geometry.LineIntersection.Second"/> equals <see cref="F:Tektosyne.Geometry.LineLocation.Start"/> or
            <see cref="F:Tektosyne.Geometry.LineLocation.End"/>.
            </para><para>
            <b>Shared</b> holds the following special values if <see cref="F:Tektosyne.Geometry.LineIntersection.Relation"/> equals <see
            cref="F:Tektosyne.Geometry.LineRelation.Collinear"/>:
            </para><list type="bullet"><item>
            If the two line segments overlap, <b>Shared</b> is not computed but set directly to the
            <see cref="F:Tektosyne.Geometry.LineD.Start"/> or <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the second line segment,
            whichever is contained by the first line segment and is lexicographically smaller,
            according to <see cref="T:Tektosyne.Geometry.PointDComparerY"/>.
            </item><item>
            Otherwise, <b>Shared</b> is set to a null reference, even though the infinite extensions
            of the line segments share all their points.</item></list></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.Contains(Tektosyne.Geometry.LineLocation)">
            <summary>
            Determines whether the specified <see cref="T:Tektosyne.Geometry.LineLocation"/> value specifies that the
            tested line segment contains the tested point.</summary>
            <param name="location">
            The <see cref="T:Tektosyne.Geometry.LineLocation"/> value to examine.</param>
            <returns>
            <c>true</c> if <paramref name="location"/> equals <see cref="F:Tektosyne.Geometry.LineLocation.Start"/>, <see
            cref="F:Tektosyne.Geometry.LineLocation.Between"/>, or <see cref="F:Tektosyne.Geometry.LineLocation.End"/>; otherwise,
            <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> uses a bit mask for efficient testing of the specified <paramref
            name="location"/> for the three acceptable <see cref="T:Tektosyne.Geometry.LineLocation"/> values.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <overloads>
            Finds the intersection of the specified line segments.</overloads>
            <summary>
            Finds the intersection of the specified line segments, using exact coordinate
            comparisons.</summary>
            <param name="a">
            The <see cref="F:Tektosyne.Geometry.LineD.Start"/> point of the first line segment.</param>
            <param name="b">
            The <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the first line segment.</param>
            <param name="c">
            The <see cref="F:Tektosyne.Geometry.LineD.Start"/> point of the second line segment.</param>
            <param name="d">
            The <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the second line segment.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance that describes if and how the line segments
            from <paramref name="a"/> to <paramref name="b"/> and from <paramref name="c"/> to
            <paramref name="d"/> intersect.</returns>
            <remarks><para>
            <b>Find</b> was adapted from the <c>Segments-Intersect</c> algorithm by Thomas H. Cormen
            et al., <em>Introduction to Algorithms</em> (3rd ed.), The MIT Press 2009, p.1018, for
            intersection testing; and from the <c>SegSegInt</c> and <c>ParallelInt</c> algorithms by
            Joseph O’Rourke, <em>Computational Geometry in C</em> (2nd ed.), Cambridge University
            Press 1998, p.224f, for line relationships and shared coordinates.
            </para><para>
            Cormen’s intersection testing first examines the <see cref="M:Tektosyne.Geometry.PointD.CrossProductLength(Tektosyne.Geometry.PointD)"/>
            for each triplet of specified points. If that is insufficient, O’Rourke’s algorithm then
            examines the parameters of both line equations. This is mathematically redundant since
            O’Rourke’s algorithm alone should produce all desired information, but the combination
            of both algorithms proved much more resilient against misjudging line relationships due
            to floating-point inaccuracies.
            </para><para>
            Although most comparisons in this overload are exact, cross-product testing is always
            performed with a minimum epsilon of 1e-10. Moreover, <b>Find</b> will return the result
            of the other <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)"/> overload with an
            epsilon of 2e-10 if cross-product testing contradicts line equation testing. Subsequent
            contradictions result in further recursive calls, each time with a doubled epsilon,
            until an intersection can be determined without contradictions.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Finds the intersection of the specified line segments, given the specified epsilon for
            coordinate comparisons.</summary>
            <param name="a">
            The <see cref="F:Tektosyne.Geometry.LineD.Start"/> point of the first line segment.</param>
            <param name="b">
            The <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the first line segment.</param>
            <param name="c">
            The <see cref="F:Tektosyne.Geometry.LineD.Start"/> point of the second line segment.</param>
            <param name="d">
            The <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the second line segment.</param>
            <param name="epsilon">
            The maximum absolute difference at which coordinates and intermediate results should be
            considered equal. This value is always raised to a minium of 1e-10.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance that describes if and how the line segments
            from <paramref name="a"/> to <paramref name="b"/> and from <paramref name="c"/> to
            <paramref name="d"/> intersect.</returns>
            <remarks><para>
            <b>Find</b> is identical with the basic <see cref="M:Tektosyne.Geometry.LineIntersection.Find(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> overload but uses the specified <paramref name="epsilon"/> to compare
            coordinates and intermediate results.
            </para><para>
            <b>Find</b> always raises the specified <paramref name="epsilon"/> to a minimum of 1e-10
            because the algorithm is otherwise too unstable, and would initiate multiple recursions
            with a greater epsilon anyway.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.LocateCollinear(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <overloads>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the specified line segment, assuming they are collinear.</overloads>
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the specified line segment, assuming they are collinear and using exact coordinate
            comparisons.</summary>
            <param name="a">
            The <see cref="F:Tektosyne.Geometry.LineD.Start"/> point of the line segment.</param>
            <param name="b">
            The <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the line segment.</param>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the line segment from <paramref name="a"/> to <paramref name="b"/>.
            </returns>
            <remarks>
            <b>LocateCollinear</b> is identical with the <see cref="M:Tektosyne.Geometry.LineD.LocateCollinear(Tektosyne.Geometry.PointD)"/> 
            instance method of the <see cref="T:Tektosyne.Geometry.LineD"/> structure but takes the start and end points
            of the line segment as explicit parameters.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.LocateCollinear(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the specified line segment, assuming they are collinear and given the specified epsilon
            for coordinate comparisons.</summary>
            <param name="a">
            The <see cref="F:Tektosyne.Geometry.LineD.Start"/> point of the line segment.</param>
            <param name="b">
            The <see cref="F:Tektosyne.Geometry.LineD.End"/> point of the line segment.</param>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <param name="epsilon">
            The maximum absolute value at which intermediate results should be considered zero.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineLocation"/> value indicating the location of <paramref name="q"/>
            relative to the line segment from <paramref name="a"/> to <paramref name="b"/>.
            </returns>
            <remarks><para>
            <b>LocateCollinear</b> is identical with the <see cref="M:Tektosyne.Geometry.LineD.LocateCollinear(Tektosyne.Geometry.PointD,System.Double)"/> instance method of the <see cref="T:Tektosyne.Geometry.LineD"/> structure but takes the start and
            end points of the line segment as explicit parameters.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but
            <b>LocateCollinear</b> does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> returns the result of <see cref="M:Tektosyne.Geometry.PointD.GetHashCode"/> for the <see
            cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> property, if valid; otherwise, zero.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.LineIntersection"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/>, <see
            cref="F:Tektosyne.Geometry.LineIntersection.First"/>, <see cref="F:Tektosyne.Geometry.LineIntersection.Second"/>, and <see cref="F:Tektosyne.Geometry.LineIntersection.Relation"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.op_Equality(Tektosyne.Geometry.LineIntersection,Tektosyne.Geometry.LineIntersection)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineIntersection"/> instances have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.LineIntersection"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.LineIntersection"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineIntersection.Equals(Tektosyne.Geometry.LineIntersection)"/> method to test the two
            <see cref="T:Tektosyne.Geometry.LineIntersection"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.op_Inequality(Tektosyne.Geometry.LineIntersection,Tektosyne.Geometry.LineIntersection)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineIntersection"/> instances have different values.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.LineIntersection"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.LineIntersection"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.LineIntersection.Equals(Tektosyne.Geometry.LineIntersection)"/> method to test the two
            <see cref="T:Tektosyne.Geometry.LineIntersection"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.LineIntersection"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance and a specified object,
            which must be a <see cref="T:Tektosyne.Geometry.LineIntersection"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineIntersection"/> instance
            and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.LineIntersection"/>
            instance, <b>Equals</b> invokes the strongly-typed <see
            cref="M:Tektosyne.Geometry.LineIntersection.Equals(Tektosyne.Geometry.LineIntersection)"/> overload to test the two instances for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.Equals(Tektosyne.Geometry.LineIntersection)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.LineIntersection"/> have the
            same value.</summary>
            <param name="other">
            A <see cref="T:Tektosyne.Geometry.LineIntersection"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="other"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.LineIntersection.First"/>, <see cref="F:Tektosyne.Geometry.LineIntersection.Second"/>, <see
            cref="F:Tektosyne.Geometry.LineIntersection.Relation"/>, and <see cref="F:Tektosyne.Geometry.LineIntersection.Shared"/> properties of the two <see
            cref="T:Tektosyne.Geometry.LineIntersection"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.LineIntersection.Equals(Tektosyne.Geometry.LineIntersection,Tektosyne.Geometry.LineIntersection)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.LineIntersection"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.LineIntersection"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.LineIntersection"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.LineIntersection.Equals(Tektosyne.Geometry.LineIntersection)"/> overload to
            test the two <see cref="T:Tektosyne.Geometry.LineIntersection"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.LineLocation">
            <summary>
            Specifies the location of a point relative to a directed line segment.</summary>
            <remarks>
            All <b>LineLocation</b> values except <see cref="F:Tektosyne.Geometry.LineLocation.None"/> are powers of two,
            even though the enumeration does not have the <see cref="T:System.FlagsAttribute"/>. This allows
            using a bit mask for efficient testing of multiple alternative values.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.None">
            <summary>
            Specifies that the point’s location is unknown or does not exist.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.Before">
            <summary>
            Specifies that the point is collinear with the line segment and located before its start
            point on its infinite extension.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.Start">
            <summary>
            Specifies that the point coincides with the start point.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.Between">
            <summary>
            Specifies that the point is collinear with the line segment and located between its
            start and end point, exclusively.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.End">
            <summary>
            Specifies that the point coincides with the end point.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.After">
            <summary>
            Specifies that the point is collinear with the line segment and located after its end
            point on its infinite extension.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.Left">
            <summary>
            Specifies that the point is not collinear with the line segment and located to the left
            of its infinite extension, viewed from start point to end point.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineLocation.Right">
            <summary>
            Specifies that the point is not collinear with the line segment and located to the right
            of its infinite extension, viewed from start point to end point.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.LineRelation">
            <summary>
            Specifies the spatial relationship between two line segments.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineRelation.Parallel">
            <summary>
            Specifies that the two line segments are parallel displacements of each other, and
            therefore cannot share any points.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineRelation.Collinear">
            <summary>
            Specifies that the two line segments are part of the same infinite line, and therefore
            may share some or all their points.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.LineRelation.Divergent">
            <summary>
            Specifies that the two line segments have different angles, and therefore may share a
            single point of intersection.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.MoveEdgeResult">
            <summary>
            Specifies the possible results of the <see cref="M:Tektosyne.Geometry.SubdivisionFace.MoveEdge(Tektosyne.Geometry.SubdivisionEdge)"/> method of the
            <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> class.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MoveEdgeResult.Unchanged">
            <summary>
            Neither the half-edge nor its twin equals <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> or any
            <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> element. No properties were changed.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MoveEdgeResult.OuterChanged">
            <summary>
            The half-edge or its twin equals <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/>, and that
            property was changed to another <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MoveEdgeResult.InnerChanged">
            <summary>
            The half-edge or its twin equals an <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> element,
            and that element was changed to another <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MoveEdgeResult.InnerRemoved">
            <summary>
            The half-edge or its twin equals an <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> element,
            and that element was removed since its cycle contains no other half-edges.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.MultiLineIntersection">
            <summary>
            Provides algorithms to find all intersections between multiple line segments.</summary>
            <remarks><para>
            <b>MultiLineIntersection</b> provides two algorithms to find all intersections between
            multiple line segments, specified as arrays of <see cref="T:Tektosyne.Geometry.LineD"/> instances:
            </para><list type="bullet"><item>
            <see cref="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])"/> provides a sweep line algorithm which is very
            efficient if the number of intersections is much smaller than the number of lines.
            </item><item>
            <see cref="M:Tektosyne.Geometry.MultiLineIntersection.FindSimple(Tektosyne.Geometry.LineD[])"/> provides a brute force algorithm which is
            better suited for a small number of lines or a large number of intersections.
            </item></list><para>
            Both algorithms sort their results lexicographically on the points of intersection, first by
            increasing y-coordinates and in case of equality by increasing x-coordinates. The <see
            cref="T:Tektosyne.Geometry.MultiLinePoint"/> instance created for each point identifies all line segments that
            contain the point. Please refer to the two methods for further details.
            </para><para>
            The sweep line algorithm implemented by <see cref="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])"/> was first
            described by J. L. Bentley and T. A. Ottmann, <em>Algorithms for reporting and counting
            geometric intersections</em>, IEEE Transactions on Computers C-28 (1979), p.643-647. An
            implementation outline is given by Mark de Berg et al., <em>Computational Geometry</em> (3rd
            ed.), Springer-Verlag 2008, p.20-29, and a limited C++ implementation by Michael J. Laszlo,
            <em>Computational Geometry and Computer Graphics in C++</em>, Prentice Hall 1996, p.173-181.
            </para><para>
            Our implementation supports an unlimited number of line segments meeting at any intersection
            point, and uses an improved sweep line comparer that raises the algorithm’s stability to the
            same level as that of the brute force algorithm. A comment block at the top of the source
            code file gives a detailed description of this comparer.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])">
            <summary>
            Finds all intersections between the specified line segments, using a sweep line
            algorithm.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> instances to intersect.
            </param>
            <returns>
            A lexicographically sorted <see cref="T:System.Array"/> containing a <see cref="T:Tektosyne.Geometry.MultiLinePoint"/>
            for every point of intersection between the <paramref name="lines"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="lines"/> contains a <see cref="T:Tektosyne.Geometry.LineD"/> instance whose <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> coordinates are equal.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lines"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="lines"/> contains coordinates that caused corruption to an internal
            search structure.</exception>
            <remarks><para>
            <b>Find</b> moves a horizontal sweep line across the specified <paramref name="lines"/>,
            testing only those elements for intersection which are adjacent along the sweep line.
            The runtime is O((n + k) log n) where k is the number of discovered intersections.
            </para><para>
            <b>Find</b> is very efficient when there are no or few intersections, achieving its best
            performance if the specified <paramref name="lines"/> are horizontal parallels. However,
            the event point schedule and sweep line structure impose a large overhead if there are
            many candidate lines to consider. The worst case of O(n^2) intersections is much slower
            than the brute force algorithm implemented by <see cref="M:Tektosyne.Geometry.MultiLineIntersection.FindSimple(Tektosyne.Geometry.LineD[])"/>.
            </para><para>
            <b>Find</b> always uses exact coordinate comparisons. Epsilon comparisons would corrupt
            the internal search structures due to the merging of nearby event points. Call <see
            cref="M:Tektosyne.Geometry.MultiLineIntersection.FindSimple(Tektosyne.Geometry.LineD[],System.Double)"/> to use epsilon comparisons.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.FindSimple(Tektosyne.Geometry.LineD[])">
            <overloads>
            Finds all intersections between the specified line segments, using a brute force
            algorithm.</overloads>
            <summary>
            Finds all intersections between the specified line segments, using a brute force
            algorithm and exact coordinate comparisons.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> instances to intersect.
            </param>
            <returns>
            A lexicographically sorted <see cref="T:System.Array"/> containing a <see cref="T:Tektosyne.Geometry.MultiLinePoint"/>
            for every point of intersection between the <paramref name="lines"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lines"/> is a null reference.</exception>
            <remarks><para>
            <b>FindSimple</b> performs a pairwise intersection of every <paramref name="lines"/>
            element with every other element. The runtime is therefore always O(n^2), regardless of
            the number of intersections found.
            </para><para>
            However, the constant factor is low and O(n^2) intersections are found in optimal time
            because <b>FindSimple</b> performs no additional work to avoid testing for possible
            intersections. For a small number of <paramref name="lines"/> (n &lt; 50),
            <b>FindSimple</b> usually beats the sweep line algorithm implemented by <see
            cref="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])"/> regardless of the number of intersections.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.FindSimple(Tektosyne.Geometry.LineD[],System.Double)">
            <summary>
            Finds all intersections between the specified line segments, using a brute force
            algorithm and given the specified epsilon for coordinate comparisons.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> instances to intersect.
            </param>
            <param name="epsilon">
            The maximum absolute difference at which two coordinates should be considered equal.
            </param>
            <returns>
            A lexicographically sorted <see cref="T:System.Array"/> containing a <see cref="T:Tektosyne.Geometry.MultiLinePoint"/>
            for every point of intersection between the <paramref name="lines"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lines"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is equal to or less than zero.</exception>
            <remarks>
            <b>FindSimple</b> is identical with the basic <see cref="M:Tektosyne.Geometry.MultiLineIntersection.FindSimple(Tektosyne.Geometry.LineD[])"/> overload
            but uses the specified <paramref name="epsilon"/> to determine intersections between the
            specified <paramref name="lines"/> and to combine nearby intersections.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Split(Tektosyne.Geometry.LineD[],Tektosyne.Geometry.MultiLinePoint[])">
            <summary>
            Splits the specified line segments on the specified intersection points.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> instances to split.</param>
            <param name="crossings">
            An <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances containing all points
            of intersection between the <paramref name="lines"/>.</param>
            <returns>
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> instances resulting from
            splitting all <paramref name="lines"/> on the matching <paramref name="crossings"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lines"/> or <paramref name="crossings"/> is a null reference.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="crossings"/> contains one or more <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/>
            indices that are equal to or greater than the number of <paramref name="lines"/>.
            </exception>
            <remarks><para>
            <b>Split</b> returns a collection of line segments that are guaranteed not to intersect,
            except at their <see cref="F:Tektosyne.Geometry.LineD.Start"/> or <see cref="F:Tektosyne.Geometry.LineD.End"/> points. The
            specified <paramref name="crossings"/> are usually the result of <see cref="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])"/> or
            <see cref="M:Tektosyne.Geometry.MultiLineIntersection.FindSimple(Tektosyne.Geometry.LineD[])"/> for the specified <paramref name="lines"/>. 
            </para><para>
            <b>Split</b> sets the <see cref="F:Tektosyne.Geometry.LineD.Start"/> or <see cref="F:Tektosyne.Geometry.LineD.End"/> point of any
            line segment that participates in a <see cref="F:Tektosyne.Geometry.LineLocation.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineLocation.End"/> intersection to the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/>
            coordinates of that intersection, so as to preserve coordinate identities that were
            established by a positive comparison epsilon.</para></remarks>
        </member>
        <member name="T:Tektosyne.Geometry.MultiLineIntersection.Status">
            <summary>
            Implements the sweep line algorithm exposed by <see cref="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])"/>.</summary>
            <remarks>
            <b>Status</b> and the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> structure provide all methods and data
            structures required by the sweep line algorithm. Each call to <see cref="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])"/> creates
            a new <b>Status</b> instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Status.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.Status"/> class.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.Status.Cursor">
            <summary>
            The coordinates of the current <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> on the sweep line.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.Status.Crossings">
            <summary>
            All input line intersections that were discovered so far.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.Status.Lines">
            <summary>
            All input lines whose intersections are to be found.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.Status.Positions">
            <summary>
            The position at which the corresponding input line intersected the sweep line at the
            last event that was not an end point event.</summary>
            <remarks>
            Each <b>Positions</b> element holds the x-coordinate where the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Lines"/>
            element with the same index intersects the current sweep line.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.Status.Schedule">
            <summary>
            All event points that were discovered so far but not yet processed, sorted
            lexicographically by increasing y- and then x-coordinates.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.Status.SweepLine">
            <summary>
            All input lines that intersect the horizontal sweep line, sorted by increasing
            x-coordinates of the intersection, then by increasing slopes.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.Status.Slopes">
            <summary>
            The precomputed inverse slope of the corresponding input line.</summary>
            <remarks>
            Each <b>Slopes</b> element holds the precomputed <see cref="P:Tektosyne.Geometry.LineD.InverseSlope"/> of
            the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Lines"/> element with the same index.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Status.FindCore(Tektosyne.Geometry.LineD[])">
            <summary>
            Finds all intersections between the specified line segments, using a sweep line
            algorithm.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> segments to intersect.
            </param>
            <returns>
            A lexicographically sorted <see cref="T:System.Collections.Generic.List`1"/> containing the final <see
            cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> for every point of intersection between two or more <paramref
            name="lines"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="lines"/> contains a <see cref="T:Tektosyne.Geometry.LineD"/> whose <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> coordinates are equal.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lines"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="lines"/> contains coordinates that caused corruption to an internal
            search structure.</exception>
            <remarks>
            <b>FindCore</b> creates the intermediate output which is further processed by one of
            the <see cref="M:Tektosyne.Geometry.MultiLineIntersection.Find(Tektosyne.Geometry.LineD[])"/> overloads.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Status.AddCrossing(Tektosyne.Collections.BraidedTreeNode{System.Int32,System.Int32},Tektosyne.Collections.BraidedTreeNode{System.Int32,System.Int32},Tektosyne.Geometry.MultiLineIntersection.EventPoint)">
            <summary>
            Adds an intersection <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> to the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Schedule"/> if the
            two specified <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.SweepLine"/> nodes indicate a line crossing.</summary>
            <param name="a">
            The first <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.SweepLine"/> node to examine.</param>
            <param name="b">
            The second <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.SweepLine"/> node to examine.</param>
            <param name="e">
            The current <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> which receives a detected crossing that occurs
            exactly at the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Cursor"/>.</param>
            <remarks>
            If the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Schedule"/> already contains an <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> for the
            computed intersection, <b>AddCrossing</b> adds the indicated lines to the existing
            <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> if they are not already present.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Status.BuildSchedule(Tektosyne.Geometry.LineD[])">
            <summary>
            Builds the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Schedule"/> and precomputes all <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Slopes"/>.
            </summary>
            <param name="lines">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.LineD"/> segments to intersect.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="lines"/> contains a <see cref="T:Tektosyne.Geometry.LineD"/> whose <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> coordinates are equal.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lines"/> is a null reference.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Status.CompareLines(System.Int32,System.Int32)">
            <summary>
            Compares two specified <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Lines"/> indices and returns an indication of
            their <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.SweepLine"/> ordering.</summary>
            <param name="a">
            The zero-based index of the first <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Lines"/> element to compare.</param>
            <param name="b">
            The zero-based index of the second <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Lines"/> element to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term><description>
            <paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term><description>
            <paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term><description>
            <paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.Status.HandleEvent(Tektosyne.Geometry.MultiLineIntersection.EventPoint)">
            <summary>
            Handles the specified <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> that was just removed from the <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Schedule"/>.</summary>
            <param name="e">
            The <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> to handle.</param>
            <remarks>
            <b>HandleEvent</b> always updates the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.SweepLine"/>, and possibly the <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Schedule"/> via <see cref="M:Tektosyne.Geometry.MultiLineIntersection.Status.AddCrossing(Tektosyne.Collections.BraidedTreeNode{System.Int32,System.Int32},Tektosyne.Collections.BraidedTreeNode{System.Int32,System.Int32},Tektosyne.Geometry.MultiLineIntersection.EventPoint)"/>.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint">
            <summary>
            Represents an event point encountered by any <see cref="T:Tektosyne.Geometry.MultiLineIntersection"/>
            algorithm.</summary>
            <remarks>
            <b>EventPoint</b> stores the immutable <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Shared"/> coordinates at
            which an event occurs, along with growing collections of all intersecting <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> and their relative <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.EventPoint.#ctor(Tektosyne.Geometry.PointD)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> structure.</summary>
            <param name="shared">
            The coordinates of the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines">
            <summary>
            The indices of all input lines that intersect at the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/>. The
            default is a null reference.</summary>
            <remarks>
            Each <b>Lines</b> element holds the index of one of the input <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.Status.Lines"/> that intersect at the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Shared"/> coordinates.
            </remarks>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations">
            <summary>
            The locations of all intersecting <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> with the same index relative
            to the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/>. The default is a null reference.</summary>
            <remarks>
            Each <b>Locations</b> element holds the <see cref="T:Tektosyne.Geometry.LineLocation"/> value for the
            <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> element with the same index, relative to the <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Shared"/> coordinates.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Shared">
            <summary>
            The coordinates of the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/>.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.EventPoint.AddLine(System.Int32,Tektosyne.Geometry.LineLocation)">
            <summary>
            Adds the specified line event to the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/>.</summary>
            <param name="line">
            The element to add to the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> collection.</param>
            <param name="location">
            The element to add to the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> collection.</param>
            <remarks>
            <b>AddLine</b> does not check whether the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> collection already
            contains the specified <paramref name="line"/>. The <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> and <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> collections are created if necessary.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Convert(System.Collections.Generic.ICollection{Tektosyne.Geometry.MultiLineIntersection.EventPoint})">
            <summary>
            Converts the specified <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/>
            instances into an <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances.
            </summary>
            <param name="crossings">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> instances to convert.
            </param>
            <returns>
            An <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances that contains the
            data from all elements found in <paramref name="crossings"/>, in the same order.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Normalize(Tektosyne.Geometry.LineD[])">
            <summary>
            Normalizes all <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> to match the corresponding <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/>.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> containing all input <see cref="T:Tektosyne.Geometry.LineD"/> segments.</param>
            <remarks><para>
            <b>Normalize</b> inverts any <see cref="F:Tektosyne.Geometry.LineLocation.Start"/> or <see
            cref="F:Tektosyne.Geometry.LineLocation.End"/> values in the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> collection whose
            corresponding <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> element indicates a <see cref="T:Tektosyne.Geometry.LineD"/> whose <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> points have the opposite orientation.
            </para><para>
            Therefore, the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> collection no longer reflects the sweep line
            direction, but rather the point at which the corresponding <see cref="T:Tektosyne.Geometry.LineD"/>
            touches the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Shared"/> coordinates. Call this method to prepare for output
            generation, after the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/> has been removed from the schedule of
            the sweep line algorithm.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLineIntersection.EventPoint.TryAddLines(System.Int32,Tektosyne.Geometry.LineLocation,System.Int32,Tektosyne.Geometry.LineLocation)">
            <summary>
            Adds the specified line events to the <see cref="T:Tektosyne.Geometry.MultiLineIntersection.EventPoint"/>, unless <see
            cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> already contains events for the same line.</summary>
            <param name="line1">
            The first element to add to the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> collection.</param>
            <param name="location1">
            The first element to add to the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> collection.</param>
            <param name="line2">
            The second element to add to the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> collection.</param>
            <param name="location2">
            The second element to add to the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> collection.</param>
            <remarks>
            <b>TryAddLines</b> skips either or both argument pairs if the <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/>
            collection already contains the corresponding element. The <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Lines"/> and
            <see cref="F:Tektosyne.Geometry.MultiLineIntersection.EventPoint.Locations"/> collections are created if necessary.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.MultiLinePoint">
            <summary>
            Contains the results of the <see cref="T:Tektosyne.Geometry.MultiLineIntersection"/> algorithms.</summary>
            <remarks><para>
            <b>MultiLinePoint</b> is an immutable structure that represents one intersection point found
            by the <see cref="T:Tektosyne.Geometry.MultiLineIntersection"/> algorithms. The complete results are stored as a
            collection of zero or more <b>MultiLinePoint</b> instances.
            </para><para>
            <b>MultiLinePoint</b> holds the input indices of all intersecting <see
            cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/>, as well as their <see cref="F:Tektosyne.Geometry.MultiLinePoint.Locations"/>
            relative to the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/> coordinates.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.#ctor(Tektosyne.Geometry.PointD,System.Int32[],Tektosyne.Geometry.LineLocation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> structure with the
            specified shared coordinates, intersecting lines, and relative locations.</summary>
            <param name="shared">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates shared by all <paramref name="lines"/>.</param>
            <param name="lines">
            The input indices of all line segments that intersect at the <paramref name="shared"/>
            coordinates.</param>
            <param name="locations">
            The locations of the <paramref name="shared"/> coordinates relative to the <paramref
            name="lines"/> element with the same index.</param>
            <remarks>
            The specified <paramref name="lines"/> and <paramref name="locations"/> must contain the
            same number of elements, and that number must be greater than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLinePoint.Lines">
            <summary>
            The input indices of all line segments that intersect at the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/>
            coordinates.</summary>
            <remarks><para>
            <b>Lines</b> is an <see cref="T:System.Array"/> of zero-based indices, relative to the original
            input collection, which indicates the line segments that intersect at the <see
            cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/> coordinates. The default is a null reference.
            </para><para>
            For any <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> created by a <see cref="T:Tektosyne.Geometry.MultiLineIntersection"/>
            algorithm, <b>Lines</b> is always a valid <see cref="T:System.Array"/> with at least one element,
            and the same actual number of elements as <see cref="F:Tektosyne.Geometry.MultiLinePoint.Locations"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLinePoint.Locations">
            <summary>
            The locations of the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/> coordinates relative to the <see
            cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/> element with the same index.</summary>
            <remarks><para>
            <b>Locations</b> is an <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.LineLocation"/> values
            indicating the locations of the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/> coordinates relative to the <see
            cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/> element with the same index. The default is a null reference.
            </para><para>
            For any <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> created by a <see cref="T:Tektosyne.Geometry.MultiLineIntersection"/>
            algorithm, <b>Locations</b> is always a valid <see cref="T:System.Array"/> with at least one
            element, and the same actual number of elements as <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/>.
            </para><para>
            Since all <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/> are guaranteed to intersect at the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/>
            coordinates, each <b>Locations</b> element is either <see cref="F:Tektosyne.Geometry.LineLocation.Start"/>,
            <see cref="F:Tektosyne.Geometry.LineLocation.Between"/>, or <see cref="F:Tektosyne.Geometry.LineLocation.End"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.MultiLinePoint.Shared">
            <summary>
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates shared by all <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/>.</summary>
            <remarks><para>
            <b>Shared</b> holds the coordinates where all <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/> elements intersect.
            These coordinates are always computed (rather than copied) if all <see
            cref="F:Tektosyne.Geometry.MultiLinePoint.Locations"/> values equal <see cref="F:Tektosyne.Geometry.LineLocation.Between"/>.
            </para><para>
            Otherwise, the <b>Shared</b> coordinates are either computed, or copied from the <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> or <see cref="F:Tektosyne.Geometry.LineD.End"/> point of a <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/> element
            whose corresponding <see cref="F:Tektosyne.Geometry.MultiLinePoint.Locations"/> value equals <see
            cref="F:Tektosyne.Geometry.LineLocation.Start"/> or <see cref="F:Tektosyne.Geometry.LineLocation.End"/>, respectively.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> returns the result of <see cref="M:Tektosyne.Geometry.PointD.GetHashCode"/> for the <see
            cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/> property.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.MultiLinePoint"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the value of the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/> property, and
            the <see cref="P:System.Array.Length"/> of the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/> and <see cref="F:Tektosyne.Geometry.MultiLinePoint.Locations"/>
            properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.op_Equality(Tektosyne.Geometry.MultiLinePoint,Tektosyne.Geometry.MultiLinePoint)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.MultiLinePoint.Equals(Tektosyne.Geometry.MultiLinePoint)"/> method to test the two
            <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.op_Inequality(Tektosyne.Geometry.MultiLinePoint,Tektosyne.Geometry.MultiLinePoint)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances have different values.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.MultiLinePoint.Equals(Tektosyne.Geometry.MultiLinePoint)"/> method to test the two
            <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instance and a specified object,
            which must be a <see cref="T:Tektosyne.Geometry.MultiLinePoint"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instance
            and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.MultiLinePoint"/>
            instance, <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.MultiLinePoint.Equals(Tektosyne.Geometry.MultiLinePoint)"/>
            overload to test the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.Equals(Tektosyne.Geometry.MultiLinePoint)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> have the
            same value.</summary>
            <param name="other">
            A <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="other"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.MultiLinePoint.Shared"/>, <see cref="F:Tektosyne.Geometry.MultiLinePoint.Lines"/>, and
            <see cref="F:Tektosyne.Geometry.MultiLinePoint.Locations"/> properties of the two <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances to
            test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.MultiLinePoint.Equals(Tektosyne.Geometry.MultiLinePoint,Tektosyne.Geometry.MultiLinePoint)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.MultiLinePoint.Equals(Tektosyne.Geometry.MultiLinePoint)"/> overload to
            test the two <see cref="T:Tektosyne.Geometry.MultiLinePoint"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PointDComparerX">
            <summary>
            Provides methods that compare two <see cref="T:Tektosyne.Geometry.PointD"/> instances, preferring <see
            cref="F:Tektosyne.Geometry.PointD.X"/> coordinates.</summary>
            <remarks><para>
            <b>PointDComparerX</b> defines a lexicographic ordering for <see cref="T:Tektosyne.Geometry.PointD"/> instances,
            sorting first by <see cref="F:Tektosyne.Geometry.PointD.X"/> and then by <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates. Use
            <see cref="T:Tektosyne.Geometry.PointDComparerY"/> to sort first by <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates.
            </para><para>
            Coordinate comparisons may be performed precisely or with a specified epsilon. The actual
            comparisons are performed by two static methods, so you need to instantiate the
            <b>PointDComparerX</b> class only when required by a consumer.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PointDComparerX._epsilon">
            <summary>The epsilon used for coordinate comparisons.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.PointDComparerX.Epsilon">
            <summary>
            Gets or sets the epsilon used for coordinate comparisons.</summary>
            <value><para>
            The maximum absolute difference at which coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. The default is zero.</para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a negative value.</exception>
            <remarks>
            <b>Epsilon</b> determines whether <see cref="M:Tektosyne.Geometry.PointDComparerX.Compare(System.Object,System.Object)"/> dispatches to <see
            cref="M:Tektosyne.Geometry.PointDComparerX.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> or <see cref="M:Tektosyne.Geometry.PointDComparerX.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerX.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <overloads>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, given an epsilon for coordinate comparisons.</overloads>
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, given the current <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/> for coordinate
            comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>, given the
            current <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal, given the current
            <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>, given the
            current <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/>.</description>
            </item></list></returns>
            <remarks>
            <b>CompareEpsilon</b> is identical with <see cref="M:Tektosyne.Geometry.PointDComparerX.Compare(System.Object,System.Object)"/> but always calls <see
            cref="M:Tektosyne.MathUtility.Compare(System.Double,System.Double,System.Double)"/> with the current <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/> for coordinate
            comparisons. This is slightly faster if <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/> is known to be positive.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerX.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, given the specified epsilon for coordinate comparisons.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>, given the
            specified <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal, given the
            specified <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>, given the
            specified <paramref name="epsilon"/>.</description>
            </item></list></returns>
            <remarks><para>
            <b>CompareEpsilon</b> is identical with <see cref="M:Tektosyne.Geometry.PointDComparerX.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> but calls <see
            cref="M:Tektosyne.MathUtility.Compare(System.Double,System.Double,System.Double)"/> with the specified <paramref name="epsilon"/> for
            coordinate comparisons.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but
            <b>CompareEpsilon</b> does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerX.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, using exact coordinate comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
            <remarks>
            <b>CompareExact</b> determines the lexicographic ordering of <paramref name="a"/> and
            <paramref name="b"/> by first comparing their <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinates, and in
            case of equality then comparing their <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates. Smaller
            coordinates are sorted before greater coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerX.FindNearest(System.Collections.Generic.IList{Tektosyne.Geometry.PointD},Tektosyne.Geometry.PointD)">
            <summary>
            Searches the specified sorted <see cref="T:Tektosyne.Geometry.PointD"/> collection for the element nearest to
            the specified coordinates, given the current <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/> for coordinate
            comparisons.</summary>
            <param name="points">
            An <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to search,
            sorted lexicographically using a <see cref="T:Tektosyne.Geometry.PointDComparerX"/> with the current <see
            cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/>.</param>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <returns>
            The zero-based index of any occurrence of <paramref name="q"/> in <paramref
            name="points"/>, if found; otherwise, the zero-based index of the <paramref
            name="points"/> element with the smallest Euclidean distance to <paramref name="q"/>.
            </returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty collection.</exception>
            <remarks><para>
            <b>FindNearest</b> first approximates the index position of <paramref name="q"/> within
            the specified <paramref name="points"/> by a lexicographic binary search, using <see
            cref="T:Tektosyne.Geometry.PointDComparerX"/> methods with the current <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/>.
            </para><para>
            <b>FindNearest</b> then expands the search to both increasing and decreasing index
            positions, using the Euclidean distance of the first approximation, or of any
            subsequently found nearer element, as the maximum search radius.
            </para><para>
            Once the horizontal distances of the tested <paramref name="points"/> elements in both
            directions exceed the search radius, <b>FindNearest</b> returns the zero-based index of
            the element with the smallest Euclidean distance to <paramref name="q"/>.
            </para><para>
            <b>FindNearest</b> has a worst-case runtime of O(ld n + n), where n is the total number
            of <paramref name="points"/>. However, the runtime for an evenly distributed point set
            is close to O(ld n) since <b>FindNearest</b> can limit comparisons to a relatively
            narrow horizontal distance around the initial approximation.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerX.Compare(System.Object,System.Object)">
            <overloads>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering.</overloads>
            <summary>
            Compares two specified objects, which must be <see cref="T:Tektosyne.Geometry.PointD"/> instances, and
            returns an indication of their lexicographic ordering.</summary>
            <param name="a">
            The first <see cref="T:System.Object"/> to compare.</param>
            <param name="b">
            The second <see cref="T:System.Object"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="a"/> or <paramref name="b"/> is neither a <see cref="T:Tektosyne.Geometry.PointD"/> nor a
            null reference.</exception>
            <remarks><para>
            The specified <paramref name="a"/> and <paramref name="b"/> must both be either null
            references or <see cref="T:Tektosyne.Geometry.PointD"/> instances. Null references are always sorted before
            valid <see cref="T:Tektosyne.Geometry.PointD"/> instances. Two null references are considered equal.
            </para><para>
            <b>Compare</b> determines the relative order of the two instances by calling the
            strongly-typed <see cref="M:Tektosyne.Geometry.PointDComparerX.Compare(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> overload.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerX.Compare(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
            <remarks>
            <b>Compare</b> returns the result of either <see cref="M:Tektosyne.Geometry.PointDComparerX.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> or <see
            cref="M:Tektosyne.Geometry.PointDComparerX.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> for <paramref name="a"/> and <paramref name="b"/>, depending on
            whether the current <see cref="P:Tektosyne.Geometry.PointDComparerX.Epsilon"/> equals zero.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PointDComparerY">
            <summary>
            Provides methods that compare two <see cref="T:Tektosyne.Geometry.PointD"/> instances, preferring <see
            cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates.</summary>
            <remarks><para>
            <b>PointDComparerY</b> defines a lexicographic ordering for <see cref="T:Tektosyne.Geometry.PointD"/> instances,
            sorting first by <see cref="F:Tektosyne.Geometry.PointD.Y"/> and then by <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinates. Use
            <see cref="T:Tektosyne.Geometry.PointDComparerX"/> to sort first by <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinates.
            </para><para>
            Coordinate comparisons may be performed precisely or with a specified epsilon. The actual
            comparisons are performed by two static methods, so you need to instantiate the
            <b>PointDComparerY</b> class only when required by a consumer.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PointDComparerY._epsilon">
            <summary>The epsilon used for coordinate comparisons.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.PointDComparerY.Epsilon">
            <summary>
            Gets or sets the epsilon used for coordinate comparisons.</summary>
            <value><para>
            The maximum absolute difference at which coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. The default is zero.</para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a negative value.</exception>
            <remarks>
            <b>Epsilon</b> determines whether <see cref="M:Tektosyne.Geometry.PointDComparerY.Compare(System.Object,System.Object)"/> dispatches to <see
            cref="M:Tektosyne.Geometry.PointDComparerY.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> or <see cref="M:Tektosyne.Geometry.PointDComparerY.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerY.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <overloads>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, given an epsilon for coordinate comparisons.</overloads>
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, given the current <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/> for coordinate
            comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>, given the
            current <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal, given the current
            <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>, given the
            current <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/>.</description>
            </item></list></returns>
            <remarks>
            <b>CompareEpsilon</b> is identical with <see cref="M:Tektosyne.Geometry.PointDComparerY.Compare(System.Object,System.Object)"/> but always calls <see
            cref="M:Tektosyne.MathUtility.Compare(System.Double,System.Double,System.Double)"/> with the current <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/> for coordinate
            comparisons. This is slightly faster if <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/> is known to be positive.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerY.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, given the specified epsilon for coordinate comparisons.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>, given the
            specified <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal, given the
            specified <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>, given the
            specified <paramref name="epsilon"/>.</description>
            </item></list></returns>
            <remarks><para>
            <b>CompareEpsilon</b> is identical with <see cref="M:Tektosyne.Geometry.PointDComparerY.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> but calls <see
            cref="M:Tektosyne.MathUtility.Compare(System.Double,System.Double,System.Double)"/> with the specified <paramref name="epsilon"/> for
            coordinate comparisons.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but
            <b>CompareEpsilon</b> does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerY.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering, using exact coordinate comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
            <remarks>
            <b>CompareExact</b> determines the lexicographic ordering of <paramref name="a"/> and
            <paramref name="b"/> by first comparing their <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates, and in
            case of equality then comparing their <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinates. Smaller
            coordinates are sorted before greater coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerY.FindNearest(System.Collections.Generic.IList{Tektosyne.Geometry.PointD},Tektosyne.Geometry.PointD)">
            <summary>
            Searches the specified sorted <see cref="T:Tektosyne.Geometry.PointD"/> collection for the element nearest to
            the specified coordinates, given the current <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/> for coordinate
            comparisons.</summary>
            <param name="points">
            An <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to search,
            sorted lexicographically using a <see cref="T:Tektosyne.Geometry.PointDComparerY"/> with the current <see
            cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/>.</param>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <returns>
            The zero-based index of any occurrence of <paramref name="q"/> in <paramref
            name="points"/>, if found; otherwise, the zero-based index of the <paramref
            name="points"/> element with the smallest Euclidean distance to <paramref name="q"/>.
            </returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty collection.</exception>
            <remarks><para>
            <b>FindNearest</b> first approximates the index position of <paramref name="q"/> within
            the specified <paramref name="points"/> by a lexicographic binary search, using <see
            cref="T:Tektosyne.Geometry.PointDComparerY"/> methods with the current <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/>.
            </para><para>
            <b>FindNearest</b> then expands the search to both increasing and decreasing index
            positions, using the Euclidean distance of the first approximation, or of any
            subsequently found nearer element, as the maximum search radius.
            </para><para>
            Once the vertical distances of the tested <paramref name="points"/> elements in both
            directions exceed the search radius, <b>FindNearest</b> returns the zero-based index of
            the element with the smallest Euclidean distance to <paramref name="q"/>.
            </para><para>
            <b>FindNearest</b> has a worst-case runtime of O(ld n + n), where n is the total number
            of <paramref name="points"/>. However, the runtime for an evenly distributed point set
            is close to O(ld n) since <b>FindNearest</b> can limit comparisons to a relatively
            narrow vertical distance around the initial approximation.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerY.Compare(System.Object,System.Object)">
            <overloads>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering.</overloads>
            <summary>
            Compares two specified objects, which must be <see cref="T:Tektosyne.Geometry.PointD"/> instances, and
            returns an indication of their lexicographic ordering.</summary>
            <param name="a">
            The first <see cref="T:System.Object"/> to compare.</param>
            <param name="b">
            The second <see cref="T:System.Object"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="a"/> or <paramref name="b"/> is neither a <see cref="T:Tektosyne.Geometry.PointD"/> nor a
            null reference.</exception>
            <remarks><para>
            The specified <paramref name="a"/> and <paramref name="b"/> must both be either null
            references or <see cref="T:Tektosyne.Geometry.PointD"/> instances. Null references are always sorted before
            valid <see cref="T:Tektosyne.Geometry.PointD"/> instances. Two null references are considered equal.
            </para><para>
            <b>Compare</b> determines the relative order of the two instances by calling the
            strongly-typed <see cref="M:Tektosyne.Geometry.PointDComparerY.Compare(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> overload.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointDComparerY.Compare(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances and returns an indication of their
            lexicographic ordering.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
            <remarks>
            <b>Compare</b> returns the result of either <see cref="M:Tektosyne.Geometry.PointDComparerY.CompareExact(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> or <see
            cref="M:Tektosyne.Geometry.PointDComparerY.CompareEpsilon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> for <paramref name="a"/> and <paramref name="b"/>, depending on
            whether the current <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/> equals zero.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PointD">
            <summary>
            Represents a location in two-dimensional space, using <see cref="T:System.Double"/> coordinates.
            </summary>
            <remarks><para>
            <b>PointD</b> is an immutable structure whose two <see cref="T:System.Double"/> coordinates define a
            mathematical point in two-dimensional space, or alternatively a two-dimensional vector.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.PointI"/> structure to represent points with <see cref="T:System.Int32"/>
            coordinates, and the <see cref="T:Tektosyne.Geometry.PointF"/> structure to represent points with <see
            cref="T:System.Single"/> coordinates. You can convert <see cref="T:Tektosyne.Geometry.PointD"/> instances to and from <see
            cref="T:Tektosyne.Geometry.PointI"/> and <see cref="T:Tektosyne.Geometry.PointF"/> instances, rounding off the <see cref="T:System.Double"/>
            coordinates as necessary.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PointD"/> structure with the specified
            coordinates.</summary>
            <param name="x">
            The <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate of the <see cref="T:Tektosyne.Geometry.PointD"/>.</param>
            <param name="y">
            The <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate of the <see cref="T:Tektosyne.Geometry.PointD"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.PointD.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.PointD"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.PointD"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PointD.X">
            <summary>
            The x-coordinate of the <see cref="T:Tektosyne.Geometry.PointD"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.PointD.Y">
            <summary>
            The y-coordinate of the <see cref="T:Tektosyne.Geometry.PointD"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.PointD.Angle">
            <summary>
            Gets the polar angle of the vector represented by the <see cref="T:Tektosyne.Geometry.PointD"/>, in radians.
            </summary>
            <value><para>
            The polar angle, in radians, of the vector represented by the <see cref="T:Tektosyne.Geometry.PointD"/>.
            </para><para>-or-</para><para>
            Zero if <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> both equal zero.</para></value>
            <remarks>
            <b>Angle</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the <see cref="F:Tektosyne.Geometry.PointD.Y"/> and
            <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinates. The possible range of values is (-<see cref="F:System.Math.PI"/>,
            +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PointD.Length">
            <summary>
            Gets the absolute length of the vector represented by the <see cref="T:Tektosyne.Geometry.PointD"/>.
            </summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value indicating the absolute length of the vector
            represented by the <see cref="T:Tektosyne.Geometry.PointD"/>.</value>
            <remarks>
            <b>Length</b> returns the square root of the sum of the squares of the <see cref="F:Tektosyne.Geometry.PointD.X"/>
            and <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PointD.LengthSquared">
            <summary>
            Gets the squared absolute length of the vector represented by the <see cref="T:Tektosyne.Geometry.PointD"/>.
            </summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value that equals the square of the <see
            cref="P:Tektosyne.Geometry.PointD.Length"/> property.</value>
            <remarks>
            <b>LengthSquared</b> performs the same operations as <see cref="P:Tektosyne.Geometry.PointD.Length"/> but without
            the final <see cref="M:System.Math.Sqrt(System.Double)"/> call, and is therefore faster if you only need the
            squared <see cref="P:Tektosyne.Geometry.PointD.Length"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Add(Tektosyne.Geometry.PointD)">
            <summary>
            Adds the coordinates of the specified <see cref="T:Tektosyne.Geometry.PointD"/> to this instance.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointD"/> whose coordinates to add to this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> properties equal the
            corresponding properties of the specified <paramref name="point"/> added to those of
            this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.AngleBetween(Tektosyne.Geometry.PointD)">
            <overloads>
            Computes the angle between two <see cref="T:Tektosyne.Geometry.PointD"/> vectors.</overloads>
            <summary>
            Computes the angle between the vector represented by this instance and the specified
            <see cref="T:Tektosyne.Geometry.PointD"/> vector.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointD"/> vector to compare with this instance.</param>
            <returns>
            The angle, in radians, between this instance and the specified <paramref
            name="vector"/>, in that order.</returns>
            <remarks>
            <b>AngleBetween</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the cross product
            length and the scalar dot product of the two vectors. The possible range of values is
            (-<see cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.AngleBetween(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Computes the angle between the vectors from this instance to the specified <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates where the first vector ends.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates where the second vector ends.</param>
            <returns>
            The angle, in radians, between the vectors from this instance to <paramref name="a"/>
            and from this instance to <paramref name="b"/>, in that order.</returns>
            <remarks>
            <b>AngleBetween</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the cross product
            length and the scalar dot product of the two vectors. The possible range of values is
            (-<see cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.CrossProductLength(Tektosyne.Geometry.PointD)">
            <overloads>
            Computes the length of the cross-product of two <see cref="T:Tektosyne.Geometry.PointD"/> vectors.
            </overloads>
            <summary>
            Computes the length of the cross-product of the vector represented by this instance and
            the specified <see cref="T:Tektosyne.Geometry.PointD"/> vector.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointD"/> vector to multiply with this instance.</param>
            <returns>
            A <see cref="T:System.Double"/> value indicating the length of the cross-product of this instance
            and the specified <paramref name="vector"/>, in that order.</returns>
            <remarks>
            The absolute value of <b>CrossProductLength</b> equals the area of the parallelogram
            spanned by this instance and the specified <paramref name="vector"/>. The sign indicates
            their spatial relationship, which is described in the other <see
            cref="M:Tektosyne.Geometry.PointD.CrossProductLength(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> overload.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.CrossProductLength(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Computes the length of the cross-product of the vectors from this instance to the
            specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates where the first vector ends.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates where the second vector ends.</param>
            <returns>
            A <see cref="T:System.Double"/> value indicating the length of the cross-product of the vectors
            from this instance to <paramref name="a"/> and from this instance to <paramref
            name="b"/>, in that order.</returns>
            <remarks><para>
            The absolute value of <b>CrossProductLength</b> equals the area of the parallelogram
            spanned by the two vectors from the current coordinates to <paramref name="a"/> and
            <paramref name="b"/>. The sign indicates their spatial relationship, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Relationship</description>
            </listheader><item>
            <term>Less than zero</term><description>
            The sequence from this instance to <paramref name="a"/> and then <paramref name="b"/>
            constitutes a right-hand turn, assuming y-coordinates increase upward.</description>
            </item><item>
            <term>Zero</term><description>
            This instance, <paramref name="a"/>, and <paramref name="b"/> are collinear.
            </description></item><item>
            <term>Greater than zero</term><description>
            The sequence from this instance to <paramref name="a"/> and then <paramref name="b"/>
            constitutes a left-hand turn, assuming y-coordinates increase upward.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.FromPolar(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:Tektosyne.Geometry.PointD"/> from the specified polar coordinates.</summary>
            <param name="length">
            The distance from the origin to the <see cref="T:Tektosyne.Geometry.PointD"/>.</param>
            <param name="angle">
            The polar angle, in radians, of the <see cref="T:Tektosyne.Geometry.PointD"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="P:Tektosyne.Geometry.PointD.Length"/> and <see cref="P:Tektosyne.Geometry.PointD.Angle"/> equal the
            specified <paramref name="length"/> and <paramref name="angle"/>.</returns>
            <remarks>
            <b>FromPolar</b> returns <see cref="F:Tektosyne.Geometry.PointD.Empty"/> if the specified <paramref name="length"/>
            equals zero, and inverts the signs of the <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/>
            coordinates if <paramref name="length"/> is less than zero.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.PointD"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/>
            properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.IsCollinear(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <overloads>
            Determines whether this instance is collinear with the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            instances.</overloads>
            <summary>
            Determines whether this instance is collinear with the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            instances, using exact coordinate comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> instance to examine.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> instance to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PointD"/> is collinear with <paramref name="a"/> and
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IsCollinear</b> returns <c>true</c> exactly if <see cref="M:Tektosyne.Geometry.PointD.CrossProductLength(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> returns zero for <paramref name="a"/> and <paramref name="b"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.IsCollinear(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Determines whether this instance is collinear with the specified <see cref="T:Tektosyne.Geometry.PointD"/> 
            instances, given the specified epsilon for coordinate comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> instance to examine.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> instance to examine.</param>
            <param name="epsilon">
            The maximum absolute value at which the result of <see cref="M:Tektosyne.Geometry.PointD.CrossProductLength(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> should be considered zero.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PointD"/> is collinear with <paramref name="a"/> and
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>IsCollinear</b> is identical with the basic <see cref="M:Tektosyne.Geometry.PointD.IsCollinear(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/>
            overload but succeeds if the absolute value of <see cref="M:Tektosyne.Geometry.PointD.CrossProductLength(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> for <paramref name="a"/> and <paramref name="b"/> is equal to or less than
            the specified <paramref name="epsilon"/>.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but
            <b>IsCollinear</b> does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Move(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.PointD"/> a specified distance in the specified direction.
            </summary>
            <param name="target">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that indicate the direction of the move.</param>
            <param name="distance">
            The amount by which to move the <see cref="T:Tektosyne.Geometry.PointD"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> that equals this instance, moved towards or away from <paramref
            name="target"/> by the specified <paramref name="distance"/>.</returns>
            <remarks><para>
            <b>Move</b> moves the <see cref="T:Tektosyne.Geometry.PointD"/> towards the specified <paramref
            name="target"/> if the specified <paramref name="distance"/> is positive, and away from
            <paramref name="target"/> if <paramref name="distance"/> is negative.
            </para><para>
            <b>Move</b> returns the unchanged <see cref="T:Tektosyne.Geometry.PointD"/> if it equals <paramref
            name="target"/>, or if <paramref name="distance"/> is zero.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Multiply(Tektosyne.Geometry.PointD)">
            <summary>
            Multiplies the vectors represented by the specified <see cref="T:Tektosyne.Geometry.PointD"/> and by this
            instance.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointD"/> vector to multiply with this instance.</param>
            <returns>
            A <see cref="T:System.Double"/> value that represents the scalar dot product of the specified
            <paramref name="vector"/> and this instance.</returns>
            <remarks>
            <b>Multiply</b> returns the sum of the pairwise products of the <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see
            cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates of both instances. That sum equals <see cref="P:Tektosyne.Geometry.PointD.LengthSquared"/> if
            the specified <paramref name="vector"/> equals this instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Normalize">
            <summary>
            Normalizes the vector represented by the <see cref="T:Tektosyne.Geometry.PointD"/>.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> with the same <see cref="P:Tektosyne.Geometry.PointD.Angle"/> as this instance, and whose
            <see cref="P:Tektosyne.Geometry.PointD.Length"/> equals one.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Restrict(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Restricts the <see cref="T:Tektosyne.Geometry.PointD"/> to the specified coordinate range.</summary>
            <param name="minX">
            The smallest permissible <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate.</param>
            <param name="minY">
            The smallest permissible <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate.</param>
            <param name="maxX">
            The greatest permissible <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate.</param>
            <param name="maxY">
            The greatest permissible <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinates equal those
            of this instance, restricted to the indicated coordinate range.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.PointD"/> to a <see cref="T:Tektosyne.Geometry.PointI"/> by rounding coordinates to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> instance whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties equal the corresponding properties of the <see cref="T:Tektosyne.Geometry.PointD"/>, rounded to
            the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Double"/> coordinates of the <see cref="T:Tektosyne.Geometry.PointD"/> are converted to <see
            cref="T:System.Int32"/> coordinates using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Subtract(Tektosyne.Geometry.PointD)">
            <summary>
            Subtracts the coordinates of the specified <see cref="T:Tektosyne.Geometry.PointD"/> from this instance.
            </summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointD"/> whose coordinates to subtract from this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> properties equal the
            corresponding properties of the specified <paramref name="point"/> subtracted from those
            of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.ToPointF">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.PointD"/> to a <see cref="T:Tektosyne.Geometry.PointF"/> by casting coordinates to
            the equivalent <see cref="T:System.Single"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> instance whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/>
            properties equal the corresponding properties of the <see cref="T:Tektosyne.Geometry.PointD"/>, cast to the
            equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.ToPointI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.PointD"/> to a <see cref="T:Tektosyne.Geometry.PointI"/> by truncating coordinates to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> instance whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties equal the corresponding properties of the <see cref="T:Tektosyne.Geometry.PointD"/>, truncated to
            the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.PointD"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/>
            properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Equality(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointD"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.PointD.Equals(Tektosyne.Geometry.PointD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.PointD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Inequality(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointD"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.PointD.Equals(Tektosyne.Geometry.PointD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.PointD"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Addition(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Adds the coordinates of two <see cref="T:Tektosyne.Geometry.PointD"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to add.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to add.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> properties equal the
            corresponding properties of <paramref name="a"/> added to those of <paramref name="b"/>.
            </returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointD.Add(Tektosyne.Geometry.PointD)"/> to add the coordinates of the two <see
            cref="T:Tektosyne.Geometry.PointD"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Multiply(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Multiplies the vectors represented by two <see cref="T:Tektosyne.Geometry.PointD"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to multiply.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to multiply.</param>
            <returns>
            A <see cref="T:System.Double"/> value that represents the scalar dot product of <paramref
            name="a"/> and <paramref name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointD.Multiply(Tektosyne.Geometry.PointD)"/> to multiply the vectors represented by the
            two <see cref="T:Tektosyne.Geometry.PointD"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Subtraction(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Subtracts the coordinates of two <see cref="T:Tektosyne.Geometry.PointD"/> instances.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to subtract from.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to subtract.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> properties equal the
            corresponding properties of <paramref name="a"/> subtracted from those of <paramref
            name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointD.Subtract(Tektosyne.Geometry.PointD)"/> to subtract the coordinates of the two <see
            cref="T:Tektosyne.Geometry.PointD"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Implicit(Tektosyne.Geometry.PointF)~Tektosyne.Geometry.PointD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.PointF"/> to a <see cref="T:Tektosyne.Geometry.PointD"/> with identical coordinates.
            </summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.PointD"/> instance.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> instance whose <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> properties
            equal the corresponding properties of the specified <paramref name="point"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Implicit(Tektosyne.Geometry.PointI)~Tektosyne.Geometry.PointD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.PointI"/> to a <see cref="T:Tektosyne.Geometry.PointD"/> with identical coordinates.
            </summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.PointD"/> instance.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> instance whose <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> properties
            equal the corresponding properties of the specified <paramref name="point"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Explicit(Tektosyne.Geometry.PointD)~Tektosyne.Geometry.PointF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.PointD"/> to a <see cref="T:Tektosyne.Geometry.PointF"/> by casting coordinates to the
            equivalent <see cref="T:System.Single"/> values.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.PointF"/> instance.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> instance whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/>
            properties equal the corresponding properties of the specified <paramref name="point"/>,
            cast to the equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.op_Explicit(Tektosyne.Geometry.PointD)~Tektosyne.Geometry.PointI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.PointD"/> to a <see cref="T:Tektosyne.Geometry.PointI"/> by truncating coordinates to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.PointI"/> instance.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> instance whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties equal the corresponding properties of the specified <paramref name="point"/>,
            truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointD"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.PointD"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.PointD"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.PointD"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.PointD"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.PointD"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.PointD.Equals(Tektosyne.Geometry.PointD)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Equals(Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.PointD"/> have the same
            value.</summary>
            <param name="point">
            A <see cref="T:Tektosyne.Geometry.PointD"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="point"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.PointD.X"/> and <see cref="F:Tektosyne.Geometry.PointD.Y"/> properties
            of the two <see cref="T:Tektosyne.Geometry.PointD"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Equals(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.PointD.Equals(Tektosyne.Geometry.PointD)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.PointD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointD.Equals(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.PointD"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the coordinates of <paramref name="a"/>
            and <paramref name="b"/> is less than or equal to <paramref name="epsilon"/>; otherwise,
            <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PointF">
            <summary>
            Represents a location in two-dimensional space, using <see cref="T:System.Single"/> coordinates.
            </summary>
            <remarks><para>
            <b>PointF</b> is an immutable structure whose two <see cref="T:System.Single"/> coordinates define a
            mathematical point in two-dimensional space, or alternatively a two-dimensional vector.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.PointI"/> structure to represent points with <see cref="T:System.Int32"/>
            coordinates, and the <see cref="T:Tektosyne.Geometry.PointD"/> structure to represent points with <see
            cref="T:System.Double"/> coordinates. You can convert <see cref="T:Tektosyne.Geometry.PointF"/> instances to and from <see
            cref="T:Tektosyne.Geometry.PointI"/> instances, rounding off the <see cref="T:System.Single"/> coordinates as necessary.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PointF"/> structure with the specified
            coordinates.</summary>
            <param name="x">
            The <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate of the <see cref="T:Tektosyne.Geometry.PointF"/>.</param>
            <param name="y">
            The <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate of the <see cref="T:Tektosyne.Geometry.PointF"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.PointF.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.PointF"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.PointF"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PointF.X">
            <summary>
            The x-coordinate of the <see cref="T:Tektosyne.Geometry.PointF"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.PointF.Y">
            <summary>
            The y-coordinate of the <see cref="T:Tektosyne.Geometry.PointF"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.PointF.Angle">
            <summary>
            Gets the polar angle of the vector represented by the <see cref="T:Tektosyne.Geometry.PointF"/>, in radians.
            </summary>
            <value><para>
            The polar angle, in radians, of the vector represented by the <see cref="T:Tektosyne.Geometry.PointF"/>.
            </para><para>-or-</para><para>
            Zero if <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> both equal zero.</para></value>
            <remarks>
            <b>Angle</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the <see cref="F:Tektosyne.Geometry.PointF.Y"/> and
            <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinates. The possible range of values is (-<see cref="F:System.Math.PI"/>,
            +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PointF.Length">
            <summary>
            Gets the absolute length of the vector represented by the <see cref="T:Tektosyne.Geometry.PointF"/>.
            </summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value indicating the absolute length of the vector
            represented by the <see cref="T:Tektosyne.Geometry.PointF"/>.</value>
            <remarks>
            <b>Length</b> returns the square root of the sum of the squares of the <see cref="F:Tektosyne.Geometry.PointF.X"/>
            and <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinates.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PointF.LengthSquared">
            <summary>
            Gets the squared absolute length of the vector represented by the <see cref="T:Tektosyne.Geometry.PointF"/>.
            </summary>
            <value>
            A non-negative <see cref="T:System.Single"/> value that equals the square of the <see
            cref="P:Tektosyne.Geometry.PointF.Length"/> property.</value>
            <remarks>
            <b>LengthSquared</b> performs the same operations as <see cref="P:Tektosyne.Geometry.PointF.Length"/> but without
            the final <see cref="M:System.Math.Sqrt(System.Double)"/> call, and is therefore faster if you only need the
            squared <see cref="P:Tektosyne.Geometry.PointF.Length"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Add(Tektosyne.Geometry.PointF)">
            <summary>
            Adds the coordinates of the specified <see cref="T:Tektosyne.Geometry.PointF"/> to this instance.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointF"/> whose coordinates to add to this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> properties equal the
            corresponding properties of the specified <paramref name="point"/> added to those of
            this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.AngleBetween(Tektosyne.Geometry.PointF)">
            <overloads>
            Computes the angle between two <see cref="T:Tektosyne.Geometry.PointF"/> vectors.</overloads>
            <summary>
            Computes the angle between the vector represented by this instance and the specified
            <see cref="T:Tektosyne.Geometry.PointF"/> vector.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointF"/> vector to compare with this instance.</param>
            <returns>
            The angle, in radians, between this instance and the specified <paramref
            name="vector"/>, in that order.</returns>
            <remarks>
            <b>AngleBetween</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the cross product
            length and the scalar dot product of the two vectors. The possible range of values is
            (-<see cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.AngleBetween(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Computes the angle between the vectors from this instance to the specified <see
            cref="T:Tektosyne.Geometry.PointF"/> coordinates.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates where the first vector ends.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates where the second vector ends.</param>
            <returns>
            The angle, in radians, between the vectors from this instance to <paramref name="a"/>
            and from this instance to <paramref name="b"/>, in that order.</returns>
            <remarks>
            <b>AngleBetween</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the cross product
            length and the scalar dot product of the two vectors. The possible range of values is
            (-<see cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.CrossProductLength(Tektosyne.Geometry.PointF)">
            <overloads>
            Computes the length of the cross-product of two <see cref="T:Tektosyne.Geometry.PointF"/> vectors.
            </overloads>
            <summary>
            Computes the length of the cross-product of the vector represented by this instance and
            the specified <see cref="T:Tektosyne.Geometry.PointF"/> vector.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointF"/> vector to multiply with this instance.</param>
            <returns>
            A <see cref="T:System.Single"/> value indicating the length of the cross-product of this instance
            and the specified <paramref name="vector"/>, in that order.</returns>
            <remarks>
            The absolute value of <b>CrossProductLength</b> equals the area of the parallelogram
            spanned by this instance and the specified <paramref name="vector"/>. The sign indicates
            their spatial relationship, which is described in the other <see
            cref="M:Tektosyne.Geometry.PointF.CrossProductLength(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)"/> overload.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.CrossProductLength(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Computes the length of the cross-product of the vectors from this instance to the
            specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates where the first vector ends.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates where the second vector ends.</param>
            <returns>
            A <see cref="T:System.Single"/> value indicating the length of the cross-product of the vectors
            from this instance to <paramref name="a"/> and from this instance to <paramref
            name="b"/>, in that order.</returns>
            <remarks><para>
            The absolute value of <b>CrossProductLength</b> equals the area of the parallelogram
            spanned by the two vectors from the current coordinates to <paramref name="a"/> and
            <paramref name="b"/>. The sign indicates their spatial relationship, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Relationship</description>
            </listheader><item>
            <term>Less than zero</term><description>
            The sequence from this instance to <paramref name="a"/> and then <paramref name="b"/>
            constitutes a right-hand turn, assuming y-coordinates increase upward.</description>
            </item><item>
            <term>Zero</term><description>
            This instance, <paramref name="a"/>, and <paramref name="b"/> are collinear.
            </description></item><item>
            <term>Greater than zero</term><description>
            The sequence from this instance to <paramref name="a"/> and then <paramref name="b"/>
            constitutes a left-hand turn, assuming y-coordinates increase upward.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.FromPolar(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:Tektosyne.Geometry.PointF"/> from the specified polar coordinates.</summary>
            <param name="length">
            The distance from the origin to the <see cref="T:Tektosyne.Geometry.PointF"/>.</param>
            <param name="angle">
            The polar angle, in radians, of the <see cref="T:Tektosyne.Geometry.PointF"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="P:Tektosyne.Geometry.PointF.Length"/> and <see cref="P:Tektosyne.Geometry.PointF.Angle"/> equal the
            specified <paramref name="length"/> and <paramref name="angle"/>.</returns>
            <remarks>
            <b>FromPolar</b> returns <see cref="F:Tektosyne.Geometry.PointF.Empty"/> if the specified <paramref name="length"/>
            equals zero, and inverts the signs of the <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/>
            coordinates if <paramref name="length"/> is less than zero.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.PointF"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/>
            properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.IsCollinear(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <overloads>
            Determines whether this instance is collinear with the specified <see cref="T:Tektosyne.Geometry.PointF"/>
            instances.</overloads>
            <summary>
            Determines whether this instance is collinear with the specified <see cref="T:Tektosyne.Geometry.PointF"/>
            instances, using exact coordinate comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> instance to examine.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> instance to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PointF"/> is collinear with <paramref name="a"/> and
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IsCollinear</b> returns <c>true</c> exactly if <see cref="M:Tektosyne.Geometry.PointF.CrossProductLength(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)"/> returns zero for <paramref name="a"/> and <paramref name="b"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.IsCollinear(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF,System.Single)">
            <summary>
            Determines whether this instance is collinear with the specified <see cref="T:Tektosyne.Geometry.PointF"/> 
            instances, given the specified epsilon for coordinate comparisons.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> instance to examine.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> instance to examine.</param>
            <param name="epsilon">
            The maximum absolute value at which the result of <see cref="M:Tektosyne.Geometry.PointF.CrossProductLength(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)"/> should be considered zero.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PointF"/> is collinear with <paramref name="a"/> and
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>IsCollinear</b> is identical with the basic <see cref="M:Tektosyne.Geometry.PointF.IsCollinear(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)"/>
            overload but succeeds if the absolute value of <see cref="M:Tektosyne.Geometry.PointF.CrossProductLength(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)"/> for <paramref name="a"/> and <paramref name="b"/> is equal to or less than
            the specified <paramref name="epsilon"/>.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but
            <b>IsCollinear</b> does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Move(Tektosyne.Geometry.PointF,System.Single)">
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.PointF"/> a specified distance in the specified direction.
            </summary>
            <param name="target">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates that indicate the direction of the move.</param>
            <param name="distance">
            The amount by which to move the <see cref="T:Tektosyne.Geometry.PointF"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> that equals this instance, moved towards or away from <paramref
            name="target"/> by the specified <paramref name="distance"/>.</returns>
            <remarks><para>
            <b>Move</b> moves the <see cref="T:Tektosyne.Geometry.PointF"/> towards the specified <paramref
            name="target"/> if the specified <paramref name="distance"/> is positive, and away from
            <paramref name="target"/> if <paramref name="distance"/> is negative.
            </para><para>
            <b>Move</b> returns the unchanged <see cref="T:Tektosyne.Geometry.PointF"/> if it equals <paramref
            name="target"/>, or if <paramref name="distance"/> is zero.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Multiply(Tektosyne.Geometry.PointF)">
            <summary>
            Multiplies the vectors represented by the specified <see cref="T:Tektosyne.Geometry.PointF"/> and by this
            instance.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointF"/> to multiply with this instance.</param>
            <returns>
            A <see cref="T:System.Single"/> value that represents the scalar dot product of the specified
            <paramref name="vector"/> and this instance.</returns>
            <remarks>
            <b>Multiply</b> returns the sum of the pairwise products of the <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see
            cref="F:Tektosyne.Geometry.PointF.Y"/> coordinates of both instances. That sum equals <see cref="P:Tektosyne.Geometry.PointF.LengthSquared"/> if
            the specified <paramref name="vector"/> equals this instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Normalize">
            <summary>
            Normalizes the vector represented by the <see cref="T:Tektosyne.Geometry.PointF"/>.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> with the same <see cref="P:Tektosyne.Geometry.PointF.Angle"/> as this instance, and whose
            <see cref="P:Tektosyne.Geometry.PointF.Length"/> equals one.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Restrict(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Restricts the <see cref="T:Tektosyne.Geometry.PointF"/> to the specified coordinate range.</summary>
            <param name="minX">
            The smallest permissible <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate.</param>
            <param name="minY">
            The smallest permissible <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate.</param>
            <param name="maxX">
            The greatest permissible <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate.</param>
            <param name="maxY">
            The greatest permissible <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinates equal those
            of this instance, restricted to the indicated coordinate range.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.PointF"/> to a <see cref="T:Tektosyne.Geometry.PointI"/> by rounding coordinates to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> instance whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties equal the corresponding properties of the <see cref="T:Tektosyne.Geometry.PointF"/>, rounded to
            the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Single"/> coordinates of the <see cref="T:Tektosyne.Geometry.PointF"/> are converted to <see
            cref="T:System.Int32"/> coordinates using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Subtract(Tektosyne.Geometry.PointF)">
            <summary>
            Subtracts the coordinates of the specified <see cref="T:Tektosyne.Geometry.PointF"/> from this instance.
            </summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointF"/> whose coordinates to subtract from this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> properties equal the
            corresponding properties of the specified <paramref name="point"/> subtracted from those
            of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.ToPointI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.PointF"/> to a <see cref="T:Tektosyne.Geometry.PointI"/> by truncating coordinates to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> instance whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties equal the corresponding properties of the <see cref="T:Tektosyne.Geometry.PointF"/>, truncated to
            the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.PointF"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/>
            properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.op_Equality(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointF"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.PointF.Equals(Tektosyne.Geometry.PointF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.PointF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.op_Inequality(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointF"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.PointF.Equals(Tektosyne.Geometry.PointF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.PointF"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.op_Addition(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Adds the coordinates of two <see cref="T:Tektosyne.Geometry.PointF"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> to add.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> to add.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> properties equal the
            corresponding properties of <paramref name="a"/> added to those of <paramref name="b"/>.
            </returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointF.Add(Tektosyne.Geometry.PointF)"/> to add the coordinates of the two <see
            cref="T:Tektosyne.Geometry.PointF"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.op_Multiply(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Multiplies the vectors represented by two <see cref="T:Tektosyne.Geometry.PointF"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> to multiply.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> to multiply.</param>
            <returns>
            A <see cref="T:System.Single"/> value that represents the scalar dot product of <paramref
            name="a"/> and <paramref name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointF.Multiply(Tektosyne.Geometry.PointF)"/> to multiply the vectors represented by the
            two <see cref="T:Tektosyne.Geometry.PointF"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.op_Subtraction(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Subtracts the coordinates of two <see cref="T:Tektosyne.Geometry.PointF"/> instances.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointF"/> to subtract from.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointF"/> to subtract.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> properties equal the
            corresponding properties of <paramref name="a"/> subtracted from those of <paramref
            name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointF.Subtract(Tektosyne.Geometry.PointF)"/> to subtract the coordinates of the two <see
            cref="T:Tektosyne.Geometry.PointF"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.op_Implicit(Tektosyne.Geometry.PointI)~Tektosyne.Geometry.PointF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.PointI"/> to a <see cref="T:Tektosyne.Geometry.PointF"/> with identical coordinates.
            </summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.PointF"/> instance.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> instance whose <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> properties
            equal the corresponding properties of the specified <paramref name="point"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.op_Explicit(Tektosyne.Geometry.PointF)~Tektosyne.Geometry.PointI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.PointF"/> to a <see cref="T:Tektosyne.Geometry.PointI"/> by truncating coordinates to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.PointI"/> instance.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> instance whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties equal the corresponding properties of the specified <paramref name="point"/>,
            truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointF"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.PointF"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.PointF"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.PointF"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.PointF"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.PointF"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.PointF.Equals(Tektosyne.Geometry.PointF)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Equals(Tektosyne.Geometry.PointF)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.PointF"/> have the same
            value.</summary>
            <param name="point">
            A <see cref="T:Tektosyne.Geometry.PointF"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="point"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.PointF.X"/> and <see cref="F:Tektosyne.Geometry.PointF.Y"/> properties
            of the two <see cref="T:Tektosyne.Geometry.PointF"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Equals(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.PointF"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.PointF.Equals(Tektosyne.Geometry.PointF)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.PointF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointF.Equals(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF,System.Single)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.PointF"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the coordinates of <paramref name="a"/>
            and <paramref name="b"/> is less than or equal to <paramref name="epsilon"/>; otherwise,
            <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PointI">
            <summary>
            Represents a location in two-dimensional space, using <see cref="T:System.Int32"/> coordinates.
            </summary>
            <remarks><para>
            <b>PointI</b> is an immutable structure whose two <see cref="T:System.Int32"/> coordinates define a
            mathematical point in two-dimensional space, or alternatively a two-dimensional vector.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.PointF"/> structure to represent points with <see cref="T:System.Single"/>
            coordinates, and the <see cref="T:Tektosyne.Geometry.PointD"/> structure to represent points with <see
            cref="T:System.Double"/> coordinates.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PointI"/> structure with the specified
            coordinates.</summary>
            <param name="x">
            The <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate of the <see cref="T:Tektosyne.Geometry.PointI"/>.</param>
            <param name="y">
            The <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate of the <see cref="T:Tektosyne.Geometry.PointI"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.PointI.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.PointI"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.PointI"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PointI.X">
            <summary>
            The x-coordinate of the <see cref="T:Tektosyne.Geometry.PointI"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.PointI.Y">
            <summary>
            The y-coordinate of the <see cref="T:Tektosyne.Geometry.PointI"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.PointI.Angle">
            <summary>
            Gets the polar angle of the vector represented by the <see cref="T:Tektosyne.Geometry.PointI"/>, in radians.
            </summary>
            <value><para>
            The polar angle, in radians, of the vector represented by the <see cref="T:Tektosyne.Geometry.PointI"/>.
            </para><para>-or-</para><para>
            Zero if <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> both equal zero.</para></value>
            <remarks>
            <b>Angle</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the <see cref="F:Tektosyne.Geometry.PointI.Y"/> and
            <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinates. The possible range of values is (-<see cref="F:System.Math.PI"/>,
            +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PointI.Length">
            <summary>
            Gets the absolute length of the vector represented by the <see cref="T:Tektosyne.Geometry.PointI"/>.
            </summary>
            <value>
            A non-negative <see cref="T:System.Double"/> value indicating the absolute length of the vector
            represented by the <see cref="T:Tektosyne.Geometry.PointI"/>.</value>
            <remarks>
            <b>Length</b> returns the square root of the sum of the squares of the <see cref="F:Tektosyne.Geometry.PointI.X"/>
            and <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinates.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PointI.LengthSquared">
            <summary>
            Gets the squared absolute length of the vector represented by the <see cref="T:Tektosyne.Geometry.PointF"/>.
            </summary>
            <value>
            A non-negative <see cref="T:System.Int32"/> value that equals the square of the <see
            cref="P:Tektosyne.Geometry.PointI.Length"/> property.</value>
            <remarks>
            <b>LengthSquared</b> performs the same operations as <see cref="P:Tektosyne.Geometry.PointI.Length"/> but without
            the final <see cref="M:System.Math.Sqrt(System.Double)"/> call, and is therefore faster if you only need the
            squared <see cref="P:Tektosyne.Geometry.PointI.Length"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.Add(Tektosyne.Geometry.PointI)">
            <summary>
            Adds the coordinates of the specified <see cref="T:Tektosyne.Geometry.PointI"/> to this instance.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointI"/> whose coordinates to add to this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> properties equal the
            corresponding properties of the specified <paramref name="point"/> added to those of
            this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.AngleBetween(Tektosyne.Geometry.PointI)">
            <overloads>
            Computes the angle between two <see cref="T:Tektosyne.Geometry.PointI"/> vectors.</overloads>
            <summary>
            Computes the angle between the vector represented by this instance and the specified
            <see cref="T:Tektosyne.Geometry.PointI"/> vector.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointI"/> vector to compare with this instance.</param>
            <returns>
            The angle, in radians, between this instance and the specified <paramref
            name="vector"/>, in that order.</returns>
            <remarks>
            <b>AngleBetween</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the cross product
            length and the scalar dot product of the two vectors. The possible range of values is
            (-<see cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.AngleBetween(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Computes the angle between the vectors from this instance to the specified <see
            cref="T:Tektosyne.Geometry.PointI"/> coordinates.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates where the first vector ends.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates where the second vector ends.</param>
            <returns>
            The angle, in radians, between the vectors from this instance to <paramref name="a"/>
            and from this instance to <paramref name="b"/>, in that order.</returns>
            <remarks>
            <b>AngleBetween</b> returns the result of <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for the cross product
            length and the scalar dot product of the two vectors. The possible range of values is
            (-<see cref="F:System.Math.PI"/>, +<see cref="F:System.Math.PI"/>].</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.CrossProductLength(Tektosyne.Geometry.PointI)">
            <overloads>
            Computes the length of the cross-product of two <see cref="T:Tektosyne.Geometry.PointI"/> vectors.
            </overloads>
            <summary>
            Computes the length of the cross-product of the vector represented by this instance and
            the specified <see cref="T:Tektosyne.Geometry.PointI"/> vector.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointI"/> vector to multiply with this instance.</param>
            <returns>
            An <see cref="T:System.Int32"/> value indicating the length of the cross-product of this instance
            and the specified <paramref name="vector"/>, in that order.</returns>
            <remarks>
            The absolute value of <b>CrossProductLength</b> equals the area of the parallelogram
            spanned by this instance and the specified <paramref name="vector"/>. The sign indicates
            their spatial relationship, which is described in the other <see
            cref="M:Tektosyne.Geometry.PointI.CrossProductLength(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)"/> overload.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.CrossProductLength(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Computes the length of the cross-product of the vectors from this instance to the
            specified <see cref="T:Tektosyne.Geometry.PointI"/> coordinates.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates where the first vector ends.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates where the second vector ends.</param>
            <returns>
            An <see cref="T:System.Int32"/> value indicating the length of the cross-product of the vectors
            from this instance to <paramref name="a"/> and from this instance to <paramref
            name="b"/>, in that order.</returns>
            <remarks><para>
            The absolute value of <b>CrossProductLength</b> equals the area of the parallelogram
            spanned by the two vectors from the current coordinates to <paramref name="a"/> and
            <paramref name="b"/>. The sign indicates their spatial relationship, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Relationship</description>
            </listheader><item>
            <term>Less than zero</term><description>
            The sequence from this instance to <paramref name="a"/> and then <paramref name="b"/>
            constitutes a right-hand turn, assuming y-coordinates increase upward.</description>
            </item><item>
            <term>Zero</term><description>
            This instance, <paramref name="a"/>, and <paramref name="b"/> are collinear.
            </description></item><item>
            <term>Greater than zero</term><description>
            The sequence from this instance to <paramref name="a"/> and then <paramref name="b"/>
            constitutes a left-hand turn, assuming y-coordinates increase upward.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.FromPolar(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:Tektosyne.Geometry.PointI"/> from the specified polar coordinates.</summary>
            <param name="length">
            The distance from the origin to the <see cref="T:Tektosyne.Geometry.PointI"/>.</param>
            <param name="angle">
            The polar angle, in radians, of the <see cref="T:Tektosyne.Geometry.PointI"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="P:Tektosyne.Geometry.PointI.Length"/> and <see cref="P:Tektosyne.Geometry.PointI.Angle"/> equal the
            specified <paramref name="length"/> and <paramref name="angle"/>.</returns>
            <remarks><para>
            <b>FromPolar</b> returns <see cref="F:Tektosyne.Geometry.PointI.Empty"/> if the specified <paramref name="length"/>
            equals zero, and inverts the signs of the <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            coordinates if <paramref name="length"/> is less than zero.
            </para><para>
            The calculated <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinates are converted to the
            nearest <see cref="T:System.Int32"/> values using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding. The
            resulting <see cref="P:Tektosyne.Geometry.PointI.Length"/> and <see cref="P:Tektosyne.Geometry.PointI.Angle"/> may differ accordingly from the
            specified <paramref name="length"/> and <paramref name="angle"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.PointI"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.IsCollinear(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Determines whether this instance is collinear with the specified <see cref="T:Tektosyne.Geometry.PointI"/>
            instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointI"/> instance to examine.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointI"/> instance to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PointI"/> is collinear with <paramref name="a"/> and
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IsCollinear</b> returns <c>true</c> exactly if <see cref="M:Tektosyne.Geometry.PointI.CrossProductLength(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)"/> returns zero for <paramref name="a"/> and <paramref name="b"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.Multiply(Tektosyne.Geometry.PointI)">
            <summary>
            Multiplies the vectors represented by the specified <see cref="T:Tektosyne.Geometry.PointI"/> and by this
            instance.</summary>
            <param name="vector">
            The <see cref="T:Tektosyne.Geometry.PointI"/> to multiply with this instance.</param>
            <returns>
            An <see cref="T:System.Int32"/> value that represents the scalar dot product of the specified
            <paramref name="vector"/> and this instance.</returns>
            <remarks>
            <b>Multiply</b> returns the sum of the pairwise products of the <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see
            cref="F:Tektosyne.Geometry.PointI.Y"/> coordinates of both instances. That sum equals <see cref="P:Tektosyne.Geometry.PointI.LengthSquared"/> if
            the specified <paramref name="vector"/> equals this instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.Restrict(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts the <see cref="T:Tektosyne.Geometry.PointI"/> to the specified coordinate range.</summary>
            <param name="minX">
            The smallest permissible <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate.</param>
            <param name="minY">
            The smallest permissible <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate.</param>
            <param name="maxX">
            The greatest permissible <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate.</param>
            <param name="maxY">
            The greatest permissible <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinates equal those
            of this instance, restricted to the indicated coordinate range.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.Subtract(Tektosyne.Geometry.PointI)">
            <summary>
            Subtracts the coordinates of the specified <see cref="T:Tektosyne.Geometry.PointI"/> from this instance.
            </summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointI"/> whose coordinates to subtract from this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> properties equal the
            corresponding properties of the specified <paramref name="point"/> subtracted from those
            of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.PointI"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.op_Equality(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointI"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.PointI.Equals(Tektosyne.Geometry.PointI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.PointI"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.op_Inequality(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointI"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.PointI.Equals(Tektosyne.Geometry.PointI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.PointI"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.op_Addition(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Adds the coordinates of two <see cref="T:Tektosyne.Geometry.PointI"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointI"/> to add.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointI"/> to add.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> properties equal the
            corresponding properties of <paramref name="a"/> added to those of <paramref name="b"/>.
            </returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointI.Add(Tektosyne.Geometry.PointI)"/> to add the coordinates of the two <see
            cref="T:Tektosyne.Geometry.PointI"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.op_Multiply(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Multiplies the vectors represented by two <see cref="T:Tektosyne.Geometry.PointI"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointI"/> to multiply.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointI"/> to multiply.</param>
            <returns>
            An <see cref="T:System.Int32"/> value that represents the scalar dot product of <paramref
            name="a"/> and <paramref name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointI.Multiply(Tektosyne.Geometry.PointI)"/> to multiply the vectors represented by the
            two <see cref="T:Tektosyne.Geometry.PointI"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.op_Subtraction(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Subtracts the coordinates of two <see cref="T:Tektosyne.Geometry.PointI"/> instances.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.PointI"/> to subtract from.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.PointI"/> to subtract.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> properties equal the
            corresponding properties of <paramref name="a"/> subtracted from those of <paramref
            name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.PointI.Subtract(Tektosyne.Geometry.PointI)"/> to subtract the coordinates of the two <see
            cref="T:Tektosyne.Geometry.PointI"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.PointI"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.PointI"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.PointI"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.PointI"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.PointI"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.PointI"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.PointI.Equals(Tektosyne.Geometry.PointI)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.Equals(Tektosyne.Geometry.PointI)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.PointI"/> have the same
            value.</summary>
            <param name="point">
            A <see cref="T:Tektosyne.Geometry.PointI"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="point"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> properties
            of the two <see cref="T:Tektosyne.Geometry.PointI"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PointI.Equals(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.PointI"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.PointI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.PointI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.PointI.Equals(Tektosyne.Geometry.PointI)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.PointI"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PolygonGrid">
            <summary>
            Represents a rectangular grid composed of regular polygons.</summary>
            <remarks><para>
            <b>PolygonGrid</b> represents a mesh of identical squares or regular hexagons. The shape of 
            each element is described by a <see cref="T:Tektosyne.Geometry.RegularPolygon"/> which must have either four or
            six <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/>.
            </para><para>
            Each polygonal element within the <b>PolygonGrid</b> corresponds to a coordinate pair within
            an integer rectangle. That is, coordinates range from zero to a user-defined width and
            height. The exact mapping of elements to coordinates depends on the underlying <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/> and on the associated <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value.
            </para><para>
            <b>PolygonGrid</b> supports generic graph algorithms through its implementation of the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> interface. The graph nodes are the <see cref="T:Tektosyne.Geometry.PointI"/> coordinates of
            all grid locations. Two nodes are considered connected if they correspond to neighboring
            grid locations. The distance measure is the number of intervening grid locations.
            </para><para>
            Other methods provide topological information on grid locations, conversion to and from
            display coordinates, and the creation of a read-only wrapper similar to those provided by
            various <b>Tektosyne.Collections</b> classes.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.#ctor(Tektosyne.Geometry.RegularPolygon)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> class with the specified
            element shape.</summary>
            <param name="element">
            The <see cref="T:Tektosyne.Geometry.RegularPolygon"/> object that constitutes an element of the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="element"/> is neither a square nor a hexagon.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is a null reference.</exception>
            <remarks><para>
            The <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> property is initialized to an appropriate default value that
            depends on the specified <paramref name="element"/>.
            </para><para>
            The <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> property is initialized to (1,1). All dependent sizes are
            initialized according to the specified property values.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.#ctor(Tektosyne.Geometry.RegularPolygon,Tektosyne.Geometry.PolygonGridShift)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> class with the specified
            element shape and row or column shifting.</summary>
            <param name="element">
            The <see cref="T:Tektosyne.Geometry.RegularPolygon"/> object that constitutes an element of the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>.</param>
            <param name="gridShift">
            A <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value indicating the shifting of rows or columns in the
            <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</param>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="element"/> is neither a square nor a hexagon.
            </para><para>-or-</para><para>
            <paramref name="gridShift"/> is not compatible with <paramref name="element"/>.
            </para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is a null reference.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="gridShift"/> is not a valid <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value.
            </exception>
            <remarks>
            The <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> property is initialized to (1,1). All dependent sizes are
            initialized according to the specified property values.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.#ctor(Tektosyne.Geometry.PolygonGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> class that is a shallow copy
            of the specified instance.</summary>
            <param name="grid">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> object whose property values should be copied to the new
            instance.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="grid"/> is a null reference.</exception>
            <remarks><para>
            This "copy constructor" does not need to perform a deep copy as the associated <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/> object is immutable, and all other properties contain either
            structures or read-only values that depend on other properties.
            </para><note type="caution">
            Some properties return arrays that <em>can</em> be changed by clients, and any such
            changes would be reflected in both the specified <paramref name="grid"/> and the new
            <see cref="T:Tektosyne.Geometry.PolygonGrid"/> instance. Never modify arrays that are returned by properties!
            </note></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.#ctor(Tektosyne.Geometry.PolygonGrid.InstanceData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> class that is a read-only
            view of the specified <see cref="T:Tektosyne.Geometry.PolygonGrid.InstanceData"/>.</summary>
            <param name="data">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid.InstanceData"/> object that the new instance should share.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is a null reference.</exception>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.PolygonGrid.IsReadOnly"/> property is initialized to <c>true</c>. The new instance is
            its own read-only wrapper, i.e. <see cref="M:Tektosyne.Geometry.PolygonGrid.AsReadOnly"/> will return the instance it is
            invoked on.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonGrid.InvalidLocation">
            <summary>
            Represents an invalid <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location.</summary>
            <remarks><para>
            <b>InvalidLocation</b> holds a <see cref="T:Tektosyne.Geometry.PointI"/> value whose <see cref="F:Tektosyne.Geometry.PointI.X"/>
            and <see cref="F:Tektosyne.Geometry.PointI.Y"/> components are both -1. This represents a location outside of
            any <see cref="T:Tektosyne.Geometry.PolygonGrid"/> since column and row indices are always zero-based.
            </para><para>
            Various <see cref="T:Tektosyne.Geometry.PolygonGrid"/> methods return <b>InvalidLocation</b> to indicate that
            a valid <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location could not be found. Clients are encouraged to
            use this read-only field for the same purpose.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.AreColumnsShifted">
            <summary>
            Gets a value indicating whether the columns of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> are
            shifted.</summary>
            <value>
            <c>true</c> if <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> equals <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnUp"/> or
            <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnDown"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.AreRowsShifted">
            <summary>
            Gets a value indicating whether the rows of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> are shifted.
            </summary>
            <value>
            <c>true</c> if <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> equals <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowLeft"/> or
            <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowRight"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.CenterDistance">
            <summary>
            Gets the display distance between the center points of neighboring <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>
            shapes.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> value indicating the display distance between the center points of
            neighboring <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shapes, given the current values of the <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> and <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> properties.</value>
            <remarks><para>
            The <see cref="F:Tektosyne.Geometry.SizeD.Width"/> component of <b>CenterDistance</b> holds the horizontal 
            distance between neighboring elements within the same row, and the <see
            cref="F:Tektosyne.Geometry.SizeD.Height"/> component holds the vertical distance between neighboring elements
            within the same column.
            </para><para>
            <b>CenterDistance</b> is recalculated automatically whenever the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>
            or <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> properties change.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds">
            <summary>
            Gets the display bounds of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.RectD"/> indicating the display bounds of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>,
            given the current values of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>, <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>, and <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> properties.</value>
            <remarks>
            The upper-left corner of <b>DisplayBounds</b> is always (0,0). The lower-right corner is
            automatically recalculated whenever the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>, <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>,
            or <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> properties change.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.EdgeNeighborOffsets">
            <summary>
            Gets a list of all coordinate offsets to reach a neighboring location on a shared edge.
            </summary>
            <value>
            A jagged <see cref="T:System.Array"/> containing 1 x 4, 2 x 4, or 2 x 6 <see cref="T:Tektosyne.Geometry.PointI"/>
            values whose coordinates range from -1 to +1.</value>
            <remarks><para>
            <b>EdgeNeighborOffsets</b> is identical to <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> except that its
            inner arrays never contain offsets to neighboring locations on shared vertices, even if
            <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>true</c> for the current <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>. Use <see cref="M:Tektosyne.Geometry.PolygonGrid.GetEdgeNeighborOffsets(Tektosyne.Geometry.PointI)"/> to determine the correct
            inner array for a given location.
            </para><para>
            <b>EdgeNeighborOffsets</b> is recalculated automatically whenever the <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> or <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> properties change.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.Element">
            <summary>
            Gets or sets the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that constitutes an element of the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.RegularPolygon"/> object that constitutes an element of the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>.</value>
            <exception cref="T:System.ArgumentException">
            The property is set to a <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is neither a square nor a
            hexagon.</exception>
            <exception cref="T:System.ArgumentNullException">
            The property is set to a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> is read-only.</exception>
            <remarks>
            Setting <b>Element</b> also resets <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> to an appropriate default
            value if the current value is incompatible with the new <b>Element</b>, and recalculates
            the <see cref="P:Tektosyne.Geometry.PolygonGrid.CenterDistance"/>, <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/>, <see
            cref="P:Tektosyne.Geometry.PolygonGrid.EdgeNeighborOffsets"/>, and <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> properties accordingly.
            </remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.GridShift">
            <summary>
            Gets or sets the shifting of rows or columns in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value indicating the shifting of <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>
            rows or columns in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</value>
            <exception cref="T:System.ArgumentException">
            The property is set to a <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value that is not compatible
            with the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The property is set to an invalid <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> is read-only.</exception>
            <remarks><para>
            Setting <b>GridShift</b> also recalculates the <see cref="P:Tektosyne.Geometry.PolygonGrid.CenterDistance"/>, <see
            cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/>, <see cref="P:Tektosyne.Geometry.PolygonGrid.EdgeNeighborOffsets"/>, and <see
            cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> properties.
            </para><para>
            <b>GridShift</b> is automatically reset to an appropriate default value whenever the
            <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> property changes to a <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is
            incompatible with the current <b>GridShift</b> value.
            </para><para>
            The following table shows the default <b>GridShift</b> values for all possible <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shapes:</para>
            <list type="table"><listheader>
            <term>Element</term><description>GridShift</description>
            </listheader><item>
            <term>Square on Edge</term>
            <description><see cref="F:Tektosyne.Geometry.PolygonGridShift.None"/></description>
            </item><item>
            <term>Square on Vertex</term>
            <description><see cref="F:Tektosyne.Geometry.PolygonGridShift.RowRight"/></description>
            </item><item>
            <term>Hexagon on Edge</term>
            <description><see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnDown"/></description>
            </item><item>
            <term>Hexagon on Vertex</term>
            <description><see cref="F:Tektosyne.Geometry.PolygonGridShift.RowRight"/></description>
            </item></list></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonGrid.IsReadOnly">
            <summary>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> is read-only; otherwise, <c>false</c>. The
            default is <c>false</c>.</summary>
            <remarks>
            Attempting to modify a read-only <see cref="T:Tektosyne.Geometry.PolygonGrid"/> will raise a <see
            cref="T:System.NotSupportedException"/>. Use <see cref="M:Tektosyne.Geometry.PolygonGrid.AsReadOnly"/> to create a read-only
            wrapper around a given <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets">
            <summary>
            Gets a list of all coordinate offsets to reach a neighboring location.</summary>
            <value>
            A jagged <see cref="T:System.Array"/> containing 1 x 4, 2 x 4, 2 x 6, or 2 x 8 <see
            cref="T:Tektosyne.Geometry.PointI"/> values whose coordinates range from -2 to +2.</value>
            <remarks><para>
            The outer array of <b>NeighborOffsets</b> contains either a single array if <see
            cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> is <see cref="F:Tektosyne.Geometry.PolygonGridShift.None"/>, or two arrays for any other
            <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> value. In that case, the first inner array contains offsets for
            left-shifted rows or up-shifted columns, and the second inner array contains offsets for
            right-shifted rows or down-shifted columns.
            </para><para>
            The inner arrays of <b>NeighborOffsets</b> contain the number of index positions 
            indicated by the <see cref="P:Tektosyne.Geometry.PolygonGrid.Connectivity"/> of the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>.
            </para><para>
            The array element at index position [<em>i</em>][<em>j</em>] contains the coordinate
            offsets to reach the neighboring location on edge <em>j</em> when the current location
            resides in an odd- or even-numbered row or column, as indicated by <em>i</em>. Counting
            starts at the topmost edge if <see cref="F:Tektosyne.Geometry.RegularPolygon.HasTopIndex"/> is <c>true</c>
            and with the edge to the right of the topmost vertex otherwise, continuing clockwise.
            </para><para>
            If <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>true</c> for the current <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>, the inner arrays instead contain the offsets to the neighboring
            locations on all edges and vertices in an alternating sequence. Counting starts with the
            topmost edge for <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnEdge"/> orientation and with the
            topmost vertex otherwise, continuing clockwise.
            </para><para>
            Use <see cref="M:Tektosyne.Geometry.PolygonGrid.GetNeighborOffsets(Tektosyne.Geometry.PointI)"/> to determine the correct inner array for a given
            location. You may also call the <see cref="M:Tektosyne.Geometry.PolygonGrid.GetNeighbor(Tektosyne.Geometry.PointI,System.Int32)"/> and <see cref="M:Tektosyne.Geometry.PolygonGrid.GetNeighbors(Tektosyne.Geometry.PointI)"/>
            methods to directly find one or more neighbors of a given location.
            </para><para>
            <b>NeighborOffsets</b> is recalculated automatically whenever the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>
            or <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> properties change.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.Size">
            <summary>
            Gets or sets the number of rows and columns in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> value indicating the number of <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> rows and
            columns in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a <see cref="T:Tektosyne.Geometry.SizeI"/> whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> or <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> is zero or negative.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> is read-only.</exception>
            <remarks>
            Setting <b>Size</b> also recalculates the <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/> property.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.DisplayToGridCore(System.Double,System.Double)">
            <summary>
            Converts the specified coordinate pair from display to <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            coordinates.</summary>
            <param name="x">
            The x-coordinate to convert.</param>
            <param name="y">
            The y-coordinate to convert.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> whose shape contains
            the specified <paramref name="x"/> and <paramref name="y"/> display coordinates.
            </returns>
            <remarks><para>
            <b>DisplayToGridCore</b> does not check whether the specified <paramref name="x"/> and
            <paramref name="y"/> coordinates are within the current <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/>.
            </para><para>
            Therefore, the returned grid coordinates may be less than zero or greater than the
            current <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> minus one. In that case, they indicate elements on a 
            hypothetical extension of the actual <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.OnGeometryChanged">
            <summary>
            Updates all properties that depend on <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> and <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>.
            </summary>
            <remarks><para>
            <b>OnGeometryChanged</b> recalculates the <see cref="P:Tektosyne.Geometry.PolygonGrid.CenterDistance"/>, <see
            cref="P:Tektosyne.Geometry.PolygonGrid.EdgeNeighborOffsets"/>, and <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> properties, based on the
            current values of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> and <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> properties.
            </para><para>
            <b>OnGeometryChanged</b> also invokes <see cref="M:Tektosyne.Geometry.PolygonGrid.OnSizeChanged"/> to recalculate all
            dependent properties accordingly.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.OnSizeChanged">
            <summary>
            Updates all properties that depend on <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>, <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>,
            and <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/>.</summary>
            <remarks>
            <b>OnSizeChanged</b> recalculates the <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/> property, based on the
            current values of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>, <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>, and <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.AreCompatible(Tektosyne.Geometry.RegularPolygon,Tektosyne.Geometry.PolygonGridShift)">
            <summary>
            Determines whether the specified <see cref="T:Tektosyne.Geometry.RegularPolygon"/> is compatible with the
            specified <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value.</summary>
            <param name="polygon">
            The <see cref="T:Tektosyne.Geometry.RegularPolygon"/> to test.</param>
            <param name="gridShift">
            The <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value to test.</param>
            <returns>
            <c>true</c> if the specified <paramref name="polygon"/> and <paramref name="gridShift"/>
            value could be assigned to the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> and <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>
            properties of the same <see cref="T:Tektosyne.Geometry.PolygonGrid"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="polygon"/> is neither a square nor a hexagon.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygon"/> is a null reference.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="gridShift"/> is not a valid <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> value.
            </exception>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.AsReadOnly">
            <summary>
            Returns a read-only view of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <returns>
            A read-only wrapper around the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</returns>
            <remarks><para>
            Attempting to modify the read-only wrapper returned by <b>AsReadOnly</b> will raise a
            <see cref="T:System.NotSupportedException"/>. Note that the original <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            may still change, and any such changes will be reflected in the read-only view.
            </para><para>
            <b>AsReadOnly</b> buffers the newly created read-only wrapper when the method is first
            called, and returns the buffered value on subsequent calls. When invoked on a read-only
            view, <b>AsReadOnly</b> returns the instance it is invoked on.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.CreateArray``1">
            <summary>
            Creates a two-dimensional <see cref="T:System.Array"/> with the same <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> as the
            <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <typeparam name="T">
            The type of all elements in the returned <see cref="T:System.Array"/>.</typeparam>
            <returns>
            A two-dimensional <see cref="T:System.Array"/> of element type <typeparamref name="T"/> whose
            dimensions equal the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            <typeparamref name="T"/> is not supported for <see cref="T:System.Array"/> creation.</exception>
            <remarks>
            <b>CreateArray</b> maps the <see cref="F:Tektosyne.Geometry.SizeI.Width"/> of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            to the first dimension of the returned <see cref="T:System.Array"/>, and the <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> to the second dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.CreateArrayEx``1">
            <summary>
            Creates a two-dimensional <see cref="T:Tektosyne.Collections.ArrayEx`1"/> with the same <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> as
            the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <typeparam name="T">
            The type of all elements in the returned <see cref="T:Tektosyne.Collections.ArrayEx`1"/>.</typeparam>
            <returns>
            A two-dimensional <see cref="T:Tektosyne.Collections.ArrayEx`1"/> of element type <typeparamref name="T"/>
            whose dimensions equal the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            <typeparamref name="T"/> is not supported for <see cref="T:System.Array"/> creation.</exception>
            <remarks>
            <b>CreateArrayEx</b> maps the <see cref="F:Tektosyne.Geometry.SizeI.Width"/> of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            to the first dimension of the returned <see cref="T:Tektosyne.Collections.ArrayEx`1"/>, and the <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> to the second dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.DisplayToGrid(System.Double,System.Double)">
            <overloads>
            Converts the specified display location to <see cref="T:Tektosyne.Geometry.PolygonGrid"/> coordinates.
            </overloads>
            <summary>
            Converts the specified coordinate pair from display to <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            coordinates.</summary>
            <param name="x">
            The x-coordinate to convert.</param>
            <param name="y">
            The y-coordinate to convert.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> whose shape contains
            the specified <paramref name="x"/> and <paramref name="y"/> display coordinates.
            </para><para>-or-</para><para>
            The constant value <see cref="F:Tektosyne.Geometry.PolygonGrid.InvalidLocation"/> if no such <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>
            exists.</para></returns>
            <remarks>
            <b>DisplayToGrid</b> returns coordinates between (0,0) and one less than the current
            <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> in either dimension if the specified coordinates are within the
            current <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/>, and the constant value <see
            cref="F:Tektosyne.Geometry.PolygonGrid.InvalidLocation"/> otherwise.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.DisplayToGrid(Tektosyne.Geometry.PointD)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.PointD"/> from display to <see cref="T:Tektosyne.Geometry.PolygonGrid"/> 
            coordinates.</summary>
            <param name="location">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to convert.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> whose shape contains
            the specified display <paramref name="location"/>.
            </para><para>-or-</para><para>
            The constant value <see cref="F:Tektosyne.Geometry.PolygonGrid.InvalidLocation"/> if no such <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>
            exists.</para></returns>
            <remarks>
            <b>DisplayToGrid</b> returns coordinates between (0,0) and one less than the current
            <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> in either dimension if the specified <paramref name="location"/> is
            within the current <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/>, and the constant value <see
            cref="F:Tektosyne.Geometry.PolygonGrid.InvalidLocation"/> otherwise.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.DisplayToGridClipped(System.Double,System.Double)">
            <overloads>
            Converts the specified display location to <see cref="T:Tektosyne.Geometry.PolygonGrid"/> coordinates,
            clipping to the nearest element if necessary.</overloads>
            <summary>
            Converts the specified coordinate pair from display to <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            coordinates, clipping to the nearest element if necessary.</summary>
            <param name="x">
            The x-coordinate to convert.</param>
            <param name="y">
            The y-coordinate to convert.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> whose shape contains
            the specified <paramref name="x"/> and <paramref name="y"/> display coordinates.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location nearest to the specified <paramref name="x"/> and
            <paramref name="y"/> display coordinates if no such <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> exists.
            </para></returns>
            <remarks>
            <b>DisplayToGridClipped</b> always returns coordinates between (0,0) and one less than
            the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> in either dimension, regardless of whether the specified
            coordinates are within the current <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.DisplayToGridClipped(Tektosyne.Geometry.PointD)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.PointD"/> from display to <see cref="T:Tektosyne.Geometry.PolygonGrid"/> 
            coordinates, clipping to the nearest element if necessary.</summary>
            <param name="location">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to convert.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> whose shape contains
            the specified display <paramref name="location"/>.
            </para><para>-or-</para><para>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location nearest to the specified display <paramref
            name="location"/> if no such <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> exists.</para></returns>
            <remarks>
            <b>DisplayToGridClipped</b> always returns coordinates between (0,0) and one less than
            the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/> in either dimension, regardless of whether the specified
            <paramref name="location"/> is within the current <see cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetEdgeNeighborOffsets(Tektosyne.Geometry.PointI)">
            <summary>
            Gets the inner array within <see cref="P:Tektosyne.Geometry.PolygonGrid.EdgeNeighborOffsets"/> that matches the specified
            location.</summary>
            <param name="location">
            The coordinates of the location to examine.</param>
            <returns>
            The inner array within <see cref="P:Tektosyne.Geometry.PolygonGrid.EdgeNeighborOffsets"/> that matches the specified
            <paramref name="location"/>.</returns>
            <remarks><para>
            <b>GetEdgeNeighborOffsets</b> does not check whether the specified <paramref
            name="location"/> is actually within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            Please refer to <see cref="P:Tektosyne.Geometry.PolygonGrid.EdgeNeighborOffsets"/> and <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> for
            a description of the storage format used for neighbor coordinate offsets.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetElementBounds(System.Int32,System.Int32)">
            <overloads>
            Gets the bounding rectangle of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> at the specified <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> location.</overloads>
            <summary>
            Gets the bounding rectangle of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> at the specified column and row
            indices.</summary>
            <param name="column">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> column.</param>
            <param name="row">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> row.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.RectD"/> that circumscribes the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shape at the
            specified <paramref name="column"/> and <paramref name="row"/>.</returns>
            <remarks>
            <b>GetElementBounds</b> always returns a region within the current <see
            cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/> if the specified coordinates are within the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>, but does not check whether that is the case.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetElementBounds(Tektosyne.Geometry.PointI)">
            <summary>
            Gets the bounding rectangle of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> at the specified <see
            cref="T:Tektosyne.Geometry.PointI"/> location.</summary>
            <param name="location">
            The coordinates of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.RectD"/> that circumscribes the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shape at the
            specified <paramref name="location"/>.</returns>
            <remarks>
            <b>GetElementBounds</b> always returns a region within the current <see
            cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/> if the specified <paramref name="location"/> is within the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>, but does not check whether that is the case.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetElementBounds(Tektosyne.Geometry.RectI)">
            <summary>
            Gets the bounding rectangle of all <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shapes within the specified
            region.</summary>
            <param name="region">
            A <see cref="T:Tektosyne.Geometry.RectI"/> comprising the coordinates of all <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            locations to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.RectD"/> that circumscribes all <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shapes within the
            specified <paramref name="region"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="region"/> contains a <see cref="F:Tektosyne.Geometry.RectI.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectI.Height"/> that is zero or negative.</exception>
            <remarks>
            <b>GetElementBounds</b> always returns a region within the current <see
            cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/> if the specified <paramref name="region"/> is fully within the
            <see cref="T:Tektosyne.Geometry.PolygonGrid"/>, but does not check whether that is the case.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetElementVertices(System.Int32,System.Int32)">
            <summary>
            Gets the polygon vertices of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> at the specified <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> location.</summary>
            <param name="column">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> column.</param>
            <param name="row">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> row.</param>
            <returns>
            The <see cref="F:Tektosyne.Geometry.RegularPolygon.Vertices"/> of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shape at the
            specified <paramref name="column"/> and <paramref name="row"/>.</returns>
            <remarks>
            <b>GetElementVertices</b> shifts all <see cref="F:Tektosyne.Geometry.RegularPolygon.Vertices"/> of an <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> by the result of <see cref="M:Tektosyne.Geometry.PolygonGrid.GridToDisplay(System.Int32,System.Int32)"/> for the specified
            <paramref name="column"/> and <paramref name="row"/>. The grid location is not checked
            against the bounds of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetNeighbor(Tektosyne.Geometry.PointI,System.Int32)">
            <summary>
            Returns the coordinates of the location that borders the specified location on the
            specified edge or vertex.</summary>
            <param name="location">
            The coordinates of the location whose neighbor to return.</param>
            <param name="index">
            A zero-based index for the inner arrays within <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/>, indicating
            an edge or vertex of the specified <paramref name="location"/>.</param>
            <returns>
            The coordinates of the location that borders the specified <paramref name="location"/>
            on the edge or vertex indicated by the specified <paramref name="index"/>.</returns>
            <remarks><para>
            <b>GetNeighbor</b> does not check whether the specified <paramref name="location"/> or
            the returned coordinates are actually within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>. You must
            perform your own coordinate validation if desired.
            </para><para>
            The specified <paramref name="index"/> is taken <see cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> the length
            of the inner arrays within <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/>, and may therefore be negative
            or greater than the maximum index.
            </para><para>
            Please refer to <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> for a description of the index order.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetNeighborIndex(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Returns the edge or vertex on which the specified location borders another neighboring
            location.</summary>
            <param name="location">
            The coordinates of the location whose edge or vertex to return.</param>
            <param name="neighbor">
            The coordinates of a neighboring location.</param>
            <returns>
            A zero-based index for the inner arrays within <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/>, indicating
            the edge or vertex of the specified <paramref name="location"/> on which it borders the
            specified <paramref name="neighbor"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="location"/> and <paramref name="neighbor"/> are not coordinates of
            neighboring locations in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</exception>
            <remarks><para>
            <b>GetNeighborIndex</b> does not check whether the specified <paramref name="location"/> 
            or <paramref name="neighbor"/> are actually within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>. You
            must perform your own coordinate validation if desired.
            </para><para>
            <b>GetNeighborIndex</b> is the inverse of the <see cref="M:Tektosyne.Geometry.PolygonGrid.GetNeighbor(Tektosyne.Geometry.PointI,System.Int32)"/> method. That is,
            the following relations hold for all locations <em>p</em> with valid neighbors
            <em>q</em> and neighbor indices <em>i</em>:
            </para><para><code>
            GetNeighbor(p, GetNeighborIndex(p, q)) == q;<br/>
            GetNeighborIndex(p, GetNeighbor(p, i)) == i;</code>
            </para><para>
            Please refer to <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> for a description of the index order.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetNeighborOffsets(Tektosyne.Geometry.PointI)">
            <summary>
            Gets the inner array within <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> that matches the specified
            location.</summary>
            <param name="location">
            The coordinates of the location to examine.</param>
            <returns>
            The inner array within <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> that matches the specified
            <paramref name="location"/>.</returns>
            <remarks><para>
            <b>GetNeighborOffsets</b> does not check whether the specified <paramref
            name="location"/> is actually within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            Please refer to <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> for a description of the storage format
            used for neighbor coordinate offsets.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetStepDistance(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Returns the distance between the two specified locations, in movement steps.</summary>
            <param name="source">
            The coordinates of the source location.</param>
            <param name="target">
            The coordinates of the target location.</param>
            <returns>
            The non-negative distance between <paramref name="source"/> and <paramref
            name="target"/>, measured in movement steps.</returns>
            <remarks><para>
            <b>GetStepDistance</b> returns zero if the specified <paramref name="source"/> and
            <paramref name="target"/> are identical, and the minimum number of location transitions
            required to move from <paramref name="source"/> to <paramref name="target"/> otherwise.
            </para><para>
            <b>GetStepDistance</b> does not check whether the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> actually
            contains the specified <paramref name="source"/> and <paramref name="target"/>
            locations.
            </para><para>
            All distance calculations are O(1) operations, regardless of the concrete values of
            <paramref name="source"/> and <paramref name="target"/>. The calculations for hexagon
            grids were adopted from a Usenet post by Matthew V. Jessick.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GridToDisplay(System.Int32,System.Int32)">
            <overloads>
            Converts the specified <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location to display coordinates.
            </overloads>
            <summary>
            Converts the specified column and row indices to display coordinates.</summary>
            <param name="column">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> column.</param>
            <param name="row">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> row.</param>
            <returns>
            The display coordinates of the center of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shape at the
            specified <paramref name="column"/> and <paramref name="row"/>.</returns>
            <remarks>
            <b>GridToDisplay</b> always returns coordinates within the current <see
            cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/> if the specified coordinates are within the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>, but does not check whether that is the case.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GridToDisplay(Tektosyne.Geometry.PointI)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location to display coordinates.
            </summary>
            <param name="location">
            The coordinates of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location to convert.</param>
            <returns>
            The display coordinates of the center of the <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> shape at the
            specified <paramref name="location"/> in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</returns>
            <remarks>
            <b>GridToDisplay</b> always returns coordinates within the current <see
            cref="P:Tektosyne.Geometry.PolygonGrid.DisplayBounds"/> if the specified <paramref name="location"/> is within the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>, but does not check whether that is the case.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.IsDownColumn(System.Int32)">
            <summary>
            Determines whether the specified column is shifted down compared to the neighboring
            columns in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <param name="column">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> column.</param>
            <returns>
            <c>true</c> if <paramref name="column"/> is shifted downward compared to its neighbors,
            given the current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>IsDownColumn</b> does not check whether the specified <paramref name="column"/> is a
            valid column index within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            <b>IsDownColumn</b> returns <c>false</c> for all <paramref name="column"/> values if the
            current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> value is neither <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnUp"/>
            nor <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnDown"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.IsLeftRow(System.Int32)">
            <summary>
            Determines whether the specified row is shifted left compared to the neighboring rows in
            the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <param name="row">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> row.</param>
            <returns>
            <c>true</c> if <paramref name="row"/> is shifted to the left compared to its neighbors,
            given the current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>IsLeftRow</b> does not check whether the specified <paramref name="row"/> is a valid
            column index within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            <b>IsLeftRow</b> returns <c>false</c> for all <paramref name="row"/> values if the
            current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> value is neither <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowLeft"/>
            nor <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowRight"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.IsRightRow(System.Int32)">
            <summary>
            Determines whether the specified row is shifted right compared to the neighboring rows
            in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <param name="row">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> row.</param>
            <returns>
            <c>true</c> if <paramref name="row"/> is shifted to the right compared to its neighbors,
            given the current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>IsRightRow</b> does not check whether the specified <paramref name="row"/> is a valid
            column index within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            <b>IsRightRow</b> returns <c>false</c> for all <paramref name="row"/> values if the
            current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> value is neither <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowLeft"/>
            nor <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowRight"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.IsUpColumn(System.Int32)">
            <summary>
            Determines whether the specified column is shifted up compared to the neighboring
            columns in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <param name="column">
            The zero-based index of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> column.</param>
            <returns>
            <c>true</c> if <paramref name="column"/> is shifted upward compared to its neighbors,
            given the current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>IsUpColumn</b> does not check whether the specified <paramref name="column"/> is a
            valid column index within the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            <b>IsUpColumn</b> returns <c>false</c> for all <paramref name="column"/> values if the
            current <see cref="P:Tektosyne.Geometry.PolygonGrid.GridShift"/> value is neither <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnUp"/>
            nor <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnDown"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.ToSubdivision(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> to a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <param name="offset">
            The offset by which to shift the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</param>
            <param name="epsilon"><para>
            The maximum absolute difference at which two coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use a default value that depends on the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> size.
            </para></param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PolygonGrid.SubdivisionMap"/> containing a new <see cref="T:Tektosyne.Geometry.Subdivision"/> whose bounded
            <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> each correspond to one <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> of the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>, shifted by the specified <paramref name="offset"/>.</returns>
            <remarks><para>
            <b>ToSubdivision</b> shifts the <see cref="F:Tektosyne.Geometry.RegularPolygon.Vertices"/> of each <see
            cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> in the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> by the <see cref="M:Tektosyne.Geometry.PolygonGrid.GridToDisplay(System.Int32,System.Int32)"/>
            result for its grid location, plus the specified <paramref name="offset"/>. The <see
            cref="T:Tektosyne.Geometry.Subdivision"/> is then created from the resulting list of polygons.
            </para><para>
            The <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/> of the new <see cref="T:Tektosyne.Geometry.Subdivision"/> is set to the
            specified <paramref name="epsilon"/>, if positive; otherwise, to one millionth of the
            <see cref="F:Tektosyne.Geometry.RegularPolygon.Length"/> of the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>. We cannot use
            exact coordinate comparisons because shared vertices of adjacent grid elements are
            unlikely to evaluate to the exact same coordinates in all cases.
            </para><para>
            The returned <see cref="T:Tektosyne.Geometry.PolygonGrid.SubdivisionMap"/> also provides a mapping between <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> locations and the corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>.
            This mapping will become invalid as soon as either the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> or the
            created <see cref="T:Tektosyne.Geometry.Subdivision"/> are changed.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</returns>
            <remarks><para>
            <b>Clone</b> invokes the "copy constructor", <see cref="M:Tektosyne.Geometry.PolygonGrid.#ctor(Tektosyne.Geometry.PolygonGrid)"/>, to
            create a shallow copy of the current instance.
            </para><para>
            <b>Clone</b> does not preserve the value of the <see cref="F:Tektosyne.Geometry.PolygonGrid.IsReadOnly"/> property. The
            new <see cref="T:Tektosyne.Geometry.PolygonGrid"/> will be mutable even if the current instance is read-only.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.Connectivity">
            <summary>
            Gets the maximum number of direct neighbors for any <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.
            </summary>
            <value>
            The <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/> of the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/>.
            </value>
            <remarks>
            <b>Connectivity</b> also equals the size of an inner array within <see
            cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.NodeCount">
            <summary>
            Gets the total number of <see cref="P:Tektosyne.Geometry.PolygonGrid.Nodes"/> in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</summary>
            <value>
            The total number of <see cref="P:Tektosyne.Geometry.PolygonGrid.Nodes"/> in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</value>
            <remarks>
            <b>NodeCount</b> returns the product of the <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> of the current <see cref="P:Tektosyne.Geometry.PolygonGrid.Size"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.Nodes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all nodes in the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/>.</summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all nodes in the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/>.</value>
            <remarks>
            <b>Nodes</b> returns all <see cref="T:Tektosyne.Geometry.PointI"/> locations in the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>, starting at (0,0) and incrementing x-coordinates before
            y-coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.Contains(System.Int32,System.Int32)">
            <overloads>
            Determines whether the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> contains the specified locations.
            </overloads>
            <summary>
            Determines whether the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> contains the specified coordinate pair.
            </summary>
            <param name="x">
            The x-coordinate to examine.</param>
            <param name="y">
            The y-coordinate to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> contains the specified <paramref name="x"/>
            and <paramref name="y"/> coordinates; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.Contains(Tektosyne.Geometry.PointI)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> contains the specified node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> contains the specified <paramref
            name="node"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> returns the result of <see cref="M:Tektosyne.Geometry.PolygonGrid.Contains(System.Int32,System.Int32)"/> for the
            specified <paramref name="node"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.Contains(Tektosyne.Geometry.RectI)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> entirely contains the specified <see
            cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectI"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> entirely contains the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetDistance(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)">
            <summary>
            Returns the distance between the two specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes.
            </summary>
            <param name="source">
            The source node in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</param>
            <param name="target">
            The target node in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</param>
            <returns>
            The non-negative distance between <paramref name="source"/> and <paramref
            name="target"/>, measured in movement steps.</returns>
            <remarks>
            <b>GetDistance</b> returns the result of <see cref="M:Tektosyne.Geometry.PolygonGrid.GetStepDistance(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)"/> for the specified
            <paramref name="source"/> and <paramref name="target"/>, which is always an <see
            cref="T:System.Int32"/> value converted to <see cref="T:System.Double"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetNearestNode(Tektosyne.Geometry.PointD)">
            <summary>
            Gets the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node that is nearest to the specified location, in
            world coordinates.</summary>
            <param name="location">
            The <see cref="T:Tektosyne.Geometry.PointD"/> location, in world coordinates, whose nearest <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node to find.</param>
            <returns>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose <see cref="M:Tektosyne.Geometry.PolygonGrid.GetWorldLocation(Tektosyne.Geometry.PointI)"/> result is
            nearest to the specified <paramref name="location"/>.</returns>
            <remarks>
            <b>GetNearestNode</b> returns the result of <see cref="M:Tektosyne.Geometry.PolygonGrid.DisplayToGridClipped(System.Double,System.Double)"/> for the
            specified <paramref name="location"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetNeighbors(Tektosyne.Geometry.PointI)">
            <overloads>
            Returns all neighbors of the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</overloads>
            <summary>
            Returns all direct neighbors of the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose neighbors to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IList`1"/> containing all valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes that are
            directly connected with the specified <paramref name="node"/>. The number of elements is
            at most <see cref="P:Tektosyne.Geometry.PolygonGrid.Connectivity"/>.</returns>
            <remarks><para>
            <b>GetNeighbors</b> never returns a null reference, but it returns an empty <see
            cref="T:System.Collections.Generic.IList`1"/> if the specified <paramref name="node"/> or all its neighbors are
            outside the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            Otherwise, <b>GetNeighbors</b> calculates all neighboring locations by adding each
            element in the appropriate inner array within <see cref="P:Tektosyne.Geometry.PolygonGrid.NeighborOffsets"/> to the
            specified <paramref name="node"/>, omitting any neighbors outside the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetNeighbors(Tektosyne.Geometry.PointI,System.Int32)">
            <summary>
            Returns all <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes within the specified step distance of the
            specified node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose neighbors to return.</param>
            <param name="distance">
            The distance around the specified <paramref name="node"/>, in movement steps, in which
            another node is considered a neighbor.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IList`1"/> containing all valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes whose
            step distance from the specified <paramref name="node"/> is greater than zero, and equal
            to or less than <paramref name="distance"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="distance"/> is zero or negative.</exception>
            <remarks><para>
            <b>GetNeighbors</b> never returns a null reference, but it returns an empty <see
            cref="T:System.Collections.Generic.IList`1"/> if the specified <paramref name="node"/> or all its neighbors are
            outside the <see cref="T:Tektosyne.Geometry.PolygonGrid"/>. Otherwise, the elements of the returned <see
            cref="T:System.Collections.Generic.IList`1"/> are ordered by increasing x- and y-coordinates. 
            </para><para>
            Note that the specified <paramref name="distance"/> refers to the result of <see
            cref="M:Tektosyne.Geometry.PolygonGrid.GetStepDistance(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)"/>, not <see cref="M:Tektosyne.Geometry.PolygonGrid.GetDistance(Tektosyne.Geometry.PointI,Tektosyne.Geometry.PointI)"/>. This overload is a specialized
            variant of the <see cref="M:Tektosyne.Graph.IGraph2D`1.GetNeighbors(`0)"/> method defined by the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> interface.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetWorldLocation(Tektosyne.Geometry.PointI)">
            <summary>
            Gets the location of the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, in world coordinates.
            </summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose location to return.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PointD"/> location of the specified <paramref name="node"/>, in world
            coordinates.</returns>
            <remarks>
            <b>GetWorldLocation</b> returns the result of <see cref="M:Tektosyne.Geometry.PolygonGrid.GridToDisplay(System.Int32,System.Int32)"/> for the
            specified <paramref name="node"/>. That is, world coordinates are equivalent to display
            coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.GetWorldRegion(Tektosyne.Geometry.PointI)">
            <summary>
            Gets the region covered by the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, in world
            coordinates.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose region to return.</param>
            <returns>
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> vertices of the polygonal
            region covered by the specified <paramref name="node"/>, in world coordinates.</returns>
            <remarks>
            <b>GetWorldRegion</b> returns the result of <see cref="M:Tektosyne.Geometry.PolygonGrid.GetElementVertices(System.Int32,System.Int32)"/> for the
            specified <paramref name="node"/>. That is, node regions in world coordinates are
            equivalent to <see cref="P:Tektosyne.Geometry.PolygonGrid.Element"/> bounds in display coordinates.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PolygonGrid.InstanceData">
            <summary>
            Contains the values of most instance properties of a <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </summary>
            <remarks>
            <b>InstanceData</b> is a simple data container whose fields back most of the instance
            properties of an associated <see cref="T:Tektosyne.Geometry.PolygonGrid"/> object. When a read-only view is
            created, it shares the <b>InstanceData</b> of the original <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            This allows the read-only view to reflect all changes to the original instance.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.InstanceData.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid.InstanceData"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid.InstanceData"/> class with default
            properties.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.InstanceData.#ctor(Tektosyne.Geometry.PolygonGrid.InstanceData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid.InstanceData"/> class that is a shallow
            copy of the specified instance.</summary>
            <param name="data">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid.InstanceData"/> object whose field values should be copied to the new
            instance.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.Geometry.PolygonGrid.#ctor(Tektosyne.Geometry.PolygonGrid)"/> for details.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PolygonGrid.SubdivisionMap">
            <summary>
            Maps the faces of a planar <see cref="T:Tektosyne.Geometry.Subdivision"/> to <see cref="T:Tektosyne.Geometry.PolygonGrid"/>
            locations.</summary>
            <remarks><para>
            <b>SubdivisionMap</b> provides a mapping between all faces of a planar <see
            cref="T:Tektosyne.Geometry.Subdivision"/> and the <see cref="T:Tektosyne.Geometry.PointI"/> locations of the <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> from which the <see cref="T:Tektosyne.Geometry.Subdivision"/> was created.
            </para><para>
            The mapping is realized by a pair of arrays for optimal runtime efficiency. However,
            <b>SubdivisionMap</b> will not reflect changes to the underlying <see
            cref="T:Tektosyne.Geometry.Subdivision"/> or <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.#ctor(Tektosyne.Geometry.Subdivision,Tektosyne.Geometry.PolygonGrid,Tektosyne.Geometry.PointI[],Tektosyne.Geometry.SubdivisionFace[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.PolygonGrid.SubdivisionMap"/> class.</summary>
            <param name="source">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all mapped faces.</param>
            <param name="target">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> that defines all mapped locations.</param>
            <param name="faceToGrid">
            A one-dimensional <see cref="T:System.Array"/> that maps <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> keys
            to <see cref="T:Tektosyne.Geometry.PolygonGrid"/> locations.</param>
            <param name="gridToFace">
            A two-dimensional <see cref="T:System.Array"/> that maps <see cref="T:Tektosyne.Geometry.PolygonGrid"/> locations
            to <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> objects.</param>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.Source">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all mapped faces.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all faces accepted and returned by the
            <see cref="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.ToFace(Tektosyne.Geometry.PointI)"/> methods, respectively.</value>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.Target">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> that defines all mapped locations.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> that defines all locations returned and accepted by
            the <see cref="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.ToFace(Tektosyne.Geometry.PointI)"/> methods, respectively.</value>
        </member>
        <member name="P:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.Tektosyne#Geometry#ISubdivisionMap{Tektosyne#Geometry#PointI}#Target">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> that defines all mapped locations.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> that defines all locations returned and accepted by
            the <see cref="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.ToFace(Tektosyne.Geometry.PointI)"/> methods, respectively.</value>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> into the associated <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> location.</summary>
            <param name="face">
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> to convert.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location associated with <paramref name="face"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="face"/> contains a <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> that is less
            than one or greater than the number of <see cref="T:Tektosyne.Geometry.PolygonGrid"/> locations.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="face"/> is a null reference.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.PolygonGrid.SubdivisionMap.ToFace(Tektosyne.Geometry.PointI)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location into the associated <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <param name="value">
            The <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location to convert.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> associated with <paramref name="value"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="value"/> is not a valid <see cref="T:Tektosyne.Geometry.PolygonGrid"/> location.
            </exception>
        </member>
        <member name="T:Tektosyne.Geometry.PolygonGridShift">
            <summary>
            Specifies the shifting of rows or columns in a <see cref="T:Tektosyne.Geometry.PolygonGrid"/>.</summary>
            <remarks><para>
            <b>PolygonGridShift</b> specifies if and how even-numbered rows or columns in a rectangular
            <see cref="T:Tektosyne.Geometry.PolygonGrid"/> are shifted, relative to odd-numbered rows or columns. The valid
            choices for a given <see cref="T:Tektosyne.Geometry.PolygonGrid"/> depend on the underlying <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/>.
            </para><note type="caution">
            The terms "even-numbered" and "odd-numbered" refer to a counting sequence that starts at one
            for the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> row or column at index position zero. This first row or
            column is therefore considered <em>odd-numbered</em> rather than even-numbered.
            </note></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonGridShift.None">
            <summary>
            Specifies that no <see cref="T:Tektosyne.Geometry.PolygonGrid"/> rows or columns are shifted.</summary>
            <remarks><para>
            <b>None</b> is the only valid choice for a <see cref="T:Tektosyne.Geometry.PolygonGrid"/> of squares with
            <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnEdge"/> orientation.
            </para><para>
            <b>None</b> is not a valid choice for any other <see cref="T:Tektosyne.Geometry.RegularPolygon"/> type. All
            <see cref="T:Tektosyne.Geometry.PolygonGridShift"/> values other than <b>None</b> are valid for a <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> of squares with <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnVertex"/>
            orientation.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonGridShift.ColumnUp">
            <summary>
            Specifies that even-numbered <see cref="T:Tektosyne.Geometry.PolygonGrid"/> columns are shifted upward.
            </summary>
            <remarks>
            <b>ColumnUp</b> and <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnDown"/> are the only valid choices for a <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> of hexagons with <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnEdge"/>
            orientation.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonGridShift.ColumnDown">
            <summary>
            Specifies that even-numbered <see cref="T:Tektosyne.Geometry.PolygonGrid"/> columns are shifted downward.
            </summary>
            <remarks>
            <see cref="F:Tektosyne.Geometry.PolygonGridShift.ColumnUp"/> and <b>ColumnDown</b> are the only valid choices for a <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> of hexagons with <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnEdge"/>
            orientation.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonGridShift.RowRight">
            <summary>
            Specifies that even-numbered <see cref="T:Tektosyne.Geometry.PolygonGrid"/> rows are shifted to the right.
            </summary>
            <remarks>
            <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowLeft"/> and <b>RowRight</b> are the only valid choices for a <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> of hexagons with <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnVertex"/>
            orientation.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonGridShift.RowLeft">
            <summary>
            Specifies that even-numbered <see cref="T:Tektosyne.Geometry.PolygonGrid"/> rows are shifted to the left.
            </summary>
            <remarks>
            <b>RowLeft</b> and <see cref="F:Tektosyne.Geometry.PolygonGridShift.RowRight"/> are the only valid choices for a <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> of hexagons with <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnVertex"/>
            orientation.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.PolygonLocation">
            <summary>
            Specifies the location of a point relative to an arbitrary polygon.</summary>
            <remarks>
            <b>PolygonLocation</b> specifies the possible return values of the <see
            cref="M:Tektosyne.Geometry.GeoAlgorithms.PointInPolygon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD[])"/> algorithm.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonLocation.Inside">
            <summary>
            Specifies that the point is inside the polygon.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonLocation.Outside">
            <summary>
            Specifies that the point is outside the polygon.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonLocation.Edge">
            <summary>
            Specifies that the point coincides with an edge of the polygon.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonLocation.Vertex">
            <summary>
            Specifies that the point coincides with a vertex of the polygon.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.PolygonOrientation">
            <summary>
            Specifies the possible orientations of a <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</summary>
            <remarks>
            <b>PolygonOrientation</b> specifies the two possible orientations of a regular polygon as
            represented by the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> class.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonOrientation.OnEdge">
            <summary>
            Specifies that the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> is lying on an edge.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.PolygonOrientation.OnVertex">
            <summary>
            Specifies that the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> is standing on a vertex.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.RectD">
            <summary>
            Represents a rectangular region in two-dimensional space, using <see cref="T:System.Double"/>
            coordinates.</summary>
            <remarks><para>
            <b>RectD</b> is an immutable structure whose four <see cref="T:System.Double"/> coordinates and 
            extensions define a rectangular region in two-dimensional space.
            </para><para>
            The <see cref="P:Tektosyne.Geometry.RectD.Left"/>, <see cref="P:Tektosyne.Geometry.RectD.Top"/>, <see cref="P:Tektosyne.Geometry.RectD.Right"/>, and <see
            cref="P:Tektosyne.Geometry.RectD.Bottom"/> properties assume drawing orientation rather than mathematical
            orientation. That is, x-coordinates increase towards the right but y-coordinates increase
            downward. This is the same orientation used by all BCL rectangle structures.
            </para><para>
            <b>RectD</b> uses a <em>geometric inclusion model</em> to determine which coordinates are
            contained within the rectangle, like <b>System.Windows.Rect</b>. That is, <see
            cref="F:Tektosyne.Geometry.RectD.Width"/> and <see cref="F:Tektosyne.Geometry.RectD.Height"/> act like the dimensions of a closed
            polygon, indicating the greatest coordinates within the <see cref="T:Tektosyne.Geometry.RectD"/>. Therefore, the
            coordinates <see cref="P:Tektosyne.Geometry.RectD.Right"/> (= <see cref="P:Tektosyne.Geometry.RectD.Left"/> + <see
            cref="F:Tektosyne.Geometry.RectD.Width"/>) and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> (= <see cref="P:Tektosyne.Geometry.RectD.Top"/> + <see
            cref="F:Tektosyne.Geometry.RectD.Height"/>) are still considered part of the <see cref="T:Tektosyne.Geometry.RectD"/>.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.RectI"/> structure to represent rectangles with <see cref="T:System.Int32"/>
            components, and the <see cref="T:Tektosyne.Geometry.RectF"/> structure to represent rectangles with <see
            cref="T:System.Single"/> components. You can convert <see cref="T:Tektosyne.Geometry.RectD"/> instances to and from <see
            cref="T:Tektosyne.Geometry.RectI"/> and <see cref="T:Tektosyne.Geometry.RectF"/> instances, rounding off the <see cref="T:System.Double"/>
            components as necessary.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectD"/> structure.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectD"/> structure with the specified
            <see cref="T:System.Double"/> coordinates and dimensions.</summary>
            <param name="x">
            The smallest <see cref="F:Tektosyne.Geometry.RectD.X"/> coordinate within the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <param name="y">
            The smallest <see cref="F:Tektosyne.Geometry.RectD.Y"/> coordinate within the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <param name="width">
            The <see cref="F:Tektosyne.Geometry.RectD.Width"/> of the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <param name="height">
            The <see cref="F:Tektosyne.Geometry.RectD.Height"/> of the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is less than zero.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.#ctor(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectD"/> structure that contains the
            specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="point1">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> that the <see cref="T:Tektosyne.Geometry.RectD"/> must contain.</param>
            <param name="point2">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> that the <see cref="T:Tektosyne.Geometry.RectD"/> must contain.</param>
            <remarks>
            <see cref="P:Tektosyne.Geometry.RectD.Location"/> is set to the smaller coordinate of <paramref name="point1"/> and
            <paramref name="point2"/> in each dimension, and <see cref="P:Tektosyne.Geometry.RectD.Size"/> is set to the
            difference between the larger and the smaller coordinate in each dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.#ctor(Tektosyne.Geometry.PointD,Tektosyne.Geometry.SizeD)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectD"/> structure with the specified
            <see cref="T:Tektosyne.Geometry.PointD"/> coordinates and <see cref="T:Tektosyne.Geometry.SizeD"/> dimensions.</summary>
            <param name="location">
            The <see cref="P:Tektosyne.Geometry.RectD.Location"/> of the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <param name="size">
            The <see cref="P:Tektosyne.Geometry.RectD.Size"/> of the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.RectD.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.RectD"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.RectD"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectD.X">
            <summary>
            The smallest x-coordinate within the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <remarks>
            <b>X</b> is the x-coordinate of the left edge of the <see cref="T:Tektosyne.Geometry.RectD"/>, assuming that
            x-coordinates increase to the right.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectD.Y">
            <summary>
            The smallest y-coordinate within the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <remarks>
            <b>Y</b> is the y-coordinate of the top edge of the <see cref="T:Tektosyne.Geometry.RectD"/>, assuming that
            y-coordinates increase downward.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectD.Width">
            <summary>
            The horizontal extension of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <remarks>
            <b>Width</b> is never less than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectD.Height">
            <summary>
            The vertical extension of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <remarks>
            <b>Height</b> is never less than zero.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.Location">
            <summary>
            Gets the coordinates of the upper-left corner of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointD"/> containing the <see cref="F:Tektosyne.Geometry.RectD.X"/> and <see cref="F:Tektosyne.Geometry.RectD.Y"/> coordinates.
            </value>
            <remarks>
            <b>Location</b> holds the smallest x- and y-coordinates that are contained within the
            <see cref="T:Tektosyne.Geometry.RectD"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.Size">
            <summary>
            Gets the extension of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> containing the <see cref="F:Tektosyne.Geometry.RectD.Width"/> and <see cref="F:Tektosyne.Geometry.RectD.Height"/>
            dimensions.</value>
            <remarks>
            The <see cref="T:Tektosyne.Geometry.RectD"/> covers the area beginning at <see cref="P:Tektosyne.Geometry.RectD.Location"/> and
            extending over <see cref="P:Tektosyne.Geometry.RectD.Size"/> with increasing x- and y-coordinates.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.Left">
            <summary>
            Gets the x-coordinate of the left edge of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            The <see cref="F:Tektosyne.Geometry.RectD.X"/> coordinate of the <see cref="T:Tektosyne.Geometry.RectD"/>.</value>
            <remarks>
            <b>Left</b> is the smallest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectD"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.Top">
            <summary>
            Gets the y-coordinate of the top edge of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            The <see cref="F:Tektosyne.Geometry.RectD.Y"/> coordinate of the <see cref="T:Tektosyne.Geometry.RectD"/>.</value>
            <remarks>
            <b>Top</b> is the smallest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectD"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.Right">
            <summary>
            Gets the x-coordinate of the right edge of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            The sum of the <see cref="F:Tektosyne.Geometry.RectD.X"/> coordinate and the <see cref="F:Tektosyne.Geometry.RectD.Width"/> dimension.</value>
            <remarks>
            <b>Right</b> is the greatest x-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectD"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            The sum of the <see cref="F:Tektosyne.Geometry.RectD.Y"/> coordinate and the <see cref="F:Tektosyne.Geometry.RectD.Height"/> dimension.
            </value>
            <remarks>
            <b>Bottom</b> is the greatest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectD"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.TopLeft">
            <summary>
            Gets the upper-left corner of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectD.Left"/> and whose <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectD.Top"/>.
            </value>
            <remarks>
            <b>TopLeft</b> returns the same value as <see cref="P:Tektosyne.Geometry.RectD.Location"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.TopRight">
            <summary>
            Gets the upper-right corner of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectD.Right"/> and whose <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectD.Top"/>.
            </value>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.BottomLeft">
            <summary>
            Gets the lower-left corner of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectD.Left"/> and whose <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectD.Bottom"/>.
            </value>
        </member>
        <member name="P:Tektosyne.Geometry.RectD.BottomRight">
            <summary>
            Gets the lower-right corner of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointD"/> whose <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectD.Right"/> and whose <see cref="F:Tektosyne.Geometry.PointD.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectD.Bottom"/>.
            </value>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Circumscribe">
            <overloads>
            Circumscribes a rectangle around the specified coordinates.</overloads>
            <summary>
            Circumscribes a <see cref="T:Tektosyne.Geometry.RectI"/> around the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> that entirely covers the <see cref="T:Tektosyne.Geometry.RectD"/>.</returns>
            <remarks>
            <b>Circumscribe</b> returns a <see cref="T:Tektosyne.Geometry.RectI"/> that contains the <see
            cref="M:Tektosyne.Fortran.Floor(System.Decimal)"/> of the <see cref="F:Tektosyne.Geometry.RectD.X"/> and <see cref="F:Tektosyne.Geometry.RectD.Y"/> coordinates, and the
            <see cref="M:Tektosyne.Fortran.Ceiling(System.Decimal)"/> of the <see cref="F:Tektosyne.Geometry.RectD.Width"/> and <see cref="F:Tektosyne.Geometry.RectD.Height"/>
            dimensions. This ensures that the <see cref="T:Tektosyne.Geometry.RectD"/> is entirely covered.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Circumscribe(Tektosyne.Geometry.PointD[])">
            <summary>
            Circumscribes a <see cref="T:Tektosyne.Geometry.RectD"/> around the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates whose bounds to
            determine.</param>
            <returns>
            The smallest <see cref="T:Tektosyne.Geometry.RectD"/> that contains all specified <paramref name="points"/>.
            </returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty array.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Contains(System.Double,System.Double)">
            <overloads>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified coordinates.
            </overloads>
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <see cref="T:System.Double"/>
            coordinates.</summary>
            <param name="x">
            The x-coordinate to examine.</param>
            <param name="y">
            The y-coordinate to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <paramref name="x"/> and
            <paramref name="y"/> coordinates; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> assumes that the <see cref="T:Tektosyne.Geometry.RectD"/> contains the <see cref="P:Tektosyne.Geometry.RectD.Right"/>
            and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Contains(Tektosyne.Geometry.PointD)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <paramref name="point"/>;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> assumes that the <see cref="T:Tektosyne.Geometry.RectD"/> contains the <see cref="P:Tektosyne.Geometry.RectD.Right"/>
            and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Contains(Tektosyne.Geometry.RectD)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectD"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> entirely contains the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> returns <c>true</c> even if both <see cref="T:Tektosyne.Geometry.RectD"/> instances have a
            <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see cref="F:Tektosyne.Geometry.RectD.Height"/> of zero, provided they have the same <see
            cref="P:Tektosyne.Geometry.RectD.Location"/> in the corresponding dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.ContainsOpen(System.Double,System.Double)">
            <overloads>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified coordinates, excluding
            <see cref="P:Tektosyne.Geometry.RectD.Right"/> and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/>.</overloads>
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <see cref="T:System.Double"/>
            coordinates, excluding <see cref="P:Tektosyne.Geometry.RectD.Right"/> and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/>.</summary>
            <param name="x">
            The x-coordinate to examine.</param>
            <param name="y">
            The y-coordinate to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <paramref name="x"/> and
            <paramref name="y"/> coordinates, excluding <see cref="P:Tektosyne.Geometry.RectD.Right"/> and <see
            cref="P:Tektosyne.Geometry.RectD.Bottom"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>ContainsOpen</b> assumes that the <see cref="T:Tektosyne.Geometry.RectD"/> does not contain the <see
            cref="P:Tektosyne.Geometry.RectD.Right"/> and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> coordinates, emulating <see cref="T:Tektosyne.Geometry.RectI"/>
            behavior.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.ContainsOpen(Tektosyne.Geometry.PointD)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates, excluding <see cref="P:Tektosyne.Geometry.RectD.Right"/> and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/>.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> contains the specified <paramref name="point"/>,
            excluding <see cref="P:Tektosyne.Geometry.RectD.Right"/> and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <b>ContainsOpen</b> assumes that the <see cref="T:Tektosyne.Geometry.RectD"/> does not contain the <see
            cref="P:Tektosyne.Geometry.RectD.Right"/> and <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> coordinates, emulating <see cref="T:Tektosyne.Geometry.RectI"/>
            behavior.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.GetDistanceVector(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the distance vector from the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to the
            nearest edges of the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> vector indicating the distance of each <paramref name="q"/> 
            coordinate from the nearest corresponding edge of the <see cref="T:Tektosyne.Geometry.RectD"/>.</returns>
            <remarks><para>
            <b>GetDistanceVector</b> defines the components of the returned <see cref="T:Tektosyne.Geometry.PointD"/>
            vector as follows, assuming that <em>qx</em> and <em>qy</em> are the coordinates of
            <paramref name="q"/>:
            </para><list type="table"><listheader>
            <term><b>X</b></term><term><b>Y</b></term><description>Condition</description>
            </listheader><item>
            <term>0</term><term></term><description>
            <see cref="P:Tektosyne.Geometry.RectD.Left"/> &lt;= <em>qx</em> &lt;= <see cref="P:Tektosyne.Geometry.RectD.Right"/></description>
            </item><item>
            <term><em>qx</em> – <see cref="P:Tektosyne.Geometry.RectD.Left"/></term><term></term>
            <description><em>qx</em> &lt; <see cref="P:Tektosyne.Geometry.RectD.Left"/></description>
            </item><item>
            <term><em>qx</em> – <see cref="P:Tektosyne.Geometry.RectD.Right"/></term><term></term>
            <description><em>qx</em> &gt; <see cref="P:Tektosyne.Geometry.RectD.Right"/></description>
            </item><item>
            <term/><term>0</term><description>
            <see cref="P:Tektosyne.Geometry.RectD.Top"/> &lt;= <em>qy</em> &lt;= <see cref="P:Tektosyne.Geometry.RectD.Bottom"/></description>
            </item><item>
            <term/><term><em>qy</em> – <see cref="P:Tektosyne.Geometry.RectD.Top"/></term>
            <description><em>qy</em> &lt; <see cref="P:Tektosyne.Geometry.RectD.Top"/></description>
            </item><item>
            <term/><term><em>qy</em> – <see cref="P:Tektosyne.Geometry.RectD.Bottom"/></term>
            <description><em>qy</em> &gt; <see cref="P:Tektosyne.Geometry.RectD.Bottom"/></description>
            </item></list><para>
            Each vector component is zero exactly if the corresponding <paramref name="q"/>
            coordinate lies within the corresponding <see cref="T:Tektosyne.Geometry.RectD"/> extension. Otherwise, the
            component’s absolute value indicates the coordinate’s distance from the nearest <see
            cref="T:Tektosyne.Geometry.RectD"/> edge, and its sign indicates that edge itself.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.RectD"/> instance.</summary>
            <returns>
            An <see cref="T:System.Double"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.RectD.X"/>, <see cref="F:Tektosyne.Geometry.RectD.Y"/>, <see
            cref="F:Tektosyne.Geometry.RectD.Width"/>, and <see cref="F:Tektosyne.Geometry.RectD.Height"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Intersect(Tektosyne.Geometry.LineD,Tektosyne.Geometry.LineD@)">
            <overloads>
            Intersects the <see cref="T:Tektosyne.Geometry.RectD"/> with the specified object.</overloads>
            <summary>
            Intersects the <see cref="T:Tektosyne.Geometry.RectD"/> with the specified <see cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineD"/> to intersect with the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <param name="intersection">
            On success, the intersection of the <see cref="T:Tektosyne.Geometry.RectD"/> and the specified <paramref
            name="line"/>; otherwise, <see cref="F:Tektosyne.Geometry.LineD.Empty"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified <paramref
            name="line"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Intersect</b> performs the Liang-Barsky line clipping algorithm. This C#
            implementation was adapted from the C implementation by Daniel White, published at <a
            href="http://www.skytopia.com/project/articles/compsci/clipping.html">Skytopia</a>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Intersect(Tektosyne.Geometry.PointD[],Tektosyne.Geometry.PointD[]@)">
            <summary>
            Intersects the <see cref="T:Tektosyne.Geometry.RectD"/> with the specified arbitrary polygon.</summary>
            <param name="polygon">
            An <see cref="T:System.Array"/> containing <see cref="T:Tektosyne.Geometry.PointD"/> coordinates that are the vertices
            of the polygon to intersect with the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <param name="intersection">
            On success, the intersection of the <see cref="T:Tektosyne.Geometry.RectD"/> and the specified <paramref
            name="polygon"/>; otherwise, an empty <see cref="T:System.Array"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified <paramref
            name="polygon"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="polygon"/> is a null reference or an empty array.</exception>
            <remarks><para>
            <b>Intersect</b> performs the Sutherland–Hodgman polygon clipping algorithm, optimized
            for an axis-aligned <see cref="T:Tektosyne.Geometry.RectD"/> as the clipping polygon. At intersection points,
            the border coordinates of the <see cref="T:Tektosyne.Geometry.RectD"/> are copied rather than computed,
            allowing exact floating-point comparisons.
            </para><para>
            The specified <paramref name="polygon"/> and the returned <paramref
            name="intersection"/> are implicitly assumed to be closed, with an edge connecting the
            first and last vertex. Therefore, all vertices should be different.
            </para><para>
            Unless the specified <paramref name="polygon"/> is convex, the returned <paramref
            name="intersection"/> may represent multiple polygons, connected across the borders of
            the <see cref="T:Tektosyne.Geometry.RectD"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Intersect(Tektosyne.Geometry.RectD,Tektosyne.Geometry.RectD@)">
            <summary>
            Intersects the <see cref="T:Tektosyne.Geometry.RectD"/> with the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectD"/> to intersect with this instance.</param>
            <param name="intersection">
            On success, the intersection of the <see cref="T:Tektosyne.Geometry.RectD"/> and the specified <paramref
            name="rect"/>; otherwise, <see cref="F:Tektosyne.Geometry.RectD.Empty"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.IntersectsWith(Tektosyne.Geometry.LineD)">
            <overloads>
            Determines whether the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified object.
            </overloads>
            <summary>
            Determines whether the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified <see
            cref="T:Tektosyne.Geometry.LineD"/>.</summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineD"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified <paramref
            name="line"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IntersectsWith</b> performs the same Liang-Barsky line clipping algorithm as <see
            cref="M:Tektosyne.Geometry.RectD.Intersect(Tektosyne.Geometry.LineD,Tektosyne.Geometry.LineD@)"/>, but without computing the intersecting line
            segment.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.IntersectsWith(Tektosyne.Geometry.RectD)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified rectangle.
            </summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectD"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectD"/> intersects with the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IntersectsWith</b> returns <c>true</c> even if both <see cref="T:Tektosyne.Geometry.RectD"/> instances
            have a <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see cref="F:Tektosyne.Geometry.RectD.Height"/> of zero, provided they have the same
            <see cref="P:Tektosyne.Geometry.RectD.Location"/> in the corresponding dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Locate(Tektosyne.Geometry.PointD)">
            <overloads>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectD"/>.</overloads>
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectD"/>, using exact coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.RectD"/>.</returns>
            <remarks>
            <b>Locate</b> never returns <see cref="F:Tektosyne.Geometry.RectLocation.None"/>, and always returns a
            bitwise combination of an <b>…X</b> and a <b>…Y</b> value.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Locate(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectD"/>, given the specified epsilon for coordinate comparisons.
            </summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <param name="epsilon">
            The maximum absolute distance at which coordinates should be considered equal.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.RectD"/>.</returns>
            <remarks><para>
            <b>Locate</b> is identical with the basic <see cref="M:Tektosyne.Geometry.RectD.Locate(Tektosyne.Geometry.PointD)"/> overload but uses
            the specified <paramref name="epsilon"/> to compare individual coordinates.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Locate</b>
            does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Offset(System.Double,System.Double)">
            <overloads>
            Moves the <see cref="T:Tektosyne.Geometry.RectD"/> by the specified offset.</overloads>
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.RectD"/> by the specified <see cref="T:System.Double"/> values.</summary>
            <param name="x">
            The horizontal offset applied to the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <param name="y">
            The vertical offset applied to the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.RectD"/> with the same <see cref="P:Tektosyne.Geometry.RectD.Size"/> as this instance, and whose
            <see cref="F:Tektosyne.Geometry.RectD.X"/> and <see cref="F:Tektosyne.Geometry.RectD.Y"/> coordinates are offset by the specified <paramref
            name="x"/> and <paramref name="y"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Offset(Tektosyne.Geometry.PointD)">
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.RectD"/> by the specified <see cref="T:Tektosyne.Geometry.PointD"/> vector.</summary>
            <param name="vector">
            A <see cref="T:Tektosyne.Geometry.PointD"/> value whose components define the horizontal and vertical offset
            applied to the <see cref="T:Tektosyne.Geometry.RectD"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.RectD"/> with the same <see cref="P:Tektosyne.Geometry.RectD.Size"/> as this instance, and whose
            <see cref="P:Tektosyne.Geometry.RectD.Location"/> is offset by the specified <paramref name="vector"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.RectD"/> to a <see cref="T:Tektosyne.Geometry.RectI"/> by rounding coordinates and
            dimensions to the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> instance whose <see cref="P:Tektosyne.Geometry.RectI.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Size"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.RectD"/>, rounded to the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Double"/> components of the <see cref="T:Tektosyne.Geometry.RectD"/> are converted to <see
            cref="T:System.Int32"/> components using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.ToRectF">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.RectD"/> to a <see cref="T:Tektosyne.Geometry.RectF"/> by casting coordinates and
            dimensions to the equivalent <see cref="T:System.Single"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectF"/> instance whose <see cref="P:Tektosyne.Geometry.RectF.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectF.Size"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.RectD"/>, cast to the equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.ToRectI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.RectD"/> to a <see cref="T:Tektosyne.Geometry.RectI"/> by truncating coordinates and
            dimensions to the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> instance whose <see cref="P:Tektosyne.Geometry.RectI.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Size"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.RectD"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.RectD"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.RectD.X"/>, <see cref="F:Tektosyne.Geometry.RectD.Y"/>,
            <see cref="F:Tektosyne.Geometry.RectD.Width"/>, and <see cref="F:Tektosyne.Geometry.RectD.Height"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Union(Tektosyne.Geometry.RectD)">
            <summary>
            Determines the union of the <see cref="T:Tektosyne.Geometry.RectD"/> and the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectD"/> to combine with this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectD"/> that contains the union of the specified <paramref name="rect"/>
            and this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.op_Equality(Tektosyne.Geometry.RectD,Tektosyne.Geometry.RectD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectD"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.RectD.Equals(Tektosyne.Geometry.RectD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.RectD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.op_Inequality(Tektosyne.Geometry.RectD,Tektosyne.Geometry.RectD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectD"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.RectD.Equals(Tektosyne.Geometry.RectD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.RectD"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.op_Implicit(Tektosyne.Geometry.RectF)~Tektosyne.Geometry.RectD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.RectF"/> to a <see cref="T:Tektosyne.Geometry.RectD"/> with identical coordinates and
            dimensions.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.RectD"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectD"/> instance whose <see cref="P:Tektosyne.Geometry.RectD.Location"/> and <see cref="P:Tektosyne.Geometry.RectD.Size"/>
            properties equal the corresponding properties of the specified <paramref name="rect"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.op_Implicit(Tektosyne.Geometry.RectI)~Tektosyne.Geometry.RectD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.RectI"/> to a <see cref="T:Tektosyne.Geometry.RectD"/> with identical coordinates and
            dimensions.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.RectD"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectD"/> instance whose <see cref="P:Tektosyne.Geometry.RectD.Location"/> and <see cref="P:Tektosyne.Geometry.RectD.Size"/>
            properties equal the corresponding properties of the specified <paramref name="rect"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.op_Explicit(Tektosyne.Geometry.RectD)~Tektosyne.Geometry.RectF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.RectD"/> to a <see cref="T:Tektosyne.Geometry.RectF"/> by casting coordinates and
            dimensions to the equivalent <see cref="T:System.Single"/> values.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.RectF"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectF"/> instance whose <see cref="P:Tektosyne.Geometry.RectF.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectF.Size"/> properties equal the corresponding properties of the specified
            <paramref name="rect"/>, cast to the equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.op_Explicit(Tektosyne.Geometry.RectD)~Tektosyne.Geometry.RectI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.RectD"/> to a <see cref="T:Tektosyne.Geometry.RectI"/> by truncating coordinates and
            dimensions to the nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.RectI"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> instance whose <see cref="P:Tektosyne.Geometry.RectI.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Size"/> properties equal the corresponding properties of the specified
            <paramref name="rect"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectD"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.RectD"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.RectD"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.RectD"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.RectD"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.RectD"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.RectD.Equals(Tektosyne.Geometry.RectD)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Equals(Tektosyne.Geometry.RectD)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.RectD"/> have the same
            value.</summary>
            <param name="rect">
            A <see cref="T:Tektosyne.Geometry.RectD"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="rect"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.RectD.X"/>, <see cref="F:Tektosyne.Geometry.RectD.Y"/>, <see
            cref="F:Tektosyne.Geometry.RectD.Width"/>, and <see cref="F:Tektosyne.Geometry.RectD.Height"/> properties of the two <see cref="T:Tektosyne.Geometry.RectD"/>
            instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Equals(Tektosyne.Geometry.RectD,Tektosyne.Geometry.RectD)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.RectD"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.RectD.Equals(Tektosyne.Geometry.RectD)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.RectD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectD.Equals(Tektosyne.Geometry.RectD,Tektosyne.Geometry.RectD,System.Double)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.RectD"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectD"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates and dimensions of <paramref
            name="a"/> and <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the coordinates and dimensions of
            <paramref name="a"/> and <paramref name="b"/> is less than or equal to <paramref
            name="epsilon"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.RectF">
            <summary>
            Represents a rectangular region in two-dimensional space, using <see cref="T:System.Single"/>
            coordinates.</summary>
            <remarks><para>
            <b>RectF</b> is an immutable structure whose four <see cref="T:System.Single"/> coordinates and 
            extensions define a rectangular region in two-dimensional space.
            </para><para>
            The <see cref="P:Tektosyne.Geometry.RectF.Left"/>, <see cref="P:Tektosyne.Geometry.RectF.Top"/>, <see cref="P:Tektosyne.Geometry.RectF.Right"/>, and <see
            cref="P:Tektosyne.Geometry.RectF.Bottom"/> properties assume drawing orientation rather than mathematical
            orientation. That is, x-coordinates increase towards the right but y-coordinates increase
            downward. This is the same orientation used by all BCL rectangle structures.
            </para><para>
            <b>RectF</b> uses a <em>geometric inclusion model</em> to determine which coordinates are
            contained within the rectangle, like <b>System.Windows.Rect</b>. That is, <see
            cref="F:Tektosyne.Geometry.RectF.Width"/> and <see cref="F:Tektosyne.Geometry.RectF.Height"/> act like the dimensions of a closed
            polygon, indicating the greatest coordinates within the <see cref="T:Tektosyne.Geometry.RectF"/>. Therefore, the
            coordinates <see cref="P:Tektosyne.Geometry.RectF.Right"/> (= <see cref="P:Tektosyne.Geometry.RectF.Left"/> + <see
            cref="F:Tektosyne.Geometry.RectF.Width"/>) and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/> (= <see cref="P:Tektosyne.Geometry.RectF.Top"/> + <see
            cref="F:Tektosyne.Geometry.RectF.Height"/>) are still considered part of the <see cref="T:Tektosyne.Geometry.RectF"/>.
            </para><note type="caution">
            The equivalent BCL type, <b>System.Drawing.RectangleF</b>, uses an index inclusion model
            like <see cref="T:Tektosyne.Geometry.RectI"/>, not a geometric inclusion model like <b>RectF</b>. This makes no
            sense for floating-point coordinates and is evidently an artifact of GDI+ compatibility.
            </note><para>
            Use the <see cref="T:Tektosyne.Geometry.RectI"/> structure to represent rectangles with <see cref="T:System.Int32"/>
            components, and the <see cref="T:Tektosyne.Geometry.RectD"/> structure to represent rectangles with <see
            cref="T:System.Double"/> components. You can convert <see cref="T:Tektosyne.Geometry.RectF"/> instances to and from <see
            cref="T:Tektosyne.Geometry.RectI"/> instances, rounding off the <see cref="T:System.Single"/> components as necessary.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectF"/> structure.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectF"/> structure with the specified
            <see cref="T:System.Single"/> coordinates and dimensions.</summary>
            <param name="x">
            The smallest <see cref="F:Tektosyne.Geometry.RectF.X"/> coordinate within the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <param name="y">
            The smallest <see cref="F:Tektosyne.Geometry.RectF.Y"/> coordinate within the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <param name="width">
            The <see cref="F:Tektosyne.Geometry.RectF.Width"/> of the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <param name="height">
            The <see cref="F:Tektosyne.Geometry.RectF.Height"/> of the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is less than zero.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.#ctor(Tektosyne.Geometry.PointF,Tektosyne.Geometry.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectF"/> structure that contains the
            specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates.</summary>
            <param name="point1">
            The first <see cref="T:Tektosyne.Geometry.PointF"/> that the <see cref="T:Tektosyne.Geometry.RectF"/> must contain.</param>
            <param name="point2">
            The second <see cref="T:Tektosyne.Geometry.PointF"/> that the <see cref="T:Tektosyne.Geometry.RectF"/> must contain.</param>
            <remarks>
            <see cref="P:Tektosyne.Geometry.RectF.Location"/> is set to the smaller coordinate of <paramref name="point1"/> and
            <paramref name="point2"/> in each dimension, and <see cref="P:Tektosyne.Geometry.RectF.Size"/> is set to the
            difference between the larger and the smaller coordinate in each dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.#ctor(Tektosyne.Geometry.PointF,Tektosyne.Geometry.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectF"/> structure with the specified
            <see cref="T:Tektosyne.Geometry.PointF"/> coordinates and <see cref="T:Tektosyne.Geometry.SizeF"/> dimensions.</summary>
            <param name="location">
            The <see cref="P:Tektosyne.Geometry.RectF.Location"/> of the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <param name="size">
            The <see cref="P:Tektosyne.Geometry.RectF.Size"/> of the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.RectF.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.RectF"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.RectF"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectF.X">
            <summary>
            The smallest x-coordinate within the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <remarks>
            <b>X</b> is the x-coordinate of the left edge of the <see cref="T:Tektosyne.Geometry.RectF"/>, assuming that
            x-coordinates increase to the right.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectF.Y">
            <summary>
            The smallest y-coordinate within the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <remarks>
            <b>Y</b> is the y-coordinate of the top edge of the <see cref="T:Tektosyne.Geometry.RectF"/>, assuming that
            y-coordinates increase downward.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectF.Width">
            <summary>
            The horizontal extension of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <remarks>
            <b>Width</b> is never less than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectF.Height">
            <summary>
            The vertical extension of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <remarks>
            <b>Height</b> is never less than zero.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.Location">
            <summary>
            Gets the coordinates of the upper-left corner of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointF"/> containing the <see cref="F:Tektosyne.Geometry.RectF.X"/> and <see cref="F:Tektosyne.Geometry.RectF.Y"/> coordinates.
            </value>
            <remarks>
            <b>Location</b> holds the smallest x- and y-coordinates that are contained within the
            <see cref="T:Tektosyne.Geometry.RectF"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.Size">
            <summary>
            Gets the extension of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> containing the <see cref="F:Tektosyne.Geometry.RectF.Width"/> and <see cref="F:Tektosyne.Geometry.RectF.Height"/>
            dimensions.</value>
            <remarks>
            The <see cref="T:Tektosyne.Geometry.RectF"/> covers the area beginning at <see cref="P:Tektosyne.Geometry.RectF.Location"/> and
            extending over <see cref="P:Tektosyne.Geometry.RectF.Size"/> with increasing x- and y-coordinates.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.Left">
            <summary>
            Gets the x-coordinate of the left edge of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            The <see cref="F:Tektosyne.Geometry.RectF.X"/> coordinate of the <see cref="T:Tektosyne.Geometry.RectF"/>.</value>
            <remarks>
            <b>Left</b> is the smallest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectF"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.Top">
            <summary>
            Gets the y-coordinate of the top edge of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            The <see cref="F:Tektosyne.Geometry.RectF.Y"/> coordinate of the <see cref="T:Tektosyne.Geometry.RectF"/>.</value>
            <remarks>
            <b>Top</b> is the smallest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectF"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.Right">
            <summary>
            Gets the x-coordinate of the right edge of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            The sum of the <see cref="F:Tektosyne.Geometry.RectF.X"/> coordinate and the <see cref="F:Tektosyne.Geometry.RectF.Width"/> dimension.</value>
            <remarks>
            <b>Right</b> is the greatest x-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectF"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            The sum of the <see cref="F:Tektosyne.Geometry.RectF.Y"/> coordinate and the <see cref="F:Tektosyne.Geometry.RectF.Height"/> dimension.
            </value>
            <remarks>
            <b>Bottom</b> is the greatest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectF"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.TopLeft">
            <summary>
            Gets the upper-left corner of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectF.Left"/> and whose <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectF.Top"/>.
            </value>
            <remarks>
            <b>TopLeft</b> returns the same value as <see cref="P:Tektosyne.Geometry.RectF.Location"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.TopRight">
            <summary>
            Gets the upper-right corner of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectF.Right"/> and whose <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectF.Top"/>.
            </value>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.BottomLeft">
            <summary>
            Gets the lower-left corner of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectF.Left"/> and whose <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectF.Bottom"/>.
            </value>
        </member>
        <member name="P:Tektosyne.Geometry.RectF.BottomRight">
            <summary>
            Gets the lower-right corner of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointF"/> whose <see cref="F:Tektosyne.Geometry.PointF.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectF.Right"/> and whose <see cref="F:Tektosyne.Geometry.PointF.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectF.Bottom"/>.
            </value>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Circumscribe">
            <overloads>
            Circumscribes a rectangle around the specified coordinates.</overloads>
            <summary>
            Circumscribes a <see cref="T:Tektosyne.Geometry.RectI"/> around the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> that entirely covers the <see cref="T:Tektosyne.Geometry.RectF"/>.</returns>
            <remarks>
            <b>Circumscribe</b> returns a <see cref="T:Tektosyne.Geometry.RectI"/> that contains the <see
            cref="M:Tektosyne.Fortran.Floor(System.Decimal)"/> of the <see cref="F:Tektosyne.Geometry.RectF.X"/> and <see cref="F:Tektosyne.Geometry.RectF.Y"/> coordinates, and the
            <see cref="M:Tektosyne.Fortran.Ceiling(System.Decimal)"/> of the <see cref="F:Tektosyne.Geometry.RectF.Width"/> and <see cref="F:Tektosyne.Geometry.RectF.Height"/>
            dimensions. This ensures that the <see cref="T:Tektosyne.Geometry.RectF"/> is entirely covered.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Circumscribe(Tektosyne.Geometry.PointF[])">
            <summary>
            Circumscribes a <see cref="T:Tektosyne.Geometry.RectF"/> around the specified <see cref="T:Tektosyne.Geometry.PointF"/>
            coordinates.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointF"/> coordinates whose bounds to
            determine.</param>
            <returns>
            The smallest <see cref="T:Tektosyne.Geometry.RectF"/> that contains all specified <paramref name="points"/>.
            </returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty array.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Contains(System.Single,System.Single)">
            <overloads>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified coordinates.
            </overloads>
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <see cref="T:System.Single"/>
            coordinates.</summary>
            <param name="x">
            The x-coordinate to examine.</param>
            <param name="y">
            The y-coordinate to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <paramref name="x"/> and
            <paramref name="y"/> coordinates; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> assumes that the <see cref="T:Tektosyne.Geometry.RectF"/> contains the <see cref="P:Tektosyne.Geometry.RectF.Right"/>
            and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/> coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Contains(Tektosyne.Geometry.PointF)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <see cref="T:Tektosyne.Geometry.PointF"/>
            coordinates.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointF"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <paramref name="point"/>;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> assumes that the <see cref="T:Tektosyne.Geometry.RectF"/> contains the <see cref="P:Tektosyne.Geometry.RectF.Right"/>
            and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/> coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Contains(Tektosyne.Geometry.RectF)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectF"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> entirely contains the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> returns <c>true</c> even if both <see cref="T:Tektosyne.Geometry.RectF"/> instances have a
            <see cref="F:Tektosyne.Geometry.RectF.Width"/> or <see cref="F:Tektosyne.Geometry.RectF.Height"/> of zero, provided they have the same <see
            cref="P:Tektosyne.Geometry.RectF.Location"/> in the corresponding dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.ContainsOpen(System.Single,System.Single)">
            <overloads>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified coordinates, excluding
            <see cref="P:Tektosyne.Geometry.RectF.Right"/> and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/>.</overloads>
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <see cref="T:System.Single"/>
            coordinates, excluding <see cref="P:Tektosyne.Geometry.RectF.Right"/> and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/>.</summary>
            <param name="x">
            The x-coordinate to examine.</param>
            <param name="y">
            The y-coordinate to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <paramref name="x"/> and
            <paramref name="y"/> coordinates, excluding <see cref="P:Tektosyne.Geometry.RectF.Right"/> and <see
            cref="P:Tektosyne.Geometry.RectF.Bottom"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>ContainsOpen</b> assumes that the <see cref="T:Tektosyne.Geometry.RectF"/> does not contain the <see
            cref="P:Tektosyne.Geometry.RectF.Right"/> and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/> coordinates, emulating <see cref="T:Tektosyne.Geometry.RectI"/>
            behavior.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.ContainsOpen(Tektosyne.Geometry.PointF)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <see cref="T:Tektosyne.Geometry.PointF"/>
            coordinates, excluding <see cref="P:Tektosyne.Geometry.RectF.Right"/> and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/>.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointF"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> contains the specified <paramref name="point"/>,
            excluding <see cref="P:Tektosyne.Geometry.RectF.Right"/> and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <b>ContainsOpen</b> assumes that the <see cref="T:Tektosyne.Geometry.RectF"/> does not contain the <see
            cref="P:Tektosyne.Geometry.RectF.Right"/> and <see cref="P:Tektosyne.Geometry.RectF.Bottom"/> coordinates, emulating <see cref="T:Tektosyne.Geometry.RectI"/>
            behavior.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.GetDistanceVector(Tektosyne.Geometry.PointF)">
            <summary>
            Finds the distance vector from the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to the
            nearest edges of the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointF"/> vector indicating the distance of each <paramref name="q"/> 
            coordinate from the nearest corresponding edge of the <see cref="T:Tektosyne.Geometry.RectF"/>.</returns>
            <remarks><para>
            <b>GetDistanceVector</b> defines the components of the returned <see cref="T:Tektosyne.Geometry.PointF"/>
            vector as follows, assuming that <em>qx</em> and <em>qy</em> are the coordinates of
            <paramref name="q"/>:
            </para><list type="table"><listheader>
            <term><b>X</b></term><term><b>Y</b></term><description>Condition</description>
            </listheader><item>
            <term>0</term><term></term><description>
            <see cref="P:Tektosyne.Geometry.RectF.Left"/> &lt;= <em>qx</em> &lt;= <see cref="P:Tektosyne.Geometry.RectF.Right"/></description>
            </item><item>
            <term><em>qx</em> – <see cref="P:Tektosyne.Geometry.RectF.Left"/></term><term></term>
            <description><em>qx</em> &lt; <see cref="P:Tektosyne.Geometry.RectF.Left"/></description>
            </item><item>
            <term><em>qx</em> – <see cref="P:Tektosyne.Geometry.RectF.Right"/></term><term></term>
            <description><em>qx</em> &gt; <see cref="P:Tektosyne.Geometry.RectF.Right"/></description>
            </item><item>
            <term/><term>0</term><description>
            <see cref="P:Tektosyne.Geometry.RectF.Top"/> &lt;= <em>qy</em> &lt;= <see cref="P:Tektosyne.Geometry.RectF.Bottom"/></description>
            </item><item>
            <term/><term><em>qy</em> – <see cref="P:Tektosyne.Geometry.RectF.Top"/></term>
            <description><em>qy</em> &lt; <see cref="P:Tektosyne.Geometry.RectF.Top"/></description>
            </item><item>
            <term/><term><em>qy</em> – <see cref="P:Tektosyne.Geometry.RectF.Bottom"/></term>
            <description><em>qy</em> &gt; <see cref="P:Tektosyne.Geometry.RectF.Bottom"/></description>
            </item></list><para>
            Each vector component is zero exactly if the corresponding <paramref name="q"/>
            coordinate lies within the corresponding <see cref="T:Tektosyne.Geometry.RectF"/> extension. Otherwise, the
            component’s absolute value indicates the coordinate’s distance from the nearest <see
            cref="T:Tektosyne.Geometry.RectF"/> edge, and its sign indicates that edge itself.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.RectF"/> instance.</summary>
            <returns>
            An <see cref="T:System.Single"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.RectF.X"/>, <see cref="F:Tektosyne.Geometry.RectF.Y"/>, <see
            cref="F:Tektosyne.Geometry.RectF.Width"/>, and <see cref="F:Tektosyne.Geometry.RectF.Height"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Intersect(Tektosyne.Geometry.LineF,Tektosyne.Geometry.LineF@)">
            <overloads>
            Intersects the <see cref="T:Tektosyne.Geometry.RectF"/> with the specified object.</overloads>
            <summary>
            Intersects the <see cref="T:Tektosyne.Geometry.RectF"/> with the specified <see cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineF"/> to intersect with the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <param name="intersection">
            On success, the intersection of the <see cref="T:Tektosyne.Geometry.RectF"/> and the specified <paramref
            name="line"/>; otherwise, <see cref="F:Tektosyne.Geometry.LineF.Empty"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified <paramref
            name="line"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Intersect</b> performs the Liang-Barsky line clipping algorithm. This C#
            implementation was adapted from the C implementation by Daniel White, published at <a
            href="http://www.skytopia.com/project/articles/compsci/clipping.html">Skytopia</a>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Intersect(Tektosyne.Geometry.PointF[],Tektosyne.Geometry.PointF[]@)">
            <summary>
            Intersects the <see cref="T:Tektosyne.Geometry.RectF"/> with the specified arbitrary polygon.</summary>
            <param name="polygon">
            An <see cref="T:System.Array"/> containing <see cref="T:Tektosyne.Geometry.PointF"/> coordinates that are the vertices
            of the polygon to intersect with the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <param name="intersection">
            On success, the intersection of the <see cref="T:Tektosyne.Geometry.RectF"/> and the specified <paramref
            name="polygon"/>; otherwise, an empty <see cref="T:System.Array"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified <paramref
            name="polygon"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="polygon"/> is a null reference or an empty array.</exception>
            <remarks><para>
            <b>Intersect</b> performs the Sutherland–Hodgman polygon clipping algorithm, optimized
            for an axis-aligned <see cref="T:Tektosyne.Geometry.RectF"/> as the clipping polygon. At intersection points,
            the border coordinates of the <see cref="T:Tektosyne.Geometry.RectF"/> are copied rather than computed,
            allowing exact floating-point comparisons.
            </para><para>
            The specified <paramref name="polygon"/> and the returned <paramref
            name="intersection"/> are implicitly assumed to be closed, with an edge connecting the
            first and last vertex. Therefore, all vertices should be different.
            </para><para>
            Unless the specified <paramref name="polygon"/> is convex, the returned <paramref
            name="intersection"/> may represent multiple polygons, connected across the borders of
            the <see cref="T:Tektosyne.Geometry.RectF"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Intersect(Tektosyne.Geometry.RectF,Tektosyne.Geometry.RectF@)">
            <summary>
            Intersects the <see cref="T:Tektosyne.Geometry.RectF"/> with the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectF"/> to intersect with this instance.</param>
            <param name="intersection">
            On success, the intersection of the <see cref="T:Tektosyne.Geometry.RectF"/> and the specified <paramref
            name="rect"/>; otherwise, <see cref="F:Tektosyne.Geometry.RectF.Empty"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.IntersectsWith(Tektosyne.Geometry.LineF)">
            <overloads>
            Determines whether the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified object.
            </overloads>
            <summary>
            Determines whether the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified <see
            cref="T:Tektosyne.Geometry.LineF"/>.</summary>
            <param name="line">
            The <see cref="T:Tektosyne.Geometry.LineF"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified <paramref
            name="line"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IntersectsWith</b> performs the same Liang-Barsky line clipping algorithm as <see
            cref="M:Tektosyne.Geometry.RectF.Intersect(Tektosyne.Geometry.LineF,Tektosyne.Geometry.LineF@)"/>, but without computing the intersecting line
            segment.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.IntersectsWith(Tektosyne.Geometry.RectF)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified rectangle.
            </summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectF"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectF"/> intersects with the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IntersectsWith</b> returns <c>true</c> even if both <see cref="T:Tektosyne.Geometry.RectF"/> instances
            have a <see cref="F:Tektosyne.Geometry.RectF.Width"/> or <see cref="F:Tektosyne.Geometry.RectF.Height"/> of zero, provided they have the same
            <see cref="P:Tektosyne.Geometry.RectF.Location"/> in the corresponding dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Locate(Tektosyne.Geometry.PointF)">
            <overloads>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectF"/>.</overloads>
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectF"/>, using exact coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.RectF"/>.</returns>
            <remarks>
            <b>Locate</b> never returns <see cref="F:Tektosyne.Geometry.RectLocation.None"/>, and always returns a
            bitwise combination of an <b>…X</b> and a <b>…Y</b> value.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Locate(Tektosyne.Geometry.PointF,System.Single)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointF"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectF"/>, given the specified epsilon for coordinate comparisons.
            </summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointF"/> coordinates to examine.</param>
            <param name="epsilon">
            The maximum absolute distance at which coordinates should be considered equal.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.RectF"/>.</returns>
            <remarks><para>
            <b>Locate</b> is identical with the basic <see cref="M:Tektosyne.Geometry.RectF.Locate(Tektosyne.Geometry.PointF)"/> overload but uses
            the specified <paramref name="epsilon"/> to compare individual coordinates.
            </para><para>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Locate</b>
            does not check this condition.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Offset(System.Single,System.Single)">
            <overloads>
            Moves the <see cref="T:Tektosyne.Geometry.RectF"/> by the specified offset.</overloads>
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.RectF"/> by the specified <see cref="T:System.Single"/> values.</summary>
            <param name="x">
            The horizontal offset applied to the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <param name="y">
            The vertical offset applied to the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.RectF"/> with the same <see cref="P:Tektosyne.Geometry.RectF.Size"/> as this instance, and whose
            <see cref="F:Tektosyne.Geometry.RectF.X"/> and <see cref="F:Tektosyne.Geometry.RectF.Y"/> coordinates are offset by the specified <paramref
            name="x"/> and <paramref name="y"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Offset(Tektosyne.Geometry.PointF)">
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.RectF"/> by the specified <see cref="T:Tektosyne.Geometry.PointF"/> vector.</summary>
            <param name="vector">
            A <see cref="T:Tektosyne.Geometry.PointF"/> value whose components define the horizontal and vertical offset
            applied to the <see cref="T:Tektosyne.Geometry.RectF"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.RectF"/> with the same <see cref="P:Tektosyne.Geometry.RectF.Size"/> as this instance, and whose
            <see cref="P:Tektosyne.Geometry.RectF.Location"/> is offset by the specified <paramref name="vector"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.RectF"/> to a <see cref="T:Tektosyne.Geometry.RectI"/> by rounding coordinates and
            dimensions to the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> instance whose <see cref="P:Tektosyne.Geometry.RectI.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Size"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.RectF"/>, rounded to the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Single"/> components of the <see cref="T:Tektosyne.Geometry.RectF"/> are converted to <see
            cref="T:System.Int32"/> components using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.ToRectI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.RectF"/> to a <see cref="T:Tektosyne.Geometry.RectI"/> by truncating coordinates and
            dimensions to the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> instance whose <see cref="P:Tektosyne.Geometry.RectI.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Size"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.RectF"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.RectF"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.RectF.X"/>, <see cref="F:Tektosyne.Geometry.RectF.Y"/>,
            <see cref="F:Tektosyne.Geometry.RectF.Width"/>, and <see cref="F:Tektosyne.Geometry.RectF.Height"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Union(Tektosyne.Geometry.RectF)">
            <summary>
            Determines the union of the <see cref="T:Tektosyne.Geometry.RectF"/> and the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectF"/> to combine with this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectF"/> that contains the union of the specified <paramref name="rect"/>
            and this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.op_Equality(Tektosyne.Geometry.RectF,Tektosyne.Geometry.RectF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectF"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.RectF.Equals(Tektosyne.Geometry.RectF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.RectF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.op_Inequality(Tektosyne.Geometry.RectF,Tektosyne.Geometry.RectF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectF"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.RectF.Equals(Tektosyne.Geometry.RectF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.RectF"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.op_Implicit(Tektosyne.Geometry.RectI)~Tektosyne.Geometry.RectF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.RectI"/> to a <see cref="T:Tektosyne.Geometry.RectF"/> with identical coordinates and
            dimensions.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.RectF"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectF"/> instance whose <see cref="P:Tektosyne.Geometry.RectF.Location"/> and <see cref="P:Tektosyne.Geometry.RectF.Size"/>
            properties equal the corresponding properties of the specified <paramref name="rect"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.op_Explicit(Tektosyne.Geometry.RectF)~Tektosyne.Geometry.RectI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.RectF"/> to a <see cref="T:Tektosyne.Geometry.RectI"/> by truncating coordinates and
            dimensions to the nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.RectI"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> instance whose <see cref="P:Tektosyne.Geometry.RectI.Location"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Size"/> properties equal the corresponding properties of the specified
            <paramref name="rect"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectF"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.RectF"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.RectF"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.RectF"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.RectF"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.RectF"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.RectF.Equals(Tektosyne.Geometry.RectF)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Equals(Tektosyne.Geometry.RectF)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.RectF"/> have the same
            value.</summary>
            <param name="rect">
            A <see cref="T:Tektosyne.Geometry.RectF"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="rect"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.RectF.X"/>, <see cref="F:Tektosyne.Geometry.RectF.Y"/>, <see
            cref="F:Tektosyne.Geometry.RectF.Width"/>, and <see cref="F:Tektosyne.Geometry.RectF.Height"/> properties of the two <see cref="T:Tektosyne.Geometry.RectF"/>
            instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Equals(Tektosyne.Geometry.RectF,Tektosyne.Geometry.RectF)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.RectF"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.RectF.Equals(Tektosyne.Geometry.RectF)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.RectF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectF.Equals(Tektosyne.Geometry.RectF,Tektosyne.Geometry.RectF,System.Single)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.RectF"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectF"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the coordinates and dimensions of <paramref
            name="a"/> and <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the coordinates and dimensions of
            <paramref name="a"/> and <paramref name="b"/> is less than or equal to <paramref
            name="epsilon"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.RectI">
            <summary>
            Represents a rectangular region in two-dimensional space, using <see cref="T:System.Int32"/>
            coordinates.</summary>
            <remarks><para>
            <b>RectI</b> is an immutable structure whose four <see cref="T:System.Int32"/> coordinates and 
            extensions define a rectangular region in two-dimensional space.
            </para><para>
            The <see cref="P:Tektosyne.Geometry.RectI.Left"/>, <see cref="P:Tektosyne.Geometry.RectI.Top"/>, <see cref="P:Tektosyne.Geometry.RectI.Right"/>, and <see
            cref="P:Tektosyne.Geometry.RectI.Bottom"/> properties assume drawing orientation rather than mathematical
            orientation. That is, x-coordinates increase towards the right but y-coordinates increase
            downward. This is the same orientation used by all BCL rectangle structures.
            </para><para>
            <b>RectI</b> uses an <em>index inclusion model</em> to determine which coordinates are
            contained within the rectangle, like <b>System.Drawing.Rectangle</b>. That is, <see
            cref="F:Tektosyne.Geometry.RectI.Width"/> and <see cref="F:Tektosyne.Geometry.RectI.Height"/> act like the <b>Count</b> property of an
            indexed collection, indicating coordinates one unit beyond the <see cref="T:Tektosyne.Geometry.RectI"/>.
            Therefore, the coordinates <see cref="P:Tektosyne.Geometry.RectI.Right"/> (= <see cref="P:Tektosyne.Geometry.RectI.Left"/> + <see
            cref="F:Tektosyne.Geometry.RectI.Width"/>) and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/> (= <see cref="P:Tektosyne.Geometry.RectI.Top"/> + <see
            cref="F:Tektosyne.Geometry.RectI.Height"/>) are <em>not</em> considered part of the <see cref="T:Tektosyne.Geometry.RectI"/>.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.RectF"/> structure to represent rectangles with <see cref="T:System.Single"/>
            components, and the <see cref="T:Tektosyne.Geometry.RectD"/> structure to represent rectangles with <see
            cref="T:System.Double"/> components.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectI"/> structure.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectI"/> structure with the specified
            <see cref="T:System.Int32"/> coordinates and dimensions.</summary>
            <param name="x">
            The smallest <see cref="F:Tektosyne.Geometry.RectI.X"/> coordinate within the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <param name="y">
            The smallest <see cref="F:Tektosyne.Geometry.RectI.Y"/> coordinate within the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <param name="width">
            The <see cref="F:Tektosyne.Geometry.RectI.Width"/> of the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <param name="height">
            The <see cref="F:Tektosyne.Geometry.RectI.Height"/> of the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is less than zero.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.#ctor(Tektosyne.Geometry.PointI,Tektosyne.Geometry.SizeI)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RectI"/> structure with the specified
            <see cref="T:Tektosyne.Geometry.PointI"/> coordinates and <see cref="T:Tektosyne.Geometry.SizeI"/> dimensions.</summary>
            <param name="location">
            The <see cref="P:Tektosyne.Geometry.RectI.Location"/> of the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <param name="size">
            The <see cref="P:Tektosyne.Geometry.RectI.Size"/> of the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.RectI.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.RectI"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.RectI"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectI.X">
            <summary>
            The smallest x-coordinate within the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <remarks>
            <b>X</b> is the x-coordinate of the left edge of the <see cref="T:Tektosyne.Geometry.RectI"/>, assuming that
            x-coordinates increase to the right.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectI.Y">
            <summary>
            The smallest y-coordinate within the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <remarks>
            <b>Y</b> is the y-coordinate of the top edge of the <see cref="T:Tektosyne.Geometry.RectI"/>, assuming that
            y-coordinates increase downward.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectI.Width">
            <summary>
            The horizontal extension of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <remarks>
            <b>Width</b> is never less than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectI.Height">
            <summary>
            The vertical extension of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <remarks>
            <b>Height</b> is never less than zero.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.Location">
            <summary>
            Gets the coordinates of the upper-left corner of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointI"/> containing the <see cref="F:Tektosyne.Geometry.RectI.X"/> and <see cref="F:Tektosyne.Geometry.RectI.Y"/> coordinates.
            </value>
            <remarks>
            <b>Location</b> holds the smallest x- and y-coordinates that are contained within the
            <see cref="T:Tektosyne.Geometry.RectI"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.Size">
            <summary>
            Gets the extension of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> containing the <see cref="F:Tektosyne.Geometry.RectI.Width"/> and <see cref="F:Tektosyne.Geometry.RectI.Height"/>
            dimensions.</value>
            <remarks>
            The <see cref="T:Tektosyne.Geometry.RectI"/> covers the area beginning at <see cref="P:Tektosyne.Geometry.RectI.Location"/> and
            extending over <see cref="P:Tektosyne.Geometry.RectI.Size"/> with increasing x- and y-coordinates, but excluding
            the greatest coordinates in each dimension.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.Left">
            <summary>
            Gets the x-coordinate of the left edge of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            The <see cref="F:Tektosyne.Geometry.RectI.X"/> coordinate of the <see cref="T:Tektosyne.Geometry.RectI"/>.</value>
            <remarks>
            <b>Left</b> is the smallest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectI"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.Top">
            <summary>
            Gets the y-coordinate of the top edge of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            The <see cref="F:Tektosyne.Geometry.RectI.Y"/> coordinate of the <see cref="T:Tektosyne.Geometry.RectI"/>.</value>
            <remarks>
            <b>Top</b> is the smallest y-coordinate that is contained within the <see
            cref="T:Tektosyne.Geometry.RectI"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.Right">
            <summary>
            Gets the x-coordinate just beyond the right edge of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            The sum of the <see cref="F:Tektosyne.Geometry.RectI.X"/> coordinate and the <see cref="F:Tektosyne.Geometry.RectI.Width"/> dimension.</value>
            <remarks>
            <b>Right</b> is the smallest x-coordinate that is not smaller than <see cref="P:Tektosyne.Geometry.RectI.Left"/>
            and not contained in the <see cref="T:Tektosyne.Geometry.RectI"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.Bottom">
            <summary>
            Gets the y-coordinate just beyond the bottom edge of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            The sum of the <see cref="F:Tektosyne.Geometry.RectI.Y"/> coordinate and the <see cref="F:Tektosyne.Geometry.RectI.Height"/> dimension.
            </value>
            <remarks>
            <b>Bottom</b> is the smallest y-coordinate that is not smaller than <see cref="P:Tektosyne.Geometry.RectI.Top"/>
            and not contained in the <see cref="T:Tektosyne.Geometry.RectI"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.TopLeft">
            <summary>
            Gets the upper-left corner of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectI.Left"/> and whose <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectI.Top"/>.
            </value>
            <remarks>
            <b>TopLeft</b> returns the same value as <see cref="P:Tektosyne.Geometry.RectI.Location"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.TopRight">
            <summary>
            Gets the upper-right corner of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectI.Right"/> and whose <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectI.Top"/>.
            </value>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.BottomLeft">
            <summary>
            Gets the lower-left corner of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectI.Left"/> and whose <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectI.Bottom"/>.
            </value>
        </member>
        <member name="P:Tektosyne.Geometry.RectI.BottomRight">
            <summary>
            Gets the lower-right corner of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> coordinate equals <see
            cref="P:Tektosyne.Geometry.RectI.Right"/> and whose <see cref="F:Tektosyne.Geometry.PointI.Y"/> coordinate equals <see cref="P:Tektosyne.Geometry.RectI.Bottom"/>.
            </value>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Circumscribe(Tektosyne.Geometry.PointI[])">
            <summary>
            Circumscribes a <see cref="T:Tektosyne.Geometry.RectI"/> around the specified <see cref="T:Tektosyne.Geometry.PointI"/>
            coordinates.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointI"/> coordinates whose bounds to
            determine.</param>
            <returns>
            The smallest <see cref="T:Tektosyne.Geometry.RectI"/> that contains all specified <paramref name="points"/>.
            </returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="points"/> is a null reference or an empty array.</exception>
            <remarks>
            <b>Circumscribe</b> returns a <see cref="T:Tektosyne.Geometry.RectI"/> whose <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Bottom"/> coordinates are one greater than the greatest x- and y-coordinates found
            among the specified <paramref name="points"/>. This ensures that <see cref="M:Tektosyne.Geometry.RectI.Contains(System.Int32,System.Int32)"/>
            succeeds for all <paramref name="points"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Contains(System.Int32,System.Int32)">
            <overloads>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified coordinates.
            </overloads>
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <see cref="T:System.Int32"/>
            coordinates.</summary>
            <param name="x">
            The x-coordinate to examine.</param>
            <param name="y">
            The y-coordinate to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <paramref name="x"/> and
            <paramref name="y"/> coordinates; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> assumes that the <see cref="T:Tektosyne.Geometry.RectI"/> does not contain the <see
            cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/> coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Contains(Tektosyne.Geometry.PointI)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <see cref="T:Tektosyne.Geometry.PointI"/>
            coordinates.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointI"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <paramref name="point"/>;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> assumes that the <see cref="T:Tektosyne.Geometry.RectI"/> does not contain the <see
            cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/> coordinates.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Contains(Tektosyne.Geometry.RectI)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectI"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectI"/> entirely contains the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> returns <c>true</c> even if both <see cref="T:Tektosyne.Geometry.RectI"/> instances have a
            <see cref="F:Tektosyne.Geometry.RectI.Width"/> or <see cref="F:Tektosyne.Geometry.RectI.Height"/> of zero, provided they have the same <see
            cref="P:Tektosyne.Geometry.RectI.Location"/> in the corresponding dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.ContainsClosed(System.Int32,System.Int32)">
            <overloads>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified coordinates, including
            <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/>. </overloads>
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <see cref="T:System.Int32"/>
            coordinates, including <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/>.</summary>
            <param name="x">
            The x-coordinate to examine.</param>
            <param name="y">
            The y-coordinate to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <paramref name="x"/> and
            <paramref name="y"/> coordinates, including <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see
            cref="P:Tektosyne.Geometry.RectI.Bottom"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>ContainsClosed</b> assumes that the <see cref="T:Tektosyne.Geometry.RectI"/> contains the <see
            cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/> coordinates, emulating <see cref="T:Tektosyne.Geometry.RectD"/> and
            <see cref="T:Tektosyne.Geometry.RectF"/> behavior.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.ContainsClosed(Tektosyne.Geometry.PointI)">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <see cref="T:Tektosyne.Geometry.PointI"/>
            coordinates, including <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/>.</summary>
            <param name="point">
            The <see cref="T:Tektosyne.Geometry.PointI"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectI"/> contains the specified <paramref name="point"/>,
            including <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <b>ContainsClosed</b> assumes that the <see cref="T:Tektosyne.Geometry.RectI"/> contains the <see
            cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/> coordinates, emulating <see cref="T:Tektosyne.Geometry.RectD"/> and
            <see cref="T:Tektosyne.Geometry.RectF"/> behavior.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.GetDistanceVector(Tektosyne.Geometry.PointI)">
            <summary>
            Finds the distance vector from the specified <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to the
            nearest edges of the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> vector indicating the distance of each <paramref name="q"/> 
            coordinate from the nearest corresponding edge of the <see cref="T:Tektosyne.Geometry.RectI"/>.</returns>
            <remarks><para>
            <b>GetDistanceVector</b> defines the components of the returned <see cref="T:Tektosyne.Geometry.PointI"/>
            vector as follows, assuming that <em>qx</em> and <em>qy</em> are the coordinates of
            <paramref name="q"/>:
            </para><list type="table"><listheader>
            <term><b>X</b></term><term><b>Y</b></term><description>Condition</description>
            </listheader><item>
            <term>0</term><term></term><description>
            <see cref="P:Tektosyne.Geometry.RectI.Left"/> &lt;= <em>qx</em> &lt;= <see cref="P:Tektosyne.Geometry.RectI.Right"/></description>
            </item><item>
            <term><em>qx</em> – <see cref="P:Tektosyne.Geometry.RectI.Left"/></term><term></term>
            <description><em>qx</em> &lt; <see cref="P:Tektosyne.Geometry.RectI.Left"/></description>
            </item><item>
            <term><em>qx</em> – <see cref="P:Tektosyne.Geometry.RectI.Right"/></term><term></term>
            <description><em>qx</em> &gt; <see cref="P:Tektosyne.Geometry.RectI.Right"/></description>
            </item><item>
            <term/><term>0</term><description>
            <see cref="P:Tektosyne.Geometry.RectI.Top"/> &lt;= <em>qy</em> &lt;= <see cref="P:Tektosyne.Geometry.RectI.Bottom"/></description>
            </item><item>
            <term/><term><em>qy</em> – <see cref="P:Tektosyne.Geometry.RectI.Top"/></term>
            <description><em>qy</em> &lt; <see cref="P:Tektosyne.Geometry.RectI.Top"/></description>
            </item><item>
            <term/><term><em>qy</em> – <see cref="P:Tektosyne.Geometry.RectI.Bottom"/></term>
            <description><em>qy</em> &gt; <see cref="P:Tektosyne.Geometry.RectI.Bottom"/></description>
            </item></list><para>
            Each vector component is zero exactly if the corresponding <paramref name="q"/>
            coordinate lies within the corresponding <see cref="T:Tektosyne.Geometry.RectI"/> extension. Otherwise, the
            component’s absolute value indicates the coordinate’s distance from the nearest <see
            cref="T:Tektosyne.Geometry.RectI"/> edge, and its sign indicates that edge itself.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.RectI"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.RectI.X"/>, <see cref="F:Tektosyne.Geometry.RectI.Y"/>, <see
            cref="F:Tektosyne.Geometry.RectI.Width"/>, and <see cref="F:Tektosyne.Geometry.RectI.Height"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Intersect(Tektosyne.Geometry.RectI,Tektosyne.Geometry.RectI@)">
            <summary>
            Intersects the <see cref="T:Tektosyne.Geometry.RectI"/> with the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectI"/> to intersect with this instance.</param>
            <param name="intersection">
            On success, the intersection of the <see cref="T:Tektosyne.Geometry.RectI"/> and the specified <paramref
            name="rect"/>; otherwise, <see cref="F:Tektosyne.Geometry.RectI.Empty"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectI"/> intersects with the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.IntersectsWith(Tektosyne.Geometry.RectI)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Geometry.RectI"/> intersects with the specified rectangle.
            </summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectI"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.RectI"/> intersects with the specified <paramref
            name="rect"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IntersectsWith</b> always returns <c>false</c> if both <see cref="T:Tektosyne.Geometry.RectI"/> instances
            have a <see cref="F:Tektosyne.Geometry.RectI.Width"/> or <see cref="F:Tektosyne.Geometry.RectI.Height"/> of zero, even if they have the same
            <see cref="P:Tektosyne.Geometry.RectI.Location"/> in the corresponding dimension.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Locate(Tektosyne.Geometry.PointI)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointI"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.RectI"/>.</returns>
            <remarks><para>
            <b>Locate</b> never returns <see cref="F:Tektosyne.Geometry.RectLocation.None"/>, and always returns a
            bitwise combination of an <b>…X</b> and a <b>…Y</b> value.
            </para><para>
            <b>Locate</b> assumes that the <see cref="T:Tektosyne.Geometry.RectI"/> does not contain the <see
            cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/> coordinates.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.LocateClosed(Tektosyne.Geometry.PointI)">
            <summary>
            Determines the location of the specified <see cref="T:Tektosyne.Geometry.PointI"/> coordinates relative to
            the <see cref="T:Tektosyne.Geometry.RectI"/>, including <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/>.
            </summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointI"/> coordinates to examine.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectLocation"/> value indicating the location of <paramref name="q"/>
            relative to the <see cref="T:Tektosyne.Geometry.RectI"/>.</returns>
            <remarks>
            <b>LocateClosed</b> is identical with <see cref="M:Tektosyne.Geometry.RectI.Locate(Tektosyne.Geometry.PointI)"/> but assumes that the <see
            cref="T:Tektosyne.Geometry.RectI"/> contains the <see cref="P:Tektosyne.Geometry.RectI.Right"/> and <see cref="P:Tektosyne.Geometry.RectI.Bottom"/> coordinates,
            emulating <see cref="T:Tektosyne.Geometry.RectD"/> and <see cref="T:Tektosyne.Geometry.RectF"/> behavior.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Offset(System.Int32,System.Int32)">
            <overloads>
            Moves the <see cref="T:Tektosyne.Geometry.RectI"/> by the specified offset.</overloads>
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.RectI"/> by the specified <see cref="T:System.Int32"/> values.</summary>
            <param name="x">
            The horizontal offset applied to the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <param name="y">
            The vertical offset applied to the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.RectI"/> with the same <see cref="P:Tektosyne.Geometry.RectI.Size"/> as this instance, and whose
            <see cref="F:Tektosyne.Geometry.RectI.X"/> and <see cref="F:Tektosyne.Geometry.RectI.Y"/> coordinates are offset by the specified <paramref
            name="x"/> and <paramref name="y"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Offset(Tektosyne.Geometry.PointI)">
            <summary>
            Moves the <see cref="T:Tektosyne.Geometry.RectI"/> by the specified <see cref="T:Tektosyne.Geometry.PointI"/> vector.</summary>
            <param name="vector">
            A <see cref="T:Tektosyne.Geometry.PointI"/> value whose components define the horizontal and vertical offset
            applied to the <see cref="T:Tektosyne.Geometry.RectI"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.RectI"/> with the same <see cref="P:Tektosyne.Geometry.RectI.Size"/> as this instance, and whose
            <see cref="P:Tektosyne.Geometry.RectI.Location"/> is offset by the specified <paramref name="vector"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.RectI"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.RectI.X"/>, <see cref="F:Tektosyne.Geometry.RectI.Y"/>,
            <see cref="F:Tektosyne.Geometry.RectI.Width"/>, and <see cref="F:Tektosyne.Geometry.RectI.Height"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Union(Tektosyne.Geometry.RectI)">
            <summary>
            Determines the union of the <see cref="T:Tektosyne.Geometry.RectI"/> and the specified rectangle.</summary>
            <param name="rect">
            The <see cref="T:Tektosyne.Geometry.RectI"/> to combine with this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.RectI"/> that contains the union of the specified <paramref name="rect"/>
            and this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.op_Equality(Tektosyne.Geometry.RectI,Tektosyne.Geometry.RectI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectI"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.RectI.Equals(Tektosyne.Geometry.RectI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.RectI"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.op_Inequality(Tektosyne.Geometry.RectI,Tektosyne.Geometry.RectI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectI"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.RectI.Equals(Tektosyne.Geometry.RectI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.RectI"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.RectI"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.RectI"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.RectI"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.RectI"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.RectI"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.RectI"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.RectI.Equals(Tektosyne.Geometry.RectI)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Equals(Tektosyne.Geometry.RectI)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.RectI"/> have the same
            value.</summary>
            <param name="rect">
            A <see cref="T:Tektosyne.Geometry.RectI"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="rect"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.RectI.X"/>, <see cref="F:Tektosyne.Geometry.RectI.Y"/>, <see
            cref="F:Tektosyne.Geometry.RectI.Width"/>, and <see cref="F:Tektosyne.Geometry.RectI.Height"/> properties of the two <see cref="T:Tektosyne.Geometry.RectI"/>
            instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RectI.Equals(Tektosyne.Geometry.RectI,Tektosyne.Geometry.RectI)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.RectI"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.RectI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.RectI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.RectI.Equals(Tektosyne.Geometry.RectI)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.RectI"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.RectLocation">
            <summary>
            Specifies the location of a point relative to a rectangle.</summary>
            <remarks>
            Every valid <b>RectLocation</b> value is a bitwise combination of an <b>…X</b> value and a
            <b>…Y</b> value, indicating the location of each point coordinate relative to the 
            corresponding nearest edge of the rectangle.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.None">
            <summary>
            Specifies that the point’s location is unknown or does not exist.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.BeforeX">
            <summary>
            Specifies that the point’s x-coordinate is located before the rectangle’s smallest
            x-coordinate.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.StartX">
            <summary>
            Specifies that the point’s x-coordinate equals the rectangle’s smallest x-coordinate.
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.InsideX">
            <summary>
            Specifies that the point’s x-coordinate is located between the rectangle’s smallest and
            greatest x-coordinate, exclusively.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.EndX">
            <summary>
            Specifies that the point’s x-coordinate equals the rectangle’s greatest x-coordinate.
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.AfterX">
            <summary>
            Specifies that the point’s x-coordinate is located after the rectangle’s greatest
            x-coordinate.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.BeforeY">
            <summary>
            Specifies that the point’s y-coordinate is located before the rectangle’s smallest
            y-coordinate.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.StartY">
            <summary>
            Specifies that the point’s y-coordinate equals the rectangle’s smallest y-coordinate.
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.InsideY">
            <summary>
            Specifies that the point’s y-coordinate is located between the rectangle’s smallest and
            greatest y-coordinate, exclusively.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.EndY">
            <summary>
            Specifies that the point’s y-coordinate equals the rectangle’s greatest y-coordinate.
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.RectLocation.AfterY">
            <summary>
            Specifies that the point’s y-coordinate is located after the rectangle’s greatest
            y-coordinate.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.RegularPolygon">
            <summary>
            Represents a regular polygon.</summary>
            <remarks><para>
            <b>RegularPolygon</b> represents a regular polygon with three or more sides of a given
            length, and with one of the orientations defined by <see cref="T:Tektosyne.Geometry.PolygonOrientation"/>. The
            vertex coordinates of all polygons are symmetrical across the vertical axis, and those of
            polygons with an even number of sides are also symmetrical across the horizontal axis.
            </para><para>
            Upon construction, <b>RegularPolygon</b> calculates the radii of the inscribed and
            circumscribed circles, the coordinates of all vertices, and the minimum bounding rectangle.
            All property values are immutable once defined. Methods that seem to change the side length
            of a given <b>RegularPolygon</b> return a new instance instead, similar to the <see
            cref="T:System.String"/> class.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.#ctor(System.Double,System.Int32,Tektosyne.Geometry.PolygonOrientation)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> class with the specified
            side length, number of sides, and orientation.</summary>
            <param name="length">
            The length of each side of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <param name="sides">
            The number of sides of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <param name="orientation">
            The orientation of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="length"/> is equal to or less than zero.
            </para><para>-or-</para><para>
            <paramref name="sides"/> is less than three.</para></exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="orientation"/> is not a valid <see cref="T:Tektosyne.Geometry.PolygonOrientation"/> value.
            </exception>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> property is initialized to <c>false</c>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.#ctor(System.Double,System.Int32,Tektosyne.Geometry.PolygonOrientation,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> class with the specified
            side length, number of sides, orientation, and vertex neighbors flag.</summary>
            <param name="length">
            The length of each side of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <param name="sides">
            The number of sides of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <param name="orientation">
            The orientation of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <param name="vertexNeighbors">
             <c>true</c> if <see cref="T:Tektosyne.Geometry.RegularPolygon"/> shapes that share only a common vertex are
            considered neighbors; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="length"/> is equal to or less than zero.
            </para><para>-or-</para><para>
            <paramref name="sides"/> is less than three.
            </para><para>-or-</para><para>
            <paramref name="vertexNeighbors"/> is <c>true</c>, and <paramref name="sides"/> is
            greater than four.</para></exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="orientation"/> is not a valid <see cref="T:Tektosyne.Geometry.PolygonOrientation"/> value.
            </exception>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.Bounds">
            <summary>
            The bounding rectangle that is circumscribed around the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.
            </summary>
            <remarks><para>
            <b>Bounds</b> always has a positive <see cref="P:Tektosyne.Geometry.RectD.Size"/> in both dimensions. The
            area covered by <b>Bounds</b> is horizontally centered on the <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/>, and also vertically for an even number of <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/>.
            </para><para>
            All coordinates are relative to the center of the polygon and use drawing orientation
            rather than mathematical orientation. That is, y-coordinates increase downward and both
            <see cref="P:Tektosyne.Geometry.RectD.Location"/> coordinates are negative.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.Connectivity">
            <summary>
            The maximum number of neighbors for the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</summary>
            <remarks><para>
            <b>Connectivity</b> equals the number of <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/> if <see
            cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>false</c>; otherwise, twice that number.
            </para><para>
            <b>Connectivity</b> applies to regular grids of adjacent identical <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/> shapes, such as the ones represented by <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            <b>Connectivity</b> determines the index range used by the various index conversion
            methods, and also the <see cref="P:Tektosyne.Geometry.PolygonGrid.Connectivity"/> of a <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> based on this <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.HasTopIndex">
            <summary>
            <c>true</c> if index zero within the <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/> range corresponds to the
            topmost edge or vertex of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>; <c>false</c> if this index
            corresponds to the edge to the right of the topmost vertex.</summary>
            <remarks><para>
            <b>HasTopIndex</b> is <c>true</c> if one of the following conditions holds:
            </para><list type="bullet"><item>
            <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>true</c>.
            </item><item>
            <see cref="F:Tektosyne.Geometry.RegularPolygon.Orientation"/> equals <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnEdge"/>, and <see
            cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/> is divisible by two.
            </item><item>
            <see cref="F:Tektosyne.Geometry.RegularPolygon.Orientation"/> equals <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnVertex"/>, and <see
            cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/> is not divisible by two.</item></list></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.InnerRadius">
            <summary>
            The radius of the circle that is inscribed within the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.
            </summary>
            <remarks>
            <b>InnerRadius</b> is always greater than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.Length">
            <summary>
            The length of each side of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</summary>
            <remarks>
            <b>Length</b> is always greater than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.Orientation">
            <summary>
            The orientation of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</summary>>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.OuterRadius">
            <summary>
            The radius of the circle that is circumscribed around the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.
            </summary>
            <remarks>
            <b>OuterRadius</b> is always greater than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.Sides">
            <summary>
            The number of sides of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</summary>
            <remarks>
            <b>Sides</b> is always greater than or equal to three.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors">
            <summary>
            <c>true</c> if <see cref="T:Tektosyne.Geometry.RegularPolygon"/> shapes that share only a common vertex are
            considered neighbors; otherwise, <c>false</c>.</summary>
            <remarks><para>
            <b>VertexNeighbors</b> applies to regular grids of adjacent identical <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/> shapes, such as the ones represented by <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/>.
            </para><para>
            <b>VertexNeighbors</b> always returns <c>false</c> if <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/> is greater
            than four, as inner angles of more than 90 degrees prevent the elements of a <see
            cref="T:Tektosyne.Geometry.PolygonGrid"/> from sharing a vertex without also sharing an edge.
            </para><para>
            <see cref="T:Tektosyne.Geometry.RegularPolygon"/> shapes that share a common edge are always considered
            neighbors, regardless of the value of <b>VertexNeighbors</b>. The maximum number of
            shared edges, and possibly vertices, equals the number of <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/>.
            </para><para>
            <b>VertexNeighbors</b> and <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/> determine the <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/>
            of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> which in turn determines the index range used by
            <see cref="M:Tektosyne.Geometry.RegularPolygon.AngleToIndex(System.Double)"/> and <see cref="M:Tektosyne.Geometry.RegularPolygon.IndexToAngle(System.Int32)"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.RegularPolygon.Vertices">
            <summary>
            The coordinates of all vertices the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</summary>
            <remarks><para>
            <b>Vertices</b> holds an <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.PointD"/> values indicating
            the coordinates of all vertices of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>, starting with the
            topmost vertex or with the right-hand one of two topmost vertices, and continuing
            clockwise. <b>Vertices</b> always contains <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/> elements.
            </para><para>
            All coordinates are relative to the center of the polygon and use drawing orientation
            rather than mathematical orientation. That is, y-coordinates increase downward and the
            first <b>Vertices</b> element has a negative y-coordinate.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.AngleToIndex(System.Double)">
            <summary>
            Converts the specified central angle to the index of the corresponding edge or vertex.
            </summary>
            <param name="angle">
            The central angle to convert, in degrees. This value is taken <see
            cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> 360 degrees, and may therefore be outside the interval [0, 360).
            </param>
            <returns>
            The zero-based index of the edge or vertex at the specified <paramref name="angle"/>.
            </returns>
            <remarks><para>
            The specified <paramref name="angle"/> is measured from the center of the <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/>, and increases clockwise from the right-hand side of the x-axis.
            </para><para>
            If <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>false</c>, the returned index enumerates all
            edges in clockwise direction. Counting starts at the topmost edge if <see
            cref="F:Tektosyne.Geometry.RegularPolygon.HasTopIndex"/> is <c>true</c>, and with the edge to the right of the topmost
            vertex otherwise.
            </para><para>
            If <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>true</c>, the returned index enumerates all edges
            and vertices in an alternating sequence. Counting starts with the topmost edge for <see
            cref="F:Tektosyne.Geometry.PolygonOrientation.OnEdge"/> orientation and with the topmost vertex otherwise,
            continuing clockwise.
            </para><para>
            Valid indices range from zero to <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/> less one. The 360 degrees of
            a full rotation around the central point are evenly divided among this range so that
            each index corresponds to an equal arc. If <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>true</c>,
            the arcs that are mapped to edge indices cover only the central half of each edge. The
            arcs covering the outer parts are mapped to vertex indices instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.Circumscribe(System.Double)">
            <overloads>
            Creates a copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is circumscribed around the
            specified circle or rectangle.</overloads>
            <summary>
            Creates a copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is circumscribed around the
            specified circle.</summary>
            <param name="radius">
            The radius of the circle around which to circumscribe the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.
            </param>
            <returns>
            A copy of this <see cref="T:Tektosyne.Geometry.RegularPolygon"/> instance whose <see cref="F:Tektosyne.Geometry.RegularPolygon.InnerRadius"/>
            equals the specified <paramref name="radius"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is equal to or less than zero.</exception>
            <remarks>
            <b>Circumscribe</b> returns the current <see cref="T:Tektosyne.Geometry.RegularPolygon"/> if the specified
            <paramref name="radius"/> equals the current <see cref="F:Tektosyne.Geometry.RegularPolygon.InnerRadius"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.Circumscribe(System.Double,System.Double)">
            <summary>
            Creates a copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is circumscribed around the
            specified rectangle.</summary>
            <param name="width">
            The width of the rectangle around which to circumscribe the <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <param name="height">
            The height of the rectangle around which to circumscribe the <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <returns>
            A copy of this <see cref="T:Tektosyne.Geometry.RegularPolygon"/> instance whose area completely covers a
            rectangle with the specified <paramref name="width"/> and <paramref name="height"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is equal to or less than zero.
            </exception>
            <remarks>
            <b>Circumscribe</b> returns exact results for triangles and squares only. For other
            polygons, the returned <see cref="T:Tektosyne.Geometry.RegularPolygon"/> is an approximation that includes
            some excess space around an inscribed rectangle with the specified <paramref
            name="width"/> and <paramref name="height"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.CompassToIndex(Tektosyne.Geometry.Compass)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.Compass"/> direction to the index of the corresponding
            edge or vertex.</summary>
            <param name="compass">
            The <see cref="T:Tektosyne.Geometry.Compass"/> direction to convert.</param>
            <returns>
            The zero-based index of the edge or vertex closest to the specified <paramref
            name="compass"/> direction.</returns>
            <remarks>
            <b>CompassToIndex</b> invokes <see cref="M:Tektosyne.Geometry.RegularPolygon.AngleToIndex(System.Double)"/> on the <see cref="T:System.Int32"/>
            value of the specified <paramref name="compass"/> direction, less 90 degress. Please
            refer to <see cref="M:Tektosyne.Geometry.RegularPolygon.AngleToIndex(System.Double)"/> for an explanation of index values.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.IndexToAngle(System.Int32)">
            <summary>
            Converts the specified index of an edge or vertex to the corresponding central angle.
            </summary>
            <param name="index">
            The zero-based index of an edge or vertex. This value is taken <see
            cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> the current <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/>, and may therefore be
            negative or greater than the maximum index.</param>
            <returns>
            The central angle, in degrees, of the edge or vertex with the specified <paramref
            name="index"/>. This value is always in the interval [0, 360).</returns>
            <remarks><para>
            If <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>false</c>, the specified <paramref name="index"/>
            enumerates all edges in clockwise direction. Counting starts at the topmost edge if <see
            cref="F:Tektosyne.Geometry.RegularPolygon.HasTopIndex"/> is <c>true</c>, and with the edge to the right of the topmost
            vertex otherwise.
            </para><para>
            If <see cref="F:Tektosyne.Geometry.RegularPolygon.VertexNeighbors"/> is <c>true</c>, the specified <paramref name="index"/>
            enumerates all edges and vertices in an alternating sequence. Counting starts with the
            topmost edge for <see cref="F:Tektosyne.Geometry.PolygonOrientation.OnEdge"/> orientation and with the
            topmost vertex otherwise, continuing clockwise.
            </para><para>
            The returned angle is measured from the center of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>, and
            increases clockwise from the right-hand side of the x-axis.
            </para><para>
            Valid indices range from zero to <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/> less one. The angle
            associated with each index is the angle from the central point to a vertex or to the
            middle of an edge, respectively.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.IndexToCompass(System.Int32)">
            <summary>
            Converts the specified index of an edge or vertex to the corresponding <see
            cref="T:Tektosyne.Geometry.Compass"/> direction.</summary>
            <param name="index">
            The zero-based index of an edge or vertex. This value is taken <see
            cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> the current <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/>, and may therefore be
            negative or greater than the maximum index.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.Compass"/> direction closest to the edge or vertex with the specified
            <paramref name="index"/>.</returns>
            <remarks>
            <b>IndexToCompass</b> first adds 90° to the result of <see cref="M:Tektosyne.Geometry.RegularPolygon.IndexToAngle(System.Int32)"/> for the
            specified <paramref name="index"/>, and then returns the result of <see
            cref="M:Tektosyne.Geometry.Angle.DegreesToCompass(System.Double)"/> for that angle. Please refer to <see
            cref="M:Tektosyne.Geometry.RegularPolygon.IndexToAngle(System.Int32)"/> for an explanation of index values.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.Inflate(System.Double)">
            <summary>
            Creates an inflated copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</summary>
            <param name="delta">
            The amount by which to inflate the <see cref="F:Tektosyne.Geometry.RegularPolygon.OuterRadius"/> of the <see
            cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <returns>
            A copy of this <see cref="T:Tektosyne.Geometry.RegularPolygon"/> instance whose <see cref="F:Tektosyne.Geometry.RegularPolygon.OuterRadius"/> has
            been inflated by the specified <paramref name="delta"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="delta"/> is equal to or less than the negative value of <see
            cref="F:Tektosyne.Geometry.RegularPolygon.OuterRadius"/>.</exception>
            <remarks><para>
            <b>Inflate</b> returns the current <see cref="T:Tektosyne.Geometry.RegularPolygon"/> if the specified
            <paramref name="delta"/> is zero.
            </para><para>
            Otherwise, <b>Inflate</b> creates a new <see cref="T:Tektosyne.Geometry.RegularPolygon"/> whose <see
            cref="F:Tektosyne.Geometry.RegularPolygon.OuterRadius"/> equals the current value plus <paramref name="delta"/>. The ratio
            of the new <see cref="F:Tektosyne.Geometry.RegularPolygon.Length"/> to the current value is the same as the ratio of the new
            <see cref="F:Tektosyne.Geometry.RegularPolygon.OuterRadius"/> to the current value.
            </para><para>
            The specified <paramref name="delta"/> may be negative to decrease the size of the new
            <see cref="T:Tektosyne.Geometry.RegularPolygon"/> rather than increase it. The <see cref="F:Tektosyne.Geometry.RegularPolygon.Sides"/> and <see
            cref="F:Tektosyne.Geometry.RegularPolygon.Orientation"/> values of the new <see cref="T:Tektosyne.Geometry.RegularPolygon"/> are always identical
            to the current values.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.Inscribe(System.Double)">
            <overloads>
            Creates a copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is inscribed in the specified
            circle or rectangle.</overloads>
            <summary>
            Creates a copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is inscribed in the specified
            circle.</summary>
            <param name="radius">
            The radius of the circle in which to inscribe the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.</param>
            <returns>
            A copy of this <see cref="T:Tektosyne.Geometry.RegularPolygon"/> instance whose <see cref="F:Tektosyne.Geometry.RegularPolygon.OuterRadius"/>
            equals the specified <paramref name="radius"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is equal to or less than zero.</exception>
            <remarks>
            <b>Inscribe</b> returns the current <see cref="T:Tektosyne.Geometry.RegularPolygon"/> if the specified
            <paramref name="radius"/> equals the current <see cref="F:Tektosyne.Geometry.RegularPolygon.OuterRadius"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.Inscribe(System.Double,System.Double)">
            <summary>
            Creates a copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> that is inscribed in the specified
            rectangle.</summary>
            <param name="width">
            The width of the rectangle in which to inscribe the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.
            </param>
            <param name="height">
            The height of the rectangle in which to inscribe the <see cref="T:Tektosyne.Geometry.RegularPolygon"/>.
            </param>
            <returns>
            A copy of this <see cref="T:Tektosyne.Geometry.RegularPolygon"/> instance whose <see cref="F:Tektosyne.Geometry.RegularPolygon.Bounds"/> match
            exactly either the specified <paramref name="width"/> or <paramref name="height"/>, and
            do not exceed the corresponding value for the other dimension.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is equal to or less than zero.
            </exception>
            <remarks>
            <b>Inscribe</b> returns the current <see cref="T:Tektosyne.Geometry.RegularPolygon"/> if the specified
            <paramref name="width"/> and <paramref name="height"/> equal the <see
            cref="P:Tektosyne.Geometry.RectD.Size"/> of the current <see cref="F:Tektosyne.Geometry.RegularPolygon.Bounds"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.OpposingIndex(System.Int32)">
            <summary>
            Determines the index of the edge or vertex opposite to the edge or vertex with the
            specified index.</summary>
            <param name="index">
            The zero-based index of an edge or vertex. This value is taken <see
            cref="M:Tektosyne.Fortran.Modulo(System.Decimal,System.Decimal)"/> the current <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/>, and may therefore be
            negative or greater than the maximum index.</param>
            <returns>
            The zero-based index of the edge or vertex opposite to the specified <paramref
            name="index"/>. This value is always less than <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/>.</returns>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="F:Tektosyne.Geometry.RegularPolygon.Connectivity"/> is not divisible by two. Opposing indices only exist if the
            total number of indices is even.</exception>
            <remarks>
            <b>OpposingIndex</b> should use the same index sequence as the <see
            cref="M:Tektosyne.Geometry.RegularPolygon.AngleToIndex(System.Double)"/> and <see cref="M:Tektosyne.Geometry.RegularPolygon.IndexToAngle(System.Int32)"/> methods.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.RegularPolygon.Resize(System.Double)">
            <summary>
            Creates a copy of the <see cref="T:Tektosyne.Geometry.RegularPolygon"/> with a different side length.
            </summary>
            <param name="length">
            The new value for the <see cref="F:Tektosyne.Geometry.RegularPolygon.Length"/> property.</param>
            <returns>
            A copy of this <see cref="T:Tektosyne.Geometry.RegularPolygon"/> instance whose <see cref="F:Tektosyne.Geometry.RegularPolygon.Length"/> equals
            the specified <paramref name="length"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length"/> is equal to or less than zero.</exception>
            <remarks><para>
            <b>Resize</b> returns the current <see cref="T:Tektosyne.Geometry.RegularPolygon"/> if the specified
            <paramref name="length"/> equals the current <see cref="F:Tektosyne.Geometry.RegularPolygon.Length"/>.
            </para><para>
            Otherwise, <b>Resize</b> creates a new <see cref="T:Tektosyne.Geometry.RegularPolygon"/> whose <see
            cref="F:Tektosyne.Geometry.RegularPolygon.Length"/> equals the specified <paramref name="length"/>, and whose other
            properties retain their current values.</para></remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SizeD">
            <summary>
            Represents an extension in two-dimensional space, using <see cref="T:System.Double"/> coordinates.
            </summary>
            <remarks><para>
            <b>SizeD</b> is an immutable structure whose two <see cref="T:System.Double"/> dimensions define an
            extension in two-dimensional space.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.SizeI"/> structure to represent sizes with <see cref="T:System.Int32"/>
            dimensions, and the <see cref="T:Tektosyne.Geometry.SizeF"/> structure to represent sizes with <see
            cref="T:System.Single"/> dimensions. You can convert <see cref="T:Tektosyne.Geometry.SizeD"/> instances to and from <see
            cref="T:Tektosyne.Geometry.SizeI"/> and <see cref="T:Tektosyne.Geometry.SizeF"/> instances, rounding off the <see cref="T:System.Double"/>
            dimensions as necessary.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SizeD"/> structure with the specified
            dimensions.</summary>
            <param name="width">
            The <see cref="F:Tektosyne.Geometry.SizeD.Width"/> of the <see cref="T:Tektosyne.Geometry.SizeD"/>.</param>
            <param name="height">
            The <see cref="F:Tektosyne.Geometry.SizeD.Height"/> of the <see cref="T:Tektosyne.Geometry.SizeD"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is less than zero.</exception>
        </member>
        <member name="F:Tektosyne.Geometry.SizeD.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.SizeD"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.SizeD"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SizeD.Width">
            <summary>
            The horizontal extension of the <see cref="T:Tektosyne.Geometry.SizeD"/>.</summary>
            <remarks>
            <b>Width</b> is never less than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SizeD.Height">
            <summary>
            The vertical extension of the <see cref="T:Tektosyne.Geometry.SizeD"/>.</summary>
            <remarks>
            <b>Height</b> is never less than zero.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Add(Tektosyne.Geometry.SizeD)">
            <summary>
            Adds the dimensions of the specified <see cref="T:Tektosyne.Geometry.SizeD"/> to this instance.</summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeD"/> whose dimensions to add to this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> whose <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/> properties
            equal the corresponding properties of the specified <paramref name="size"/> added to
            those of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.SizeD"/> instance.</summary>
            <returns>
            An <see cref="T:System.Double"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeD.Height"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Restrict(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Restricts the <see cref="T:Tektosyne.Geometry.SizeD"/> to the specified extension range.</summary>
            <param name="minWidth">
            The smallest permissible <see cref="F:Tektosyne.Geometry.SizeD.Width"/>.</param>
            <param name="minHeight">
            The smallest permissible <see cref="F:Tektosyne.Geometry.SizeD.Height"/>.</param>
            <param name="maxWidth">
            The greatest permissible <see cref="F:Tektosyne.Geometry.SizeD.Width"/>.</param>
            <param name="maxHeight">
            The greatest permissible <see cref="F:Tektosyne.Geometry.SizeD.Height"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> whose <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/> equal those of
            this instance, restricted to the indicated extension range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxWidth"/> or <paramref name="maxHeight"/> is less than zero.
            </exception>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.SizeD"/> to a <see cref="T:Tektosyne.Geometry.SizeI"/> by rounding dimensions to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> instance whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.SizeD"/>, rounded to the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Double"/> dimensions of the <see cref="T:Tektosyne.Geometry.SizeD"/> are converted to <see
            cref="T:System.Int32"/> dimensions using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Subtract(Tektosyne.Geometry.SizeD)">
            <summary>
            Subtracts the dimensions of the specified <see cref="T:Tektosyne.Geometry.SizeD"/> from this instance.
            </summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeD"/> whose dimensions to subtract from this instance.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="size"/> contains a <see cref="F:Tektosyne.Geometry.SizeD.Width"/> or <see cref="F:Tektosyne.Geometry.SizeD.Height"/> that is
            greater than the corresponding property of this instance.</exception>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> whose <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/> properties
            equal the corresponding properties of the specified <paramref name="size"/> subtracted
            from those of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.ToSizeF">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.SizeD"/> to a <see cref="T:Tektosyne.Geometry.SizeF"/> by casting dimensions to the
            equivalent <see cref="T:System.Single"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> instance whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeF.Height"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.SizeD"/>, cast to the equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.ToSizeI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.SizeD"/> to a <see cref="T:Tektosyne.Geometry.SizeI"/> by truncating dimensions to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> instance whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.SizeD"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SizeD"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeD.Height"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Equality(Tektosyne.Geometry.SizeD,Tektosyne.Geometry.SizeD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeD"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SizeD.Equals(Tektosyne.Geometry.SizeD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.SizeD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Inequality(Tektosyne.Geometry.SizeD,Tektosyne.Geometry.SizeD)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeD"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SizeD.Equals(Tektosyne.Geometry.SizeD)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.SizeD"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Addition(Tektosyne.Geometry.SizeD,Tektosyne.Geometry.SizeD)">
            <summary>
            Adds the dimensions of two <see cref="T:Tektosyne.Geometry.SizeD"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeD"/> to add.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeD"/> to add.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> whose <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/> properties
            equal the corresponding properties of <paramref name="a"/> added to those of <paramref
            name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.SizeD.Add(Tektosyne.Geometry.SizeD)"/> to add the dimensions of the two <see
            cref="T:Tektosyne.Geometry.SizeD"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Subtraction(Tektosyne.Geometry.SizeD,Tektosyne.Geometry.SizeD)">
            <summary>
            Subtracts the dimensions of two <see cref="T:Tektosyne.Geometry.SizeD"/> instances.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.SizeD"/> to subtract from.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.SizeD"/> to subtract.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> whose <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/> properties
            equal the corresponding properties of <paramref name="a"/> subtracted from those of
            <paramref name="b"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="a"/> and <paramref name="b"/> contain <see cref="F:Tektosyne.Geometry.SizeD.Width"/> or <see
            cref="F:Tektosyne.Geometry.SizeD.Height"/> properties whose difference is less than zero.</exception>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.SizeD.Subtract(Tektosyne.Geometry.SizeD)"/> to subtract the dimensions of the two <see
            cref="T:Tektosyne.Geometry.SizeD"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Implicit(Tektosyne.Geometry.SizeF)~Tektosyne.Geometry.SizeD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.SizeF"/> to a <see cref="T:Tektosyne.Geometry.SizeD"/> with identical dimensions.
            </summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.SizeD"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> instance whose <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/>
            properties equal the corresponding properties of the specified <paramref name="size"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Implicit(Tektosyne.Geometry.SizeI)~Tektosyne.Geometry.SizeD">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.SizeI"/> to a <see cref="T:Tektosyne.Geometry.SizeD"/> with identical dimensions.
            </summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.SizeD"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeD"/> instance whose <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/>
            properties equal the corresponding properties of the specified <paramref name="size"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Explicit(Tektosyne.Geometry.SizeD)~Tektosyne.Geometry.SizeF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.SizeD"/> to a <see cref="T:Tektosyne.Geometry.SizeF"/> by casting dimensions to the
            equivalent <see cref="T:System.Single"/> values.</summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.SizeF"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> instance whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeF.Height"/> properties equal the corresponding properties of the specified
            <paramref name="size"/>, cast to the equivalent <see cref="T:System.Single"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.op_Explicit(Tektosyne.Geometry.SizeD)~Tektosyne.Geometry.SizeI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.SizeD"/> to a <see cref="T:Tektosyne.Geometry.SizeI"/> by truncating dimensions to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeD"/> instance to convert into a <see cref="T:Tektosyne.Geometry.SizeI"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> instance whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties equal the corresponding properties of the specified
            <paramref name="size"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeD"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.SizeD"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.SizeD"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.SizeD"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SizeD"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SizeD"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.SizeD.Equals(Tektosyne.Geometry.SizeD)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Equals(Tektosyne.Geometry.SizeD)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SizeD"/> have the same
            value.</summary>
            <param name="size">
            A <see cref="T:Tektosyne.Geometry.SizeD"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="size"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.SizeD.Width"/> and <see cref="F:Tektosyne.Geometry.SizeD.Height"/>
            properties of the two <see cref="T:Tektosyne.Geometry.SizeD"/> instances to test for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Equals(Tektosyne.Geometry.SizeD,Tektosyne.Geometry.SizeD)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SizeD"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.SizeD.Equals(Tektosyne.Geometry.SizeD)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.SizeD"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeD.Equals(Tektosyne.Geometry.SizeD,Tektosyne.Geometry.SizeD,System.Double)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SizeD"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeD"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the dimensions of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the dimensions of <paramref name="a"/>
            and <paramref name="b"/> is less than or equal to <paramref name="epsilon"/>; otherwise,
            <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SizeF">
            <summary>
            Represents an extension in two-dimensional space, using <see cref="T:System.Single"/> coordinates.
            </summary>
            <remarks><para>
            <b>SizeF</b> is an immutable structure whose two <see cref="T:System.Single"/> dimensions define an
            extension in two-dimensional space.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.SizeI"/> structure to represent sizes with <see cref="T:System.Int32"/>
            dimensions, and the <see cref="T:Tektosyne.Geometry.SizeD"/> structure to represent sizes with <see
            cref="T:System.Double"/> dimensions. You can convert <see cref="T:Tektosyne.Geometry.SizeF"/> instances to and from <see
            cref="T:Tektosyne.Geometry.SizeI"/> instances, rounding off the <see cref="T:System.Single"/> dimensions as necessary.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SizeF"/> structure with the specified
            dimensions.</summary>
            <param name="width">
            The <see cref="F:Tektosyne.Geometry.SizeF.Width"/> of the <see cref="T:Tektosyne.Geometry.SizeF"/>.</param>
            <param name="height">
            The <see cref="F:Tektosyne.Geometry.SizeF.Height"/> of the <see cref="T:Tektosyne.Geometry.SizeF"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is less than zero.</exception>
        </member>
        <member name="F:Tektosyne.Geometry.SizeF.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.SizeF"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.SizeF"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SizeF.Width">
            <summary>
            The horizontal extension of the <see cref="T:Tektosyne.Geometry.SizeF"/>.</summary>
            <remarks>
            <b>Width</b> is never less than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SizeF.Height">
            <summary>
            The vertical extension of the <see cref="T:Tektosyne.Geometry.SizeF"/>.</summary>
            <remarks>
            <b>Height</b> is never less than zero.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Add(Tektosyne.Geometry.SizeF)">
            <summary>
            Adds the dimensions of the specified <see cref="T:Tektosyne.Geometry.SizeF"/> to this instance.</summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeF"/> whose dimensions to add to this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see cref="F:Tektosyne.Geometry.SizeF.Height"/> properties
            equal the corresponding properties of the specified <paramref name="size"/> added to
            those of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.SizeF"/> instance.</summary>
            <returns>
            An <see cref="T:System.Single"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeF.Height"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Restrict(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Restricts the <see cref="T:Tektosyne.Geometry.SizeF"/> to the specified extension range.</summary>
            <param name="minWidth">
            The smallest permissible <see cref="F:Tektosyne.Geometry.SizeF.Width"/>.</param>
            <param name="minHeight">
            The smallest permissible <see cref="F:Tektosyne.Geometry.SizeF.Height"/>.</param>
            <param name="maxWidth">
            The greatest permissible <see cref="F:Tektosyne.Geometry.SizeF.Width"/>.</param>
            <param name="maxHeight">
            The greatest permissible <see cref="F:Tektosyne.Geometry.SizeF.Height"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see cref="F:Tektosyne.Geometry.SizeF.Height"/> equal those of
            this instance, restricted to the indicated extension range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxWidth"/> or <paramref name="maxHeight"/> is less than zero.
            </exception>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Round">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.SizeF"/> to a <see cref="T:Tektosyne.Geometry.SizeI"/> by rounding dimensions to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> instance whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.SizeF"/>, rounded to the nearest <see cref="T:System.Int32"/> values.</returns>
            <remarks>
            The <see cref="T:System.Single"/> dimensions of the <see cref="T:Tektosyne.Geometry.SizeF"/> are converted to <see
            cref="T:System.Int32"/> dimensions using <see cref="M:Tektosyne.Fortran.NInt(System.Decimal)"/> rounding.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Subtract(Tektosyne.Geometry.SizeF)">
            <summary>
            Subtracts the dimensions of the specified <see cref="T:Tektosyne.Geometry.SizeF"/> from this instance.
            </summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeF"/> whose dimensions to subtract from this instance.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="size"/> contains a <see cref="F:Tektosyne.Geometry.SizeF.Width"/> or <see cref="F:Tektosyne.Geometry.SizeF.Height"/> that is
            greater than the corresponding property of this instance.</exception>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see cref="F:Tektosyne.Geometry.SizeF.Height"/> properties
            equal the corresponding properties of the specified <paramref name="size"/> subtracted
            from those of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.ToSizeI">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.SizeF"/> to a <see cref="T:Tektosyne.Geometry.SizeI"/> by truncating dimensions to
            the nearest <see cref="T:System.Int32"/> values.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> instance whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties equal the corresponding properties of the <see
            cref="T:Tektosyne.Geometry.SizeF"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SizeF"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeF.Height"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.op_Equality(Tektosyne.Geometry.SizeF,Tektosyne.Geometry.SizeF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeF"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SizeF.Equals(Tektosyne.Geometry.SizeF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.SizeF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.op_Inequality(Tektosyne.Geometry.SizeF,Tektosyne.Geometry.SizeF)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeF"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SizeF.Equals(Tektosyne.Geometry.SizeF)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.SizeF"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.op_Addition(Tektosyne.Geometry.SizeF,Tektosyne.Geometry.SizeF)">
            <summary>
            Adds the dimensions of two <see cref="T:Tektosyne.Geometry.SizeF"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeF"/> to add.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeF"/> to add.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see cref="F:Tektosyne.Geometry.SizeF.Height"/> properties
            equal the corresponding properties of <paramref name="a"/> added to those of <paramref
            name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.SizeF.Add(Tektosyne.Geometry.SizeF)"/> to add the dimensions of the two <see
            cref="T:Tektosyne.Geometry.SizeF"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.op_Subtraction(Tektosyne.Geometry.SizeF,Tektosyne.Geometry.SizeF)">
            <summary>
            Subtracts the dimensions of two <see cref="T:Tektosyne.Geometry.SizeF"/> instances.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.SizeF"/> to subtract from.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.SizeF"/> to subtract.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see cref="F:Tektosyne.Geometry.SizeF.Height"/> properties
            equal the corresponding properties of <paramref name="a"/> subtracted from those of
            <paramref name="b"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="a"/> and <paramref name="b"/> contain <see cref="F:Tektosyne.Geometry.SizeF.Width"/> or <see
            cref="F:Tektosyne.Geometry.SizeF.Height"/> properties whose difference is less than zero.</exception>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.SizeF.Subtract(Tektosyne.Geometry.SizeF)"/> to subtract the dimensions of the two <see
            cref="T:Tektosyne.Geometry.SizeF"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.op_Implicit(Tektosyne.Geometry.SizeI)~Tektosyne.Geometry.SizeF">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.SizeI"/> to a <see cref="T:Tektosyne.Geometry.SizeF"/> with identical dimensions.
            </summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeI"/> instance to convert into a <see cref="T:Tektosyne.Geometry.SizeF"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeF"/> instance whose <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see cref="F:Tektosyne.Geometry.SizeF.Height"/>
            properties equal the corresponding properties of the specified <paramref name="size"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.op_Explicit(Tektosyne.Geometry.SizeF)~Tektosyne.Geometry.SizeI">
            <summary>
            Converts a <see cref="T:Tektosyne.Geometry.SizeF"/> to a <see cref="T:Tektosyne.Geometry.SizeI"/> by truncating dimensions to the
            nearest <see cref="T:System.Int32"/> values.</summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeF"/> instance to convert into a <see cref="T:Tektosyne.Geometry.SizeI"/> instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> instance whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties equal the corresponding properties of the specified
            <paramref name="size"/>, truncated to the nearest <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeF"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.SizeF"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.SizeF"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.SizeF"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SizeF"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SizeF"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.SizeF.Equals(Tektosyne.Geometry.SizeF)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Equals(Tektosyne.Geometry.SizeF)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SizeF"/> have the same
            value.</summary>
            <param name="size">
            A <see cref="T:Tektosyne.Geometry.SizeF"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="size"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.SizeF.Width"/> and <see cref="F:Tektosyne.Geometry.SizeF.Height"/>
            properties of the two <see cref="T:Tektosyne.Geometry.SizeF"/> instances to test for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Equals(Tektosyne.Geometry.SizeF,Tektosyne.Geometry.SizeF)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SizeF"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.SizeF.Equals(Tektosyne.Geometry.SizeF)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.SizeF"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeF.Equals(Tektosyne.Geometry.SizeF,Tektosyne.Geometry.SizeF,System.Single)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SizeF"/> instances have the same value,
            given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeF"/> to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which the dimensions of <paramref name="a"/> and
            <paramref name="b"/> should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between the dimensions of <paramref name="a"/>
            and <paramref name="b"/> is less than or equal to <paramref name="epsilon"/>; otherwise,
            <c>false</c>.</returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SizeI">
            <summary>
            Represents an extension in two-dimensional space, using <see cref="T:System.Int32"/> coordinates.
            </summary>
            <remarks><para>
            <b>SizeI</b> is an immutable structure whose two <see cref="T:System.Int32"/> dimensions define an
            extension in two-dimensional space.
            </para><para>
            Use the <see cref="T:Tektosyne.Geometry.SizeF"/> structure to represent sizes with <see cref="T:System.Single"/>
            dimensions, and the <see cref="T:Tektosyne.Geometry.SizeD"/> structure to represent sizes with <see
            cref="T:System.Double"/> dimensions.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SizeI"/> structure with the specified
            dimensions.</summary>
            <param name="width">
            The <see cref="F:Tektosyne.Geometry.SizeI.Width"/> of the <see cref="T:Tektosyne.Geometry.SizeI"/>.</param>
            <param name="height">
            The <see cref="F:Tektosyne.Geometry.SizeI.Height"/> of the <see cref="T:Tektosyne.Geometry.SizeI"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is less than zero.</exception>
        </member>
        <member name="F:Tektosyne.Geometry.SizeI.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.Geometry.SizeI"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.Geometry.SizeI"/> instance that was created with the default
            constructor.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SizeI.Width">
            <summary>
            The horizontal extension of the <see cref="T:Tektosyne.Geometry.SizeI"/>.</summary>
            <remarks>
            <b>Width</b> is never less than zero.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SizeI.Height">
            <summary>
            The vertical extension of the <see cref="T:Tektosyne.Geometry.SizeI"/>.</summary>
            <remarks>
            <b>Height</b> is never less than zero.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.Add(Tektosyne.Geometry.SizeI)">
            <summary>
            Adds the dimensions of the specified <see cref="T:Tektosyne.Geometry.SizeI"/> to this instance.</summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeI"/> whose dimensions to add to this instance.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see cref="F:Tektosyne.Geometry.SizeI.Height"/> properties
            equal the corresponding properties of the specified <paramref name="size"/> added to
            those of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.SizeI"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.Restrict(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts the <see cref="T:Tektosyne.Geometry.SizeI"/> to the specified extension range.</summary>
            <param name="minWidth">
            The smallest permissible <see cref="F:Tektosyne.Geometry.SizeI.Width"/>.</param>
            <param name="minHeight">
            The smallest permissible <see cref="F:Tektosyne.Geometry.SizeI.Height"/>.</param>
            <param name="maxWidth">
            The greatest permissible <see cref="F:Tektosyne.Geometry.SizeI.Width"/>.</param>
            <param name="maxHeight">
            The greatest permissible <see cref="F:Tektosyne.Geometry.SizeI.Height"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see cref="F:Tektosyne.Geometry.SizeI.Height"/> equal those of
            this instance, restricted to the indicated extension range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxWidth"/> or <paramref name="maxHeight"/> is less than zero.
            </exception>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.Subtract(Tektosyne.Geometry.SizeI)">
            <summary>
            Subtracts the dimensions of the specified <see cref="T:Tektosyne.Geometry.SizeI"/> from this instance.
            </summary>
            <param name="size">
            The <see cref="T:Tektosyne.Geometry.SizeI"/> whose dimensions to subtract from this instance.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="size"/> contains a <see cref="F:Tektosyne.Geometry.SizeI.Width"/> or <see cref="F:Tektosyne.Geometry.SizeI.Height"/> that is
            greater than the corresponding property of this instance.</exception>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see cref="F:Tektosyne.Geometry.SizeI.Height"/> properties
            equal the corresponding properties of the specified <paramref name="size"/> subtracted
            from those of this instance.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SizeI"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.op_Equality(Tektosyne.Geometry.SizeI,Tektosyne.Geometry.SizeI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeI"/> instances have the same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SizeI.Equals(Tektosyne.Geometry.SizeI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.SizeI"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.op_Inequality(Tektosyne.Geometry.SizeI,Tektosyne.Geometry.SizeI)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeI"/> instances have different values.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SizeI.Equals(Tektosyne.Geometry.SizeI)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.SizeI"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.op_Addition(Tektosyne.Geometry.SizeI,Tektosyne.Geometry.SizeI)">
            <summary>
            Adds the dimensions of two <see cref="T:Tektosyne.Geometry.SizeI"/> instances.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeI"/> to add.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeI"/> to add.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see cref="F:Tektosyne.Geometry.SizeI.Height"/> properties
            equal the corresponding properties of <paramref name="a"/> added to those of <paramref
            name="b"/>.</returns>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.SizeI.Add(Tektosyne.Geometry.SizeI)"/> to add the dimensions of the two <see
            cref="T:Tektosyne.Geometry.SizeI"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.op_Subtraction(Tektosyne.Geometry.SizeI,Tektosyne.Geometry.SizeI)">
            <summary>
            Subtracts the dimensions of two <see cref="T:Tektosyne.Geometry.SizeI"/> instances.</summary>
            <param name="a">
            The <see cref="T:Tektosyne.Geometry.SizeI"/> to subtract from.</param>
            <param name="b">
            The <see cref="T:Tektosyne.Geometry.SizeI"/> to subtract.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SizeI"/> whose <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see cref="F:Tektosyne.Geometry.SizeI.Height"/> properties
            equal the corresponding properties of <paramref name="a"/> subtracted from those of
            <paramref name="b"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="a"/> and <paramref name="b"/> contain <see cref="F:Tektosyne.Geometry.SizeI.Width"/> or <see
            cref="F:Tektosyne.Geometry.SizeI.Height"/> properties whose difference is less than zero.</exception>
            <remarks>
            This operator invokes <see cref="M:Tektosyne.Geometry.SizeI.Subtract(Tektosyne.Geometry.SizeI)"/> to subtract the dimensions of the two <see
            cref="T:Tektosyne.Geometry.SizeI"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.SizeI"/> instances have the same value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.SizeI"/> instance and a specified object, which must
            be a <see cref="T:Tektosyne.Geometry.SizeI"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.SizeI"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SizeI"/> instance and its
            value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SizeI"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.SizeI.Equals(Tektosyne.Geometry.SizeI)"/> overload to test
            the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.Equals(Tektosyne.Geometry.SizeI)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SizeI"/> have the same
            value.</summary>
            <param name="size">
            A <see cref="T:Tektosyne.Geometry.SizeI"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="size"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.SizeI.Width"/> and <see cref="F:Tektosyne.Geometry.SizeI.Height"/>
            properties of the two <see cref="T:Tektosyne.Geometry.SizeI"/> instances to test for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SizeI.Equals(Tektosyne.Geometry.SizeI,Tektosyne.Geometry.SizeI)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SizeI"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SizeI"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SizeI"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.SizeI.Equals(Tektosyne.Geometry.SizeI)"/> overload to test the
            two <see cref="T:Tektosyne.Geometry.SizeI"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SplitEdgeResult">
            <summary>
            Represents the result of splitting a <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> into two parts.</summary>
            <remarks>
            <b>SplitEdgeResult</b> is an immutable structure containing two or three <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances that describe the result of splitting another instance 
            into two parts. If <see cref="F:Tektosyne.Geometry.SplitEdgeResult.CreatedEdge"/> is valid then <see
            cref="F:Tektosyne.Geometry.SplitEdgeResult.IsEdgeDeleted"/> is <c>false</c>, and vice versa.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SplitEdgeResult.#ctor(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SplitEdgeResult"/> structure with the
            specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances.</summary>
            <param name="originEdge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> as
            the instance that has been split.</param>
            <param name="destinationEdge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the same <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> as the instance that has been split.</param>
            <param name="createdEdge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that has been newly created for one of the two parts
            resulting from the split, if any; otherwise, a null reference.</param>
            <param name="isEdgeDeleted">
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to be split has been deleted because
            both parts were duplicated by existing instances; otherwise, <c>false</c>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.SplitEdgeResult.OriginEdge">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> as
            the instance that has been split.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SplitEdgeResult.DestinationEdge">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the same <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> as the instance that has been split.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SplitEdgeResult.CreatedEdge">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that has been newly created for one of the two parts
            resulting from the split, if any; otherwise, a null reference.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SplitEdgeResult.IsEdgeDeleted">
            <summary>
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to be split has been deleted because
            both parts were duplicated by existing instances; otherwise, <c>false</c>.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.SplitEdgeResult.UpdateFaces(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Collections.Int32Dictionary{System.Int32},Tektosyne.Collections.Int32Dictionary{System.Int32})">
            <summary>
            Updates the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> keys in the specified dictionaries after the
            specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> has been split.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> whose splitting resulted in the current <see
            cref="T:Tektosyne.Geometry.SplitEdgeResult"/>.</param>
            <param name="edgeToFace1">
            An <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> that maps the keys of any existing half-edges to the
            keys of the incident bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> of the corresponding <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> in a first <see cref="T:Tektosyne.Geometry.Subdivision"/>.</param>
            <param name="edgeToFace2">
            An <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> that maps the keys of any existing half-edges to the
            keys of the incident bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> of the corresponding <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> in a second <see cref="T:Tektosyne.Geometry.Subdivision"/>.</param>
            <remarks>
            <b>UpdateFaces</b> ensures that the mapping between original and intersected faces
            established by the <see cref="M:Tektosyne.Geometry.Subdivision.Intersection(Tektosyne.Geometry.Subdivision,Tektosyne.Geometry.Subdivision,Tektosyne.ValueTuple{System.Int32,System.Int32}[]@)"/> algorithm is kept up-to-date
            when edge splitting results in a valid <see cref="F:Tektosyne.Geometry.SplitEdgeResult.CreatedEdge"/>.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.Subdivision">
            <summary>
            Represents a planar subdivision as a doubly-connected edge list.</summary>
            <remarks><para>
            <b>Subdivision</b> represents a planar subdivision containing only straight bounded edges,
            i.e. a collection of line segments in two-dimensional space that do not intersect except at
            their end points. The vertices of the subdivision are the end points of all line segments.
            The entire structure of edges and vertices constitutes the planar embedding of a graph.
            </para><para>
            In addition to edges and vertices, <b>Subdivision</b> also stores the faces formed by all
            edges. Faces are any polygonal regions that are bounded by edges, whether on the inside, on
            the outside, or both. Edges are represented by the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> class, and
            faces are represented by the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> class.
            </para><para>
            <b>Subdivision</b> supports generic graph algorithms through its implementation of the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> interface. The graph nodes are the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of
            all vertices. Two nodes are considered connected if an edge exists between their
            corresponding vertices. The distance measure is the Euclidean distance between vertices.
            </para><para>
            The planar subdivision is implemented as the doubly-connected edge list described by Mark de
            Berg et al., <em>Computational Geometry</em> (3rd ed.), Springer-Verlag 2008, p.29-43. This
            implementation represents edges as "twin" pairs of half-edges.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Subdivision"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Subdivision"/> class with default
            properties.</summary>
            <remarks>
            The <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> and <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> properties are initialized to empty
            collections with a default initial capacity. The <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> property is
            initialized to a collection that contains only the unbounded face and has a default
            initial capacity.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Subdivision"/> class with the specified
            initial capacities.</summary>
            <param name="edgeCapacity">
            The initial <see cref="P:Tektosyne.Collections.SortedListEx`2.Capacity"/> for the <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection.</param>
            <param name="faceCapacity">
            The initial <see cref="P:Tektosyne.Collections.SortedListEx`2.Capacity"/> for the <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection.</param>
            <param name="vertexCapacity">
            The initial <see cref="P:Tektosyne.Collections.SortedListEx`2.Capacity"/> for the <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection.</param>
            <remarks>
            The <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> and <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> properties are initialized to empty
            collections with the specified initial capacities. The <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> property is
            initialized to a collection that contains only the unbounded face and has the specified
            initial capacity.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._edges">
            <summary>
            The list of all half-edges in the <see cref="T:Tektosyne.Geometry.Subdivision"/>, sorted by key.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._faces">
            <summary>
            The list of all faces in the <see cref="T:Tektosyne.Geometry.Subdivision"/>, sorted by key.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._vertices">
            <summary>
            The lexicographically sorted list of all vertices in the <see cref="T:Tektosyne.Geometry.Subdivision"/> and
            one of their incident half-edges.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._vertexRegions">
            <summary>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> regions associated with all vertices, if any.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._connectivity">
            <summary>
            The maximum number of half-edges originating from any vertex.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._epsilon">
            <summary>
            The epsilon used for coordinate comparisons within the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            collection.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._nextEdgeKey">
            <summary>
            The unique key for the next <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instance.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._nextFaceKey">
            <summary>
            The unique key for the next <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instance.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision._cursorY">
            <summary>
            The current y-coordinate of the sweep line of a plane sweep algorithm.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.Edges">
            <summary>
            Gets a read-only view of all half-edges in the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.SortedListEx`2"/> that maps the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> of each half-edge in the <see cref="T:Tektosyne.Geometry.Subdivision"/> to the
            corresponding <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> object.</value>
            <remarks><para>
            <b>Edges</b> always contains an even number of elements since every edge in the <see
            cref="T:Tektosyne.Geometry.Subdivision"/> is comprised of two <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> objects.
            </para><para>
            <b>Edges</b> is provided for convenience, unit testing, and faster edge scanning. This
            collection is not strictly needed since a list of all half-edges is easily obtained by
            iterating over all <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>, e.g. using <see cref="M:Tektosyne.Geometry.Subdivision.GetEdgesByOrigin"/>.
            </para><para>
            Maintaining the <b>Edges</b> collection consumes little extra runtime but a significant
            amount of memory, so an alternative <see cref="T:Tektosyne.Geometry.Subdivision"/> implementation might
            choose to remove this collection and create a new list of half-edges where necessary.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.Epsilon">
            <summary>
            Gets or sets the epsilon used for coordinate comparisons within the <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection.</summary>
            <value><para>
            The maximum absolute difference at which vertex coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. The default is zero.</para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a negative value.</exception>
            <exception cref="T:Tektosyne.PropertyValueException">
            The property is changed, and <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> is not an empty collection.
            </exception>
            <remarks><para>
            <b>Epsilon</b> returns the comparison epsilon used by the <see cref="P:Tektosyne.Collections.SortedListEx`2.Comparer"/> that establishes the lexicographical ordering of <see
            cref="T:Tektosyne.Geometry.PointD"/> keys within the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection.
            </para><para>
            <b>Epsilon</b> cannot be set if the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection already contains
            one or more elements. Factory methods that create a new <see cref="T:Tektosyne.Geometry.Subdivision"/>
            typically offer a parameter to set this property upon construction.
            </para><note type="caution">
            Do not attempt to directly change the <see cref="P:Tektosyne.Geometry.PointDComparerY.Epsilon"/> of the <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> comparer! This will cause incorrect search results and data corruption
            if the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection was not empty. Moreover, the <see
            cref="T:Tektosyne.Geometry.Subdivision"/> caches the current <b>Epsilon</b> internally, and changing the
            comparer epsilon directly will not update the cached value.</note></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.Faces">
            <summary>
            Gets a read-only view of all faces in the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.SortedListEx`2"/> that maps the <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of each face in the <see cref="T:Tektosyne.Geometry.Subdivision"/> to the
            corresponding <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> object.</value>
            <remarks>
            <b>Faces</b> always contains at least one element which is the unbounded face. This <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> always remains at index position zero and always has a <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of zero.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Geometry.Subdivision"/> is empty.</summary>
            <value>
            <c>true</c> if the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection is empty; otherwise, <c>false</c>.
            </value>
            <remarks>
            For any valid <see cref="T:Tektosyne.Geometry.Subdivision"/>, the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection is empty
            exactly if the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection is also empty, and the <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection contains only the unbounded face.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.VertexRegions">
            <summary>
            Gets a dictionary that maps <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> to <see cref="T:Tektosyne.Graph.IGraph2D`1"/> regions.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> that maps <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> elements, i.e.
            <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes, to <see cref="T:Tektosyne.Graph.IGraph2D`1"/> regions. The default is an
            empty collection.</value>
            <remarks><para>
            <b>VertexRegions</b> always returns an empty collection by default, as a planar <see
            cref="T:Tektosyne.Geometry.Subdivision"/> does not inherently associate regions with <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.
            Clients must explicitly add any desired key-and-value pairs.
            </para><para>
            <see cref="M:Tektosyne.Geometry.Subdivision.GetWorldRegion(Tektosyne.Geometry.PointD)"/> attempts to return the polygonal region that 
            <b>VertexRegions</b> associates with a specified <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element, i.e.
            <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, before returning a null reference.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.Vertices">
            <summary>
            Gets a read-only view of all vertices in the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.SortedListEx`2"/> that maps the <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates of all vertices in the <see cref="T:Tektosyne.Geometry.Subdivision"/> to a <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that originates with the vertex.</value>
            <remarks><para>
            <b>Vertices</b> is sorted lexicographically by <see cref="T:Tektosyne.Geometry.PointD"/> keys, using the
            ordering established by the <see cref="T:Tektosyne.Geometry.PointDComparerY"/> class. That is, keys are
            sorted first by <see cref="F:Tektosyne.Geometry.PointD.Y"/> and then by <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinates.
            </para><para>
            If multiple <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances originate from the same vertex, one
            is selected arbitrarily for the <b>Vertices</b> collection, depending on the
            construction order of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.
            </para><para>
            Every <b>Vertices</b> key is associated with a valid <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>; that
            is, a <see cref="T:Tektosyne.Geometry.Subdivision"/> never contains isolated points, only edges.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.AddEdge(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <overloads>
            Adds a new edge to the <see cref="T:Tektosyne.Geometry.Subdivision"/> that connects the specified vertices.
            </overloads>
            <summary>
            Adds a new edge to the <see cref="T:Tektosyne.Geometry.Subdivision"/> that connects the specified vertices.
            </summary>
            <param name="start">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the first vertex to connect.</param>
            <param name="end">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the second vertex to connect.</param>
            <returns>
            On success, the new <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> from <paramref name="start"/> to
            <paramref name="end"/>; otherwise, a null reference.</returns>
            <remarks><para>
            <b>AddEdge</b> first checks if the new <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> would intersect any
            existing <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>, except at the specified <paramref name="start"/> and
            <paramref name="end"/> coordinates, and returns a null reference if so.
            </para><para>
            Otherwise, <b>AddEdge</b> creates two new <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> elements, from <paramref
            name="start"/> to <paramref name="end"/> and vice versa. If <paramref name="start"/>
            and/or <paramref name="end"/> are not found in the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection,
            <b>AddEdge</b> adds the corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> elements as well.
            </para><para>
            If the added <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> connects an inner cycle of the containing
            <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> with its outer cycle, <b>AddEdge</b> removes the inner
            cycle. If the added <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> connects two inner cycles, one of them
            is arbitrarily chosen for removal.
            </para><para>
            If the added <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> connects two half-edges within the same inner
            cycle, <b>AddEdge</b> creates a new <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> for the resulting
            enclosed area. If the added <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> connects two half-edges within
            the outer cycle, <b>AddEdge</b> creates a new <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> for the part
            enclosing the smaller area.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.AddEdge(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,System.Int32@,System.Int32@)">
            <summary>
            Adds a new edge to the <see cref="T:Tektosyne.Geometry.Subdivision"/> that connects the specified vertices,
            and returns information on the changed and added <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>.</summary>
            <param name="start">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the first vertex to connect.</param>
            <param name="end">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the second vertex to connect.</param>
            <param name="changedFace">
            Returns the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that
            was changed by the edge creation, if any; otherwise, -1.</param>
            <param name="addedFace">
            Returns the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that
            was added along with the edge, if any; otherwise, -1.</param>
            <returns>
            On success, the new <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> from <paramref name="start"/> to
            <paramref name="end"/>; otherwise, a null reference.</returns>
            <remarks>
            Please refer to the basic <see cref="M:Tektosyne.Geometry.Subdivision.AddEdge(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> overload for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.Find(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> at the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates within the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <param name="epsilon"><para>
            The maximum absolute difference at which two coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. The default is zero.</para></param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> that coincides with <paramref name="q"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is less than zero.</exception>
            <remarks><para>
            <b>Find</b> first calls <see cref="M:Tektosyne.Geometry.Subdivision.FindFace(Tektosyne.Geometry.PointD)"/> to determine the smallest <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> element that contains <paramref name="q"/>, and then checks all its <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> and <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> cycles
            to determine whether <paramref name="q"/> coincides with an incident <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>
            or <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element.
            </para><para>
            <b>Find</b> performs a slow brute-force search. For better performance, create a <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch"/> structure for repeated searches within the same <see
            cref="T:Tektosyne.Geometry.Subdivision"/>, or examine the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> and <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>
            collections directly if you expect <paramref name="q"/> to coincide with one of their
            elements.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FindEdge(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Finds the half-edge in the <see cref="T:Tektosyne.Geometry.Subdivision"/> with the specified origin and
            destination.</summary>
            <param name="origin">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the half-edge.</param>
            <param name="destination">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the half-edge.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the specified <paramref name="origin"/> and
            <paramref name="destination"/>.
            </para><para>-or-</para><para>
            A null reference if no matching <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> was found.
            </para></returns>
            <remarks><para>
            <b>FindEdge</b> first attempts to find the specified <paramref name="origin"/> in the
            <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection, and then calls <see
            cref="M:Tektosyne.Geometry.SubdivisionEdge.GetEdgeTo(Tektosyne.Geometry.PointD)"/> to find the half-edge leading from <paramref
            name="origin"/> to the specified <paramref name="destination"/>.
            </para><para>
            This is an O(ld n + m) operation, where n is the number of <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> and m
            is the number of half-edges originating from <paramref name="origin"/>. All coordinate
            comparisons use the current <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FindFace(Tektosyne.Geometry.PointD)">
            <overloads>
            Finds the indicated face in the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</overloads>
            <summary>
            Finds the smallest face in the <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains the specified
            coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <returns>
            The smallest <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that contains <paramref name="q"/>.</returns>
            <remarks><para>
            <b>FindFace</b> performs a linear search through all bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> for an
            <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> boundary that contains <paramref name="q"/>;
            that is, <see cref="M:Tektosyne.Geometry.SubdivisionEdge.Locate(Tektosyne.Geometry.PointD)"/> does not return <see
            cref="F:Tektosyne.Geometry.PolygonLocation.Outside"/>.
            </para><para>
            <b>FindFace</b> immediately returns the first containing face that has no <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/>. If there are multiple containing faces with one or
            more <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/>, <b>FindFace</b> chooses the one with the
            smallest outer <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CycleArea"/>. If no containing face was found,
            <b>FindFace</b> returns the unbounded face.
            </para><para>
            <b>FindFace</b> has an average runtime of O(n/2) where n is the number of bounded <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/>, unless <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> with <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/>
            are frequent in which case the runtime approaches O(n).</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FindFace(Tektosyne.Geometry.PointD[],System.Boolean)">
            <summary>
            Finds the face in the <see cref="T:Tektosyne.Geometry.Subdivision"/> whose outer boundary equals the
            specified polygon.</summary>
            <param name="polygon">
            An <see cref="T:System.Array"/> whose <see cref="T:Tektosyne.Geometry.PointD"/> elements represent the consecutive
            vertices of the outer boundary.</param>
            <param name="verify">
            <c>true</c> to verify that the outer boundary is fully congruent with <paramref
            name="polygon"/>; <c>false</c> to return a result as soon as any alternative has been
            eliminated. The default is <c>false</c>.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> whose outer boundary equals the specified <paramref
            name="polygon"/>.
            </para><para>-or-</para><para>
            A null reference if no matching <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> was found.
            </para></returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="polygon"/> is a null reference or contains less than three elements.
            </exception>
            <remarks><para>
            <b>FindFace</b> calls <see cref="M:Tektosyne.Geometry.Subdivision.FindEdge(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)"/> on each pair of consecutive <paramref
            name="polygon"/> vertices, and immediately returns a null reference any such pair is not
            connected by a <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>. Otherwise, <b>FindFace</b> examines the
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> pointers of both twin half-edges. If the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> on the same side of the <paramref name="polygon"/> ever
            changes, <b>FindFace</b> eliminates all half-edges on that side.
            </para><para>
            If <paramref name="verify"/> is <c>false</c>, <b>FindFace</b> immediately returns the
            <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> on the remaining side when the other has been eliminated.
            Otherwise, <b>FindFace</b> continues checking the half-edges on the remaining side,
            verifying that they form a cycle around a single <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> which
            also contains its <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/>.
            </para><para>
            The specified <paramref name="polygon"/> may begin with any incident vertex, and the
            sequence of vertices may follow either the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> or the
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> pointers around the incident half-edges.
            </para><para>
            Depending on the <paramref name="verify"/> flag, <b>FindFace</b> has a runtime between
            O(ld n + 2m) and O(ld n + km), where n is the number of <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>, m is the
            number of half-edges originating from each vertex, and k is the number of <paramref
            name="polygon"/> vertices. All coordinate comparisons use the current <see
            cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FindNearestEdge(Tektosyne.Geometry.PointD,System.Double@)">
            <summary>
            Finds the half-edge in the <see cref="T:Tektosyne.Geometry.Subdivision"/> that is nearest to and facing the
            specified coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <param name="distance">
            Returns the distance between <paramref name="q"/> and the returned <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>
            element, if any; otherwise, <see cref="F:System.Double.MaxValue"/>.</param>
            <returns><para>
            The <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> element with the smallest distance to and facing <paramref
            name="q"/>.
            </para><para>-or-</para><para>
            A null reference if the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection is empty.</para></returns>
            <remarks>
            <b>FindNearestEdge</b> first calls <see cref="M:Tektosyne.Geometry.Subdivision.FindFace(Tektosyne.Geometry.PointD)"/> to determine the <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> element that contains <paramref name="q"/>, and then calls <see
            cref="M:Tektosyne.Geometry.SubdivisionFace.FindNearestEdge(Tektosyne.Geometry.PointD,System.Double@)"/> on that face to determine the nearest facing
            half-edge and its <paramref name="distance"/> from <paramref name="q"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FindNearestVertex(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the vertex in the <see cref="T:Tektosyne.Geometry.Subdivision"/> that is nearest to the specified
            coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <returns>
            The zero-based index of <paramref name="q"/> in <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>, if found;
            otherwise, the zero-based index of the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> key with the smallest
            Euclidean distance to <paramref name="q"/>.</returns>
            <remarks>
            <b>FindNearestVertex</b> returns the result of <see cref="M:Tektosyne.Geometry.PointDComparerY.FindNearest(System.Collections.Generic.IList{Tektosyne.Geometry.PointD},Tektosyne.Geometry.PointD)"/>
            for the <see cref="T:Tektosyne.Geometry.PointDComparerY"/> used to sort the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            collection. This is usually an O(ld n) operation, where n in the number of <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FromLines(Tektosyne.Geometry.LineD[],System.Double)">
            <summary>
            Creates a <see cref="T:Tektosyne.Geometry.Subdivision"/> from the specified line segments.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.LineD"/> instances that represent the <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> in the new <see cref="T:Tektosyne.Geometry.Subdivision"/>.</param>
            <param name="epsilon"><para>
            The maximum absolute difference at which coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. The default is zero.</para></param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.Subdivision"/> instance whose <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> are the specified
            <paramref name="lines"/>, and whose <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> are their <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> points.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="lines"/> contains an element whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> point
            equals its <see cref="F:Tektosyne.Geometry.LineD.End"/> point.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lines"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is less than zero.</exception>
            <remarks><para>
            <b>FromLines</b> also determines the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> that are formed by the <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> of the new <see cref="T:Tektosyne.Geometry.Subdivision"/>, and sets its comparison <see
            cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/> to the specified <paramref name="epsilon"/>. The new <see
            cref="T:Tektosyne.Geometry.Subdivision"/> is empty if <paramref name="lines"/> is an empty array.
            </para><note type="caution">
            The specified <paramref name="lines"/> must not intersect or overlap anywhere except in
            their <see cref="F:Tektosyne.Geometry.LineD.Start"/> and <see cref="F:Tektosyne.Geometry.LineD.End"/> points. <b>FromLines</b>
            does not check this condition. If violated, the returned <see cref="T:Tektosyne.Geometry.Subdivision"/> will
            be invalid.</note></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FromPolygons(System.Collections.Generic.IList{Tektosyne.Geometry.PointD[]},System.Double)">
            <summary>
            Creates a <see cref="T:Tektosyne.Geometry.Subdivision"/> from the specified polygons.</summary>
            <param name="polygons">
            An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Tektosyne.Geometry.PointD"/> arrays that represent the outer
            boundaries of all bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> in the new <see cref="T:Tektosyne.Geometry.Subdivision"/>.
            </param>
            <param name="epsilon"><para>
            The maximum absolute difference at which coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. The default is zero.</para></param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.Subdivision"/> instance whose bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> are the
            specified <paramref name="polygons"/>, with the corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> and
            <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="polygons"/> contains an <see cref="T:System.Array"/> that is a null reference or
            contains less than three elements or two consecutive identical elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygons"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is less than zero.</exception>
            <remarks><para>
            <b>FromPolygons</b> sets the comparison <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/> of the new <see
            cref="T:Tektosyne.Geometry.Subdivision"/> to the specified <paramref name="epsilon"/>. The new <see
            cref="T:Tektosyne.Geometry.Subdivision"/> is empty if <paramref name="polygons"/> is an empty collection.
            </para><note type="caution">
            The specified <paramref name="polygons"/> may share common edges and vertices, and may
            be fully contained within one another, but must not otherwise intersect or overlap.
            <b>FromPolygons</b> does not check this condition. If violated, the returned <see
            cref="T:Tektosyne.Geometry.Subdivision"/> will be invalid.</note></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.GetEdgesByOrigin">
            <summary>
            Returns a list of all half-edges in the <see cref="T:Tektosyne.Geometry.Subdivision"/>, lexicographically
            sorted by origin.</summary>
            <returns>
            An <see cref="T:System.Array"/> containing all <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>, but sorted lexicographically
            by their <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> coordinates rather than by <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/>.</returns>
            <remarks>
            <b>GetEdgesByOrigin</b> does not use the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection, but rather
            scans the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection by lexicographically ascending coordinates.
            All half-edges originating from the same vertex are stored in consecutive index
            positions, proceeding clockwise around the vertex.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.GetZeroAreaCycles">
            <summary>
            Returns all half-edge cycles in the <see cref="T:Tektosyne.Geometry.Subdivision"/> that enclose no area.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> from each cycle in
            the <see cref="T:Tektosyne.Geometry.Subdivision"/> that encloses no area.</returns>
            <remarks>
            <b>GetZeroAreaCycles</b> returns all <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> of all
            <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> for which <see cref="P:Tektosyne.Geometry.SubdivisionEdge.IsCycleAreaZero"/> succeeds.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.Intersection(Tektosyne.Geometry.Subdivision,Tektosyne.Geometry.Subdivision,Tektosyne.ValueTuple{System.Int32,System.Int32}[]@)">
            <summary>
            Creates a <see cref="T:Tektosyne.Geometry.Subdivision"/> from the intersection of the two specified
            instances.</summary>
            <param name="division1">
            The first <see cref="T:Tektosyne.Geometry.Subdivision"/> to intersect.</param>
            <param name="division2">
            The second <see cref="T:Tektosyne.Geometry.Subdivision"/> to intersect.</param>
            <param name="faceKeys">
            Returns an <see cref="T:System.Array"/> that maps the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of each
            <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> in the returned <see cref="T:Tektosyne.Geometry.Subdivision"/> to those of the
            containing <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> in <paramref name="division1"/> and <paramref
            name="division2"/>, stored in the <see cref="F:Tektosyne.ValueTuple`2.Item1"/> and <see
            cref="F:Tektosyne.ValueTuple`2.Item2"/> components, respectively.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.Subdivision"/> instances that represents the intersection of <paramref
            name="division1"/> and <paramref name="division2"/>.</returns>
            <exception cref="T:System.ArgumentException"><para>
            Neither <paramref name="division1"/> nor <paramref name="division2"/> is empty, and the
            <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/> of <paramref name="division1"/> is greater than that of <paramref
            name="division2"/>.
            </para><para>-or-</para><para>
            <paramref name="division1"/> or <paramref name="division2"/> is structurally invalid.
            </para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="division1"/> or <paramref name="division2"/> is a null reference.
            </exception>
            <remarks><para>
            <b>Intersection</b> first intersects the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> of <paramref
            name="division1"/> with those of <paramref name="division2"/>, and then creates the
            resulting <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> with consecutive keys that equal their index positions.
            The original <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> that equal or contain the new <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> are
            indicated by <paramref name="faceKeys"/>.
            </para><para>
            <b>Intersection</b> uses the <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/> of <paramref name="division1"/> to
            compare <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> for equality. Therefore, <paramref name="division2"/>
            must use the same or a greater <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/>; otherwise, some of its <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> might not be representable in the created <see cref="T:Tektosyne.Geometry.Subdivision"/>. 
            Moreover, the comparison epsilon used to detect edge intersections is raised to a
            minimum of 1e-10 for better numerical stability.
            </para><para>
            <b>Intersection</b> performs best if either <paramref name="division1"/> or <paramref
            name="division2"/> is empty, and worst if both instances are of equal size. That is
            because the algorithm intersects the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> of <paramref name="division1"/>
            with those of <paramref name="division2"/>, rather than intersecting all <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> of the combined <see cref="T:Tektosyne.Geometry.Subdivision"/> with each other.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.MoveVertex(System.Int32,Tektosyne.Geometry.PointD)">
            <summary>
            Moves the specified vertex to the specified coordinates.</summary>
            <param name="index">
            The zero-based index of the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element to move.</param>
            <param name="vertex">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to store at <paramref name="index"/>.</param>
            <returns>
            <c>true</c> if the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element at <paramref name="index"/> was moved
            to <paramref name="vertex"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than the number of <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.</para></exception>
            <remarks><para>
            <b>MoveVertex</b> first checks whether the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection already
            contains the specified <paramref name="vertex"/>, or whether moving the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of any incident <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to
            <paramref name="vertex"/> would create an intersection with any non-incident half-edge
            on any boundary of any incident <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.
            </para><para>
            If so, <b>MoveVertex</b> returns <c>false</c>. Otherwise, <b>MoveVertex</b> updates the
            <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection and the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of all
            incident <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> and returns <c>true</c>.
            </para><note type="caution">
            On success, the index position of the specified <paramref name="vertex"/> may differ
            from the original <paramref name="index"/>. You must query the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            collection to determine the new index position.</note></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.RemoveEdge(System.Int32)">
            <overloads>
            Removes the specified edge from the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</overloads>
            <summary>
            Removes the specified edge from the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <param name="edgeKey">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> of one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to remove.
            Its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> is removed as well.</param>
            <returns>
            <c>true</c> if <paramref name="edgeKey"/> was found in the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>
            collection and the associated edge was removed; otherwise, <c>false</c>.</returns>
            <remarks><para>
            If the removed <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/>
            bound two different faces, <b>RemoveEdge</b> also removes the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>
            element whose <em>outer</em> boundary contains a removed half-edge. If <em>both</em>
            removed half-edges constitute outer boundaries, <b>RemoveEdge</b> removes the <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> element with the greater <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/>.
            </para><para>
            If the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> or <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>
            of the removed <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> does not terminate any other <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/>, <b>RemoveEdge</b> also removes the corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            element(s).</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.RemoveEdge(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Removes the specified edge from the <see cref="T:Tektosyne.Geometry.Subdivision"/>, and returns information
            on the changed and removed <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>.</summary>
            <param name="edgeKey">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> of one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to remove.
            Its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> is removed as well.</param>
            <param name="changedFace">
            Returns the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that
            was changed by the edge removal, if any; otherwise, -1.</param>
            <param name="removedFace">
            Returns the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that
            was removed along with the edge, if any; otherwise, -1.</param>
            <returns>
            <c>true</c> if <paramref name="edgeKey"/> was found in the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>
            collection and the associated edge was removed; otherwise, <c>false</c>.</returns>
            <remarks>
            Please refer to the basic <see cref="M:Tektosyne.Geometry.Subdivision.RemoveEdge(System.Int32)"/> overload for details.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.RemoveVertex(System.Int32)">
            <summary>
            Removes the specified vertex by joining both incident edges.</summary>
            <param name="index">
            The zero-based index of the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element to remove.</param>
            <returns>
            <c>true</c> if the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element at <paramref name="index"/> and both
            incident <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> were removed; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>
            <paramref name="index"/> is less than zero. 
            </para><para>-or-</para><para>
            <paramref name="index"/> is equal to or greater than the number of <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.</para></exception>
            <remarks><para>
            <b>RemoveVertex</b> first checks whether the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element at the
            specified <paramref name="index"/> contains exactly two incident <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>, or
            whether joining them would disturb vertex chains or create an intersection with any
            non-incident half-edge on any boundary of the incident <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.
            </para><para>
            If so, <b>RemoveVertex</b> returns <c>false</c>. Otherwise, <b>RemoveVertex</b> links
            the twins of the incident <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> into a new half-edge pair, updates the
            <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> and <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collections, and returns <c>true</c>.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.RenumberEdges">
            <summary>
            Renumbers all <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> so that each <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> equals
            the index position of the corresponding element.</summary>
            <returns>
            <c>true</c> if any <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> was changed; otherwise,
            <c>false</c>.</returns>
            <remarks><para>
            Deleting <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> from an existing <see cref="T:Tektosyne.Geometry.Subdivision"/> may leave gaps
            in the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> sequence. <b>RenumberEdges</b> eliminates any
            such gaps, restoring the original equivalence of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> and
            index position in the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection.
            </para><para>
            <b>RenumberEdges</b> does not change the sequence of <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>
            values stored in the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection, only the <see cref="T:System.Int32"/> keys
            and the corresponding <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> properties.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.RenumberFaces">
            <summary>
            Renumbers all <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> so that each <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> equals
            the index position of the corresponding element.</summary>
            <returns>
            <c>true</c> if any <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> was changed; otherwise,
            <c>false</c>.</returns>
            <remarks><para>
            Deleting <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> from an existing <see cref="T:Tektosyne.Geometry.Subdivision"/> may leave gaps
            in the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> sequence of the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection.
            <b>RenumberFaces</b> eliminates any such gaps, restoring the original equivalence of
            <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> and index position.
            </para><para>
            <b>RenumberFaces</b> does not change the sequence of <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>
            values stored in the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection, only the <see cref="T:System.Int32"/> keys
            and the corresponding <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> properties. Note that this does
            invalidate any associated <see cref="T:Tektosyne.Geometry.ISubdivisionMap`1"/> instances.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.SplitEdge(System.Int32)">
            <summary>
            Splits the specified edge in half.</summary>
            <param name="edgeKey">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> of one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to split. Its
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> is split as well.</param>
            <returns>
            On success, one of the two new <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> elements that originate from the new
            <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element; otherwise, a null reference.</returns>
            <remarks><para>
            <b>SplitEdge</b> returns a null reference if the specified <paramref name="edgeKey"/>
            was not found in the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection, or if the new vertex would equal an
            existing <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element, given the current <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/>.
            </para><para>
            Otherwise, <b>SplitEdge</b> creates a new <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element in the center
            of the split <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>, and two new <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> that
            originate from the new vertex. Each is paired with one of the original half-edge twins,
            effectively shortening them to end at the new vertex.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.StructureEquals(Tektosyne.Geometry.Subdivision)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.Subdivision"/> have the same
            structure.</summary>
            <param name="division">
            A <see cref="T:Tektosyne.Geometry.Subdivision"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the structure of <paramref name="division"/> is the same as this
            instance; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>StructureEquals</b> compares the number, order, and internal structure of all <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> objects in the two <see
            cref="T:Tektosyne.Geometry.Subdivision"/> instances to test for structural equality. Individual objects are
            compared using their own <b>StructureEquals</b> methods.
            </para><para>
            <b>StructureEquals</b> is intended for testing the <see cref="M:Tektosyne.Geometry.Subdivision.Clone"/>
            method which replicates <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> keys but not references.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.ToLines">
            <summary>
            Converts all edges in the <see cref="T:Tektosyne.Geometry.Subdivision"/> to line segments.</summary>
            <returns>
            An <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.LineD"/> instances that represent all <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> in the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</returns>
            <remarks><para>
            The <see cref="T:Tektosyne.Geometry.LineD"/> elements of the returned <see cref="T:System.Array"/> are sorted by the
            smaller <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> of the two <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>
            objects that constitute each edge, using the same ordering as the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>
            collection.
            </para><para>
            The returned <see cref="T:System.Array"/> has half as many elements as the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>
            collection since each <see cref="T:Tektosyne.Geometry.LineD"/> comprises two half-edges.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.ToPolygons">
            <summary>
            Converts the outer boundaries of all bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> in the <see
            cref="T:Tektosyne.Geometry.Subdivision"/> to a list of polygons.</summary>
            <returns>
            An <see cref="T:System.Array"/> containing one nested <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.PointD"/>
            instances for each bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> element.</returns>
            <remarks><para>
            Each nested <see cref="T:Tektosyne.Geometry.PointD"/> array within the returned outer <see cref="T:System.Array"/>
            contains the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/> for the <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> of one bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> element.
            </para><para>
            The <see cref="T:Tektosyne.Geometry.PointD"/> arrays are sorted by the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of
            the corresponding <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>, using the same ordering as the <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection but excluding the unbounded face.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.Validate">
            <summary>
            Validates the structure of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <exception cref="T:Tektosyne.AssertionException">
            The structure of the <see cref="T:Tektosyne.Geometry.Subdivision"/> is invalid.</exception>
            <remarks>
            <b>Validate</b> performs a series of <see cref="M:Tektosyne.ThrowHelper.Assert(System.Boolean)"/> calls that verify
            all structural invariants of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</returns>
            <remarks>
            <b>Clone</b> replicates the entire structure of the <see cref="T:Tektosyne.Geometry.Subdivision"/>, creating
            a new <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instance for each
            corresponding instance found in the current structure. The new instances always have the
            same <b>Key</b> as the existing instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.CloneEdges">
            <summary>
            Creates a deep copy of the <see cref="T:Tektosyne.Geometry.Subdivision"/>, except for the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>
            collection.</summary>
            <returns>
            A deep copy of the <see cref="T:Tektosyne.Geometry.Subdivision"/>, except for the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>
            collection.</returns>
            <remarks><para>
            <b>CloneEdges</b> replicates the entire structure of the <see cref="T:Tektosyne.Geometry.Subdivision"/>,
            creating a new <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instance for each corresponding instance
            found in the current structure. The new instances always have the same <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> as the existing instances.
            </para><para>
            Unlike <see cref="M:Tektosyne.Geometry.Subdivision.Clone"/>, the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection and all related
            references are <em>not</em> copied. The returned <see cref="T:Tektosyne.Geometry.Subdivision"/> contains only
            the unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.Connectivity">
            <summary>
            Gets the maximum number of direct neighbors for any <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.
            </summary>
            <value>
            A positive <see cref="T:System.Int32"/> value indicating the maximum number of direct neighbors
            for any given <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</value>
            <remarks><para>
            <b>Connectivity</b> returns the maximum number of half-edges that originate from any
            single <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element.
            </para><para>
            <b>Connectivity</b> scans the entire <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection to determine its
            value on first access, and returns a cached value on subsequent accesses. The scan is
            repeated whenever the structure of the <see cref="T:Tektosyne.Geometry.Subdivision"/> changes.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.NodeCount">
            <summary>
            Gets the total number of <see cref="P:Tektosyne.Geometry.Subdivision.Nodes"/> in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</summary>
            <value>
            The total number of <see cref="P:Tektosyne.Geometry.Subdivision.Nodes"/> in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</value>
            <remarks>
            <b>NodeCount</b> returns the current number of <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.Subdivision.Nodes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all nodes in the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/>.</summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all nodes in the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/>.</value>
            <remarks>
            <b>Nodes</b> returns all <see cref="T:Tektosyne.Geometry.PointD"/> keys in the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            collection, using its current sorting order.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.Contains(Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> contains the specified node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> contains the specified <paramref
            name="node"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Contains</b> returns <c>true</c> exactly if the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection
            contains the specified <paramref name="node"/>. This is an O(ld n) operation, where n is
            the number of <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.GetDistance(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Returns the distance between the two specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes.
            </summary>
            <param name="source">
            The source node in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</param>
            <param name="target">
            The target node in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</param>
            <returns>
            The non-negative distance between <paramref name="source"/> and <paramref
            name="target"/>, measured in world coordinates.</returns>
            <remarks><para>
            <b>GetDistance</b> returns zero if the specified <paramref name="source"/> and <paramref
            name="target"/> are identical, and the Euclidean distance between <paramref
            name="source"/> and <paramref name="target"/> otherwise. This is equivalent to the
            absolute length of the edge that connects the two vertices.
            </para><para>
            <b>GetDistance</b> does not check whether the <see cref="T:Tektosyne.Geometry.Subdivision"/> actually
            contains the specified <paramref name="source"/> and <paramref name="target"/> nodes, or
            whether they are connected by an edge.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.GetNearestNode(Tektosyne.Geometry.PointD)">
            <summary>
            Gets the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node that is nearest to the specified location, in
            world coordinates.</summary>
            <param name="location">
            The <see cref="T:Tektosyne.Geometry.PointD"/> location, in world coordinates, whose nearest <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node to find.</param>
            <returns>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose <see cref="M:Tektosyne.Geometry.Subdivision.GetWorldLocation(Tektosyne.Geometry.PointD)"/> result is
            nearest to the specified <paramref name="location"/>.</returns>
            <remarks>
            <b>GetNearestNode</b> returns the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element whose index is found by
            <see cref="M:Tektosyne.Geometry.Subdivision.FindNearestVertex(Tektosyne.Geometry.PointD)"/> for the specified <paramref name="location"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.GetNeighbors(Tektosyne.Geometry.PointD)">
            <summary>
            Returns all direct neighbors of the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose direct neighbors to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IList`1"/> containing all valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes that are
            directly connected with the specified <paramref name="node"/>. The number of elements is
            at most <see cref="P:Tektosyne.Geometry.Subdivision.Connectivity"/>.</returns>
            <remarks><para>
            <b>GetNeighbors</b> never returns a null reference, but it returns an empty <see
            cref="T:System.Collections.Generic.IList`1"/> if the specified <paramref name="node"/> is not found in the <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collections.
            </para><para>
            Otherwise, <b>GetNeighbors</b> returns the destinations of all half-edges that originate
            from the specified <paramref name="node"/>. This is an O(ld n + m) operation, where n is
            the total number of <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> and m is the number of half-edges originating
            from <paramref name="node"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.GetWorldLocation(Tektosyne.Geometry.PointD)">
            <summary>
            Gets the location of the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, in world coordinates.
            </summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose location to return.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PointD"/> location of the specified <paramref name="node"/>, in world
            coordinates.</returns>
            <remarks>
            <b>GetWorldLocation</b> simply returns the specified <paramref name="node"/>, without
            checking whether it is actually part of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.GetWorldRegion(Tektosyne.Geometry.PointD)">
            <summary>
            Gets the region covered by the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, in world
            coordinates.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose region to return.</param>
            <returns><para>
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> vertices of the polygonal
            region covered by the specified <paramref name="node"/>, in world coordinates.
            </para><para>-or-</para><para>
            A null reference if <paramref name="node"/> does not define a polygonal region.
            </para></returns>
            <remarks>
            <b>GetWorldRegion</b> returns the polygonal region that <see cref="P:Tektosyne.Geometry.Subdivision.VertexRegions"/>
            associates with the specified <paramref name="node"/>, if found; otherwise, a null
            reference.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.CompareEdges(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Compares two specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> objects and returns an indication
            of their sweep line ordering.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to compare.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term><description>
            <paramref name="a"/> is sorted before <paramref name="b"/>.</description>
            </item><item>
            <term>Zero</term><description>
            <paramref name="a"/> and <paramref name="b"/> are equal.</description>
            </item><item>
            <term>Greater than zero</term><description>
            <paramref name="a"/> is sorted after <paramref name="b"/>.</description>
            </item></list></returns>
            <remarks>
            <b>CompareEdges</b> is used by the plane sweep algorithm performed by the <see
            cref="M:Tektosyne.Geometry.Subdivision.FindCycles"/> method.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.CreateAllFromLines(Tektosyne.Geometry.LineD[])">
            <summary>
            Initializes the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>, <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>, and <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            collections from the specified line segments.</summary>
            <param name="lines">
            An <see cref="T:System.Array"/> of <see cref="T:Tektosyne.Geometry.LineD"/> instances that represent the <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> added to the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="lines"/> contains an element whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> point
            equals its <see cref="F:Tektosyne.Geometry.LineD.End"/> point.</exception>
            <remarks>
            <b>CreateAllFromLines</b> requires that the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> and <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collections are empty, and that the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection
            contains only the unbounded face. They will be filled with the data extracted from the
            specified <paramref name="lines"/> when the method returns.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.CreateAllFromPolygons(System.Collections.Generic.IList{Tektosyne.Geometry.PointD[]})">
            <summary>
            Initializes the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>, <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>, and <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            collections from the specified polygons.</summary>
            <param name="polygons">
            An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Tektosyne.Geometry.PointD"/> arrays that represent the outer
            boundaries of all bounded faces added to the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="polygons"/> contains an <see cref="T:System.Array"/> that is a null reference or
            contains less than three elements or two consecutive identical elements.</exception>
            <remarks>
            <b>CreateAllFromPolygons</b> requires that the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> and <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collections are empty, and that the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection
            contains only the unbounded face. They will be filled with the data extracted from the
            specified <paramref name="polygons"/> when the method returns.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.CreateFacesFromCycles(System.Collections.Generic.List{Tektosyne.Geometry.Subdivision.EdgeCycle},System.Collections.Generic.List{Tektosyne.Geometry.Subdivision.EdgeCycle})">
            <summary>
            Initializes the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection from the specified <see
            cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> collections.</summary>
            <param name="innerCycles">
            A <see cref="T:System.Collections.Generic.List`1"/> containing all <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> lists that begin with
            inner cycles, and are therefore directly contained in the unbounded face.</param>
            <param name="outerCycles">
            A <see cref="T:System.Collections.Generic.List`1"/> containing all <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> lists that begin with
            outer cycles, representing bounded faces which contain all subsequent inner cycles
            within the same <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> list.</param>
            <remarks>
            <b>CreateFacesFromCycles</b> requires that the <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> collection contains
            only the unbounded face.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.CreateTwinEdges(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD,Tektosyne.Geometry.SubdivisionEdge@)">
            <summary>
            Finds or creates both twin half-edges between the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates.</summary>
            <param name="start">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the first half-edge, and the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the second half-edge.</param>
            <param name="end">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the second half-edge, and the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the first half-edge.</param>
            <param name="startEdge">
            Returns the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> from <paramref name="start"/> to <paramref
            name="end"/>.</param>
            <returns>
            <c>true</c> if <paramref name="startEdge"/> is a newly created <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/>; <c>false</c> if <paramref name="startEdge"/> is an existing
            <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> element.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="start"/> equals <paramref name="end"/>.</exception>
            <remarks><para>
            <b>CreateTwinEdges</b> adds the specified <paramref name="start"/> and <paramref
            name="end"/> coordinates to the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection if they are not
            already present. Otherwise, the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of a newly created
            half-edge is set to the corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element, which may differ
            from the specified <paramref name="start"/> or <paramref name="end"/> coordinates if the
            current comparison <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/> is positive.
            </para><para>
            <b>CreateTwinEdges</b> does not change the <see cref="T:Tektosyne.Geometry.Subdivision"/> if the <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection already contains twin half-edges between <paramref
            name="start"/> and <paramref name="end"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.FindCycles">
            <summary>
            Finds all inner and outer cycles formed by the half-edges in the <see
            cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <returns><para>
            A <see cref="T:Tektosyne.ValueTuple`2"/> containing the following collections:
            </para><para>
            <see cref="F:Tektosyne.ValueTuple`2.Item1"/> is a <see cref="T:System.Collections.Generic.List`1"/> of <see
            cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> objects representing all unlinked inner cycles which are contained by
            the unbounded face.
            </para><para>
            <see cref="F:Tektosyne.ValueTuple`2.Item2"/> is a <see cref="T:System.Collections.Generic.List`1"/> of <see
            cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> objects representing all outer cycles of bounded faces.
            </para></returns>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.InsertAtEdge(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Inserts the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> into the vertex chain that contains
            another specified instance.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to insert into the same vertex chain that contains
            <paramref name="oldEdge"/>.</param>
            <param name="oldEdge">
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is already linked into the vertex chain around its
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</param>
            <remarks>
            <b>InsertAtEdge</b> requires that <paramref name="edge"/> and <paramref name="oldEdge"/>
            both have the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.InsertAtOrigin(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Inserts the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> into the vertex chain around its
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to insert into the vertex chain around its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</param>
            <remarks>
            <b>InsertAtOrigin</b> also adds the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of <paramref
            name="edge"/> to the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection if not already present.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.IntersectEdges(Tektosyne.Geometry.Subdivision,Tektosyne.Collections.Int32Dictionary{System.Int32},Tektosyne.Collections.Int32Dictionary{System.Int32})">
            <summary>
            Intersects the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> of this instance with those of the specified <see
            cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <param name="division">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> whose <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> to intersect with this instance.
            </param>
            <param name="edgeToFace1">
            An <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> that maps the keys of any existing <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> to the keys of the incident bounded <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> of the
            corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> in some pre-existing <see cref="T:Tektosyne.Geometry.Subdivision"/>.
            </param>
            <param name="edgeToFace2">
            An empty <see cref="T:Tektosyne.Collections.Int32Dictionary`1"/> that will, on return, map the keys of any
            existing and created <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> to the keys of the incident bounded <see
            cref="P:Tektosyne.Geometry.Subdivision.Faces"/> of the corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> in the intersecting <paramref
            name="division"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="division"/> contains invalid <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The current <see cref="T:Tektosyne.Geometry.Subdivision"/> contains invalid <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/>.</exception>
            <remarks><para>
            The <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/> of the specified <paramref name="division"/> cannot be smaller
            than that of the current instance. See <see cref="M:Tektosyne.Geometry.Subdivision.Intersection(Tektosyne.Geometry.Subdivision,Tektosyne.Geometry.Subdivision,Tektosyne.ValueTuple{System.Int32,System.Int32}[]@)"/> for details.
            </para><para>
            <b>IntersectEdges</b> adds new elements to the specified <paramref name="edgeToFace1"/>
            collection if any existing <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> are split by the intersection. All new
            elements will contain the same <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> key as the element that
            refers to the split <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.MoveOriginToEdge(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Moves the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to the vertex chain that contains
            another specified instance.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to move from its current vertex chain to that which
            contains <paramref name="oldEdge"/>.</param>
            <param name="oldEdge">
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is already linked into the vertex chain around its
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</param>
            <returns><para>
            A null reference if <paramref name="edge"/> was successfully moved to the vertex chain
            that contains <paramref name="oldEdge"/>.
            </para><para>-or-</para><para>
            An existing <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> already linked into the vertex chain that
            contains <paramref name="oldEdge"/> whose <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>
            equals that of <paramref name="edge"/>.</para></returns>
            <remarks><para>
            <b>MoveOriginToEdge</b> changes the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the
            specified <paramref name="edge"/>, and also updates all incident links on its old and
            new <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.
            </para><para>
            <b>MoveOriginToEdge</b> deletes <paramref name="edge"/> and its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> from the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> collection if an existing
            element connects its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> and the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of <paramref name="oldEdge"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.RemoveAtOrigin(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Removes the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> from the vertex chain around its
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to remove from the vertex chain around its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</param>
            <remarks>
            <b>RemoveAtOrigin</b> also removes the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the
            specified <paramref name="edge"/> from the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection if there
            are no other incident half-edges, and otherwise changes the incident half-edge in the
            <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection if it equals <paramref name="edge"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.SplitEdgeAtVertex(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.PointD,System.Int32)">
            <summary>
            Splits the specified edge in two parts around the specified vertex.</summary>
            <param name="edge">
            One <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to split. Its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> is
            split as well.</param>
            <param name="vertex">
            The vertex around which to split <paramref name="edge"/>.</param>
            <param name="index">
            The zero-based index of <paramref name="vertex"/> in the <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>
            collection, or a negative value to add <paramref name="vertex"/> to the collection.
            </param>
            <returns>
            One of the two new <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> elements that originate from <paramref
            name="vertex"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.TrySplitEdge(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.PointD)">
            <summary>
            Attempts to split the specified edge in two parts around the specified vertex.</summary>
            <param name="edge">
            One <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to split. Its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> is
            split as well.</param>
            <param name="vertex">
            The vertex around which to split <paramref name="edge"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.SplitEdgeResult"/> instance containing the result of the operation.
            </returns>
            <remarks>
            <b>TrySplitEdge</b> adds the specified <paramref name="vertex"/> to the <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> collection if not already present.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.Subdivision.EdgeCycle">
            <summary>
            Represents a cycle of half-edges that represents a <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.
            </summary>
            <remarks>
            There is one <b>EdgeCycle</b> for each chain of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/>
            references that forms the inner or outer boundary of a single <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>. Multiple <b>EdgeCycle</b> instances may also be linked to
            indicate one or more "holes" within the same outer boundary.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.EdgeCycle.#ctor(Tektosyne.Geometry.SubdivisionEdge)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> class with the specified
            incident half-edge.</summary>
            <param name="edge">
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is part of the <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision.EdgeCycle.FirstEdge">
            <summary>
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is part of the <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/>.
            </summary>
            <remarks>
            Follow the chain of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> references starting with
            <b>FirstEdge</b> to visit the other half-edges in the <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Geometry.Subdivision.EdgeCycle.Next">
            <summary>
            Another <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> that is an inner cycle, and either contained within
            or neighboring the current instance.</summary>
            <remarks><para>
            <b>Next</b> is either a null reference or an inner cycle. If the current instance is
            an outer cycle, <b>Next</b> is a "hole" contained within that outer cycle.
            </para><para>
            Otherwise, the current instance and <b>Next</b> are both neighboring "holes", either
            within the same outer cycle that begins the chain of <b>Next</b> references, or else
            within the unbounded face.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Subdivision.EdgeCycle.AddToFace(Tektosyne.Geometry.SubdivisionFace,System.Boolean)">
            <summary>
            Adds the data of the <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> to the specified <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <param name="face">
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that receives the data of the <see
            cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/>.</param>
            <param name="isOuter">
            <c>true</c> if the <see cref="T:Tektosyne.Geometry.Subdivision.EdgeCycle"/> represents an outer boundary;
            <c>false</c> if it represents an inner boundary.</param>
            <remarks>
            <b>AddToFace</b> updates the half-edge pointer of the specified <paramref
            name="face"/> that is indicated by <paramref name="isOuter"/>, and the face pointers
            of all half-edges in the chain that starts with <see cref="F:Tektosyne.Geometry.Subdivision.EdgeCycle.FirstEdge"/>.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionEdge">
            <summary>
            Represents a half-edge in a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <remarks><para>
            <b>SubdivisionEdge</b> does not represent a complete edge in a <see cref="T:Tektosyne.Geometry.Subdivision"/> but
            rather a half-edge. Any given <b>SubdivisionEdge</b> holds one end point of an edge, and a
            pointer to its twin half-edge which holds the other end point.
            </para><para>
            Every <b>SubdivisionEdge</b> is part of a cycle of half-edges that is connected by the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> and <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> pointers. Assuming
            y-coordinates increase upward, a clockwise cycle forms the inner boundary of the incident
            <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>, and a counter-clockwise cycle forms its outer boundary. A
            <b>SubdivisionEdge</b> may form a cycle with its own twin half-edge; such a zero-area cycle
            always forms an inner boundary.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.#ctor(System.Int32)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> class with the specified
            unique key.</summary>
            <param name="key">
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> within its containing <see
            cref="T:Tektosyne.Geometry.Subdivision"/>.</param>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.#ctor(System.Int32,Tektosyne.Geometry.PointD,Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionFace,Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> class with the specified
            unique key, origin, incident face, twin, next and previous half-edge.</summary>
            <param name="key">
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> within its containing <see
            cref="T:Tektosyne.Geometry.Subdivision"/>.</param>
            <param name="origin">
            The coordinates where the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> begins.</param>
            <param name="twin">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is the twin of the current instance.</param>
            <param name="face">
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that is bounded by the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.
            </param>
            <param name="next">
            The next <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that bounds the same <paramref name="face"/>.
            </param>
            <param name="previous">
            The previous <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that bounds the same <paramref name="face"/>.
            </param>
            <remarks>
            This constructor is intended for unit testing.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionEdge._key">
            <summary>
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionEdge._origin">
            <summary>
            The coordinates where the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> begins.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionEdge._face">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that is bounded by the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionEdge._next">
            <summary>
            The next <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that bounds the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionEdge._previous">
            <summary>
            The previous <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that bounds the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionEdge._twin">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is the twin of the current instance.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.Key">
            <summary>
            Gets the unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
            <value>
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> within its containing <see
            cref="T:Tektosyne.Geometry.Subdivision"/>.</value>
            <remarks><para>
            <b>Key</b> begins at zero for the first <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instance in a <see
            cref="T:Tektosyne.Geometry.Subdivision"/>, and is incremented by one whenever an additional instance is
            created. The <b>Key</b> values of all <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances thus
            reflect the order in which they were created.
            </para><para>
            <b>Key</b> is usually immutable, unless <see cref="M:Tektosyne.Geometry.Subdivision.RenumberEdges"/> is
            called on the containing <see cref="T:Tektosyne.Geometry.Subdivision"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.Origin">
            <summary>
            Gets the coordinates where the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> begins.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the origin of the half-edge represented by the
            <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</value>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.Destination">
            <summary>
            Gets the coordinates where the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> ends.</summary>
            <value>
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.
            </value>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.Face">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that is bounded by the <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that lies to the left of the half-edge represented by
            the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>, viewed from its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> and assuming
            that y-coordinates increase upward.</value>
            <remarks>
            <b>Face</b> defaults to a null reference while a <see cref="T:Tektosyne.Geometry.Subdivision"/> is being
            created, but never returns a null reference after construction is finished.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.Next">
            <summary>
            Gets the next <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that bounds the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.
            </summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that begins at the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the
            current instance and bounds the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.</value>
            <remarks><para>
            <b>Next</b> returns the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of the current instance if no other <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> begins at its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>.
            </para><para>
            If there are multiple eligible <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances, <b>Next</b>
            returns the nearest in clockwise direction, assuming that y-coordinates increase upward.
            </para><para>
            <b>Next</b> defaults to a null reference while a <see cref="T:Tektosyne.Geometry.Subdivision"/> is being
            created, but never returns a null reference after construction is finished.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.Previous">
            <summary>
            Gets the previous <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that bounds the same <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that ends at the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the current
            instance and bounds the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.</value>
            <remarks><para>
            <b>Previous</b> returns the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of the current instance if no other <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> ends at its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.
            </para><para>
            If there are multiple eligible <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances, <b>Previous</b>
            returns the nearest in counter-clockwise direction, assuming that y-coordinates increase
            upward.
            </para><para>
            <b>Previous</b> defaults to a null reference while a <see cref="T:Tektosyne.Geometry.Subdivision"/> is being
            created, but never returns a null reference after construction is finished.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.Twin">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is the twin of the current instance.
            </summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that begins at the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> and ends
            at the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the current instance.</value>
            <remarks><para>
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and its <b>Twin</b> combine to form one edge in a <see
            cref="T:Tektosyne.Geometry.Subdivision"/>, corresponding to a single <see cref="T:Tektosyne.Geometry.LineD"/> instance.
            </para><para>
            <b>Twin</b> defaults to a null reference while a <see cref="T:Tektosyne.Geometry.Subdivision"/> is being
            created, but never returns a null reference after construction is finished.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.CycleArea">
            <summary>
            Gets the area within the boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> which contains the
            <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
            <value>
            The area of the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/>, with a sign that indicates the orientation
            of its vertices.</value>
            <remarks><para>
            The absolute value of <b>CycleArea</b> equals the area of the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/>. The sign indicates the orientation of its vertices, as follows:
            </para><list type="table"><listheader>
            <term>Value</term><description>Relationship</description>
            </listheader><item>
            <term>Less than zero</term><description>
            The vertices are ordered clockwise, assuming y-coordinates increase upward. The <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/> forms an inner boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.
            </description></item><item>
            <term>Zero</term><description>
            All vertices are collinear, or otherwise enclose no area. The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/>
            forms an inner boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.
            </description></item><item>
            <term>Greater than zero</term><description>
            The vertices are ordered counter-clockwise, assuming y-coordinates increase upward. The
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/> forms the outer boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.
            </description></item></list></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.CycleCentroid">
            <summary>
            Gets the centroid of the boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> which contains the
            <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
            <value>
            The centroid (center of gravity) of the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/>.</value>
            <remarks>
            <b>CycleCentroid</b> is undefined if the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CycleArea"/> is zero.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.CycleEdges">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all half-edges on the
            boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.</summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains each <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on the boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.</value>
            <remarks>
            <b>CycleEdges</b> begins with the current <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and follows the
            chain of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> pointers until the cycle is complete, yielding each
            encountered <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> in turn.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon">
            <summary>
            Gets a polygon that represents the boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> which
            contains the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
            <value>
            An <see cref="T:System.Array"/> containing the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> coordinates of all half-edges
            in the cycle that begins with this <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and continues along the
            chain of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> pointers.</value>
            <remarks>
            <b>CyclePolygon</b> represents the outer boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> if
            its vertices contain a positive area and are ordered counter-clockwise, assuming
            y-coordinates increase upward. Otherwise, <b>CyclePolygon</b> represents one of the
            inner boundaries of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.IsCycleAreaZero">
            <summary>
            Gets a value indicating whether the boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> which
            contains the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> encloses no area.</summary>
            <value>
            <c>true</c> if the vertices of the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/> enclose no area;
            otherwise, <c>false</c>.</value>
            <remarks><para>
            <b>IsCycleAreaZero</b> returns <c>true</c> exactly if the twins of all half-edges in the
            current cycle bound the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> as the current instance. This implies a
            half-edge cycle that comprises only complete <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> pairs. Such a cycle
            cannot enclose any area, as that would require some twins bounding a different <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>.
            </para><para>
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CycleArea"/> should equal zero if <b>IsCycleAreaZero</b> returns <c>true</c>,
            but this may not be the case due to floating-point inaccuracies. <b>IsCycleAreaZero</b>
            is both faster and more precise than <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CycleArea"/> if the actual area is not
            required.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionEdge.OriginEdges">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all half-edges with the
            same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains each <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</value>
            <remarks>
            <b>OriginEdges</b> begins with the current <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and follows the
            chain of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> and <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> pointers until the sequence is
            complete, yielding each encountered <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> in turn.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.GetEdgeTo(Tektosyne.Geometry.PointD)">
            <summary>
            Returns the half-edge with the same origin and the specified destination.</summary>
            <summary>
            Returns the half-edge with the same origin and the specified destination, using exact
            coordinate comparisons.</summary>
            <param name="destination">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the half-edge.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> as the current
            instance, and with the specified <paramref name="destination"/>.
            </para><para>-or-</para><para>
            A null reference if no matching <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> was found.
            </para></returns>
            <remarks>
            <b>GetEdgeTo</b> is an O(m) operation, where m is the number of half-edges originating
            from the current <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.GetEdgeTo(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Returns the half-edge with the same origin and the specified destination, given the
            specified epsilon for coordinate comparisons.</summary>
            <param name="destination">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the half-edge.</param>
            <param name="epsilon">
            The maximum absolute difference at which coordinates should be considered equal.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> with the same <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> as the current
            instance, and with the specified <paramref name="destination"/>.
            </para><para>-or-</para><para>
            A null reference if no matching <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> was found.
            </para></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is less than zero.</exception>
            <remarks>
            <b>GetEdgeTo</b> is identical with the basic <see cref="M:Tektosyne.Geometry.SubdivisionEdge.GetEdgeTo(Tektosyne.Geometry.PointD)"/> overload
            but uses the specified <paramref name="epsilon"/> to compare the specified <paramref
            name="destination"/> against existing <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> returns the value of the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> property, which is
            guaranteed to be unique within the containing <see cref="T:Tektosyne.Geometry.Subdivision"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.Locate(Tektosyne.Geometry.PointD)">
            <overloads>
            Finds the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> relative to the boundary of the
            incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> which contains the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.
            </overloads>
            <summary>
            Finds the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> relative to the boundary of the
            incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> that contains the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>, using exact
            coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PolygonLocation"/> value that indicates the location of <paramref
            name="q"/> relative to the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/>.</returns>
            <remarks>
            <b>Locate</b> performs a ray crossings algorithm with an asymptotic runtime of O(n).
            This is equivalent to <see cref="M:Tektosyne.Geometry.GeoAlgorithms.PointInPolygon(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD[])"/> operating on the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> coordinates of all half-edges in the cycle that begins with this <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and continues along the chain of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> pointers.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.Locate(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Finds the location of the specified <see cref="T:Tektosyne.Geometry.PointD"/> relative to the boundary of the
            incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> which contains the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>, given the
            specified epsilon for coordinate comparisons.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <param name="epsilon">
            The maximum absolute difference at which two coordinates should be considered equal.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PolygonLocation"/> value that indicates the location of <paramref
            name="q"/> relative to the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is equal to or less than zero.</exception>
            <remarks>
            <b>Locate</b> is identical with the basic <see cref="M:Tektosyne.Geometry.SubdivisionEdge.Locate(Tektosyne.Geometry.PointD)"/> overload but
            calls <see cref="M:Tektosyne.MathUtility.Compare(System.Double,System.Double,System.Double)"/> with the specified <paramref name="epsilon"/> to
            determine whether <paramref name="q"/> coincides with any edge or vertex of the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.CyclePolygon"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.ToLine">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to a <see cref="T:Tektosyne.Geometry.LineD"/> with the same
            direction.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineD"/> whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> point equals the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> and whose <see cref="F:Tektosyne.Geometry.LineD.End"/> point equals the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.ToLineReverse">
            <summary>
            Converts the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to a <see cref="T:Tektosyne.Geometry.LineD"/> with the opposite
            direction.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.LineD"/> whose <see cref="F:Tektosyne.Geometry.LineD.Start"/> point equals the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> and whose <see cref="F:Tektosyne.Geometry.LineD.End"/> point equals the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> of the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> and <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> properties, as well as the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/>
            values of the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/>, <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/>, <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/>, and <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> properties. The value -1 is substituted for any properties that are
            null references.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.FindEdgePosition(Tektosyne.Geometry.PointD,Tektosyne.Geometry.SubdivisionEdge@,Tektosyne.Geometry.SubdivisionEdge@)">
            <summary>
            Finds the position of a half-edge to the specified <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> within the
            vertex chain around <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</summary>
            <param name="destination">
            The <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> of the half-edge whose position to find.</param>
            <param name="nextEdge">
            Returns the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that is <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> from the <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of a half-edge to <paramref name="destination"/> within the vertex chain
            around <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</param>
            <param name="previousEdge">
            Returns the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> whose <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> is <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> from a half-edge to <paramref name="destination"/> within the vertex
            chain around <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</param>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.GetOtherCycleEdge(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Returns a half-edge on the same boundary of the incident <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> that differs
            from the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/>.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to avoid.</param>
            <returns><list type="table"><listheader>
            <term>Return Value</term><description>Condition</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/></term>
            <description><para>
            This instance equals <paramref name="edge"/>, and <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> does not equal <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of <paramref name="edge"/>.
            </para><para>-or-</para><para>
            This instance equals <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of <paramref name="edge"/>, and <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> does not equal <paramref name="edge"/>.</para></description>
            </item><item>
            <term><see cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/></term>
            <description><para>
            This instance equals <paramref name="edge"/>, and <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> equals <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of <paramref name="edge"/> but <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> does not.
            </para><para>-or-</para><para>
            This instance equals <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of <paramref name="edge"/>, and <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> equals <paramref name="edge"/> but <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> does not.
            </para></description>
            </item><item>
            <term>A null reference</term>
            <description><para>
            This instance equals <paramref name="edge"/>, and <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> and <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> both equal <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of <paramref name="edge"/>.
            </para><para>-or-</para><para>
            This instance equals <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of <paramref name="edge"/>, and <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> and <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Previous"/> both equal <paramref name="edge"/>.
            </para></description>
            </item><item>
            <term>This instance</term><description>
            This instance equals neither <paramref name="edge"/> nor its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/>.
            </description></item></list></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edge"/> is a null reference.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.IsCompatibleDestination(Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether the specified <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/> is compatible with the vertex
            chain around <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</summary>
            <param name="destination">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the new <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>.</param>
            <returns>
            <c>true</c> if <paramref name="destination"/> is compatible with the vertex chain around
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>IsCompatibleDestination</b> always returns <c>true</c> if the <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> is the only incident half-edge at its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>, or
            if the specified <paramref name="destination"/> equals the current <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>.
            </para><para>
            Otherwise, <b>IsCompatibleDestination</b> returns <c>true</c> exactly if rotating the
            <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to <paramref name="destination"/>, in the direction that
            minimizes angular distance, would not traverse any neighboring edge in the vertex chain
            around <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.SetAllFaces(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Sets the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> property of this <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and all other
            half-edges in the same cycle to the specified value.</summary>
            <param name="face">
            The new value for the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> property of each <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.
            </param>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instance and a specified object,
            which must be a <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instance
            and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>
            instance, or an instance of a derived class, <b>Equals</b> invokes the strongly-typed
            <see cref="M:Tektosyne.Geometry.SubdivisionEdge.Equals(Tektosyne.Geometry.SubdivisionEdge)"/> overload to test the two instances for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.Equals(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> have the
            same value.</summary>
            <param name="edge">
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="edge"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>Equals</b> compares the values all properties of the two <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances to test for value equality. Properties of type <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> are compared using <see
            cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            </para><para>
            <b>Equals</b> is intended for unit testing, as any two <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>
            instances created during normal operation are never equal.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.Equals(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.SubdivisionEdge.Equals(Tektosyne.Geometry.SubdivisionEdge)"/> overload to
            test the two <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionEdge.StructureEquals(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> have the
            same structure.</summary>
            <param name="edge">
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the structure of <paramref name="edge"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>StructureEquals</b> compares the values all properties of the two <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> instances to test for structural equality. Properties of type
            <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> are compared by their
            <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> values.
            </para><para>
            <b>StructureEquals</b> is intended for testing the <see cref="M:Tektosyne.Geometry.Subdivision.Clone"/> 
            method which replicate <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> and <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>
            keys but not references.</para></remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionElement">
            <summary>
            Represents one element of a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <remarks>
            <b>SubdivisionElement</b> is an immutable structure that contains either an <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/>, <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>, or <see
            cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> element of a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>. A <see
            cref="T:Tektosyne.Geometry.SubdivisionElementType"/> value indicates which element type is present.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.#ctor(Tektosyne.Geometry.PointD)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> structure.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> structure with the
            specified <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex.</summary>
            <param name="vertex">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </param>
            <remarks>
            <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> is set to <see cref="F:Tektosyne.Geometry.SubdivisionElementType.Vertex"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.#ctor(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> structure with the
            specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </param>
            <remarks>
            <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> is set to <see cref="F:Tektosyne.Geometry.SubdivisionElementType.Edge"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.#ctor(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> structure with the
            specified <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <param name="face">
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </param>
            <remarks>
            <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> is set to <see cref="F:Tektosyne.Geometry.SubdivisionElementType.Face"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> structure with
            serialized data.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object providing serialized object data for the <see
            cref="T:Tektosyne.Geometry.SubdivisionElement"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="T:System.Runtime.Serialization.ISerializable"/> for details.
            </para><para>
            The values of the <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> property and either the <see cref="P:Tektosyne.Geometry.SubdivisionElement.Edge"/>,
            <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/>, or <see cref="P:Tektosyne.Geometry.SubdivisionElement.Vertex"/> property are deserialized from two fields,
            named "Type" and "Value".</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionElement.NullFace">
            <summary>
            A <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> whose <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> equals <see
            cref="F:Tektosyne.Geometry.SubdivisionElementType.Face"/> and whose <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/> is a null reference.
            </summary>
            <remarks>
            By convention, <b>NullFace</b> represents the unbounded face of a planar <see
            cref="T:Tektosyne.Geometry.Subdivision"/>. Use <see cref="P:Tektosyne.Geometry.SubdivisionElement.IsUnboundedFace"/> to test for this condition, as
            well as for the actual unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionElement.ElementType">
            <summary>
            A <see cref="T:Tektosyne.Geometry.SubdivisionElementType"/> value indicating the type of the <see
            cref="T:Tektosyne.Geometry.SubdivisionElement"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionElement.Edge">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </value>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> does not equal <see cref="F:Tektosyne.Geometry.SubdivisionElementType.Edge"/>.
            </exception>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionElement.Face">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </value>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> does not equal <see cref="F:Tektosyne.Geometry.SubdivisionElementType.Face"/>.
            </exception>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionElement.Vertex">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex stored in the <see
            cref="T:Tektosyne.Geometry.SubdivisionElement"/>.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex stored in the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </value>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> does not equal <see cref="F:Tektosyne.Geometry.SubdivisionElementType.Vertex"/>.
            </exception>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> returns the result of <see cref="M:System.Object.GetHashCode"/> for either the
            <see cref="P:Tektosyne.Geometry.SubdivisionElement.Edge"/>, <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/>, or <see cref="P:Tektosyne.Geometry.SubdivisionElement.Vertex"/> property, depending on
            the <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionElement.IsUnboundedFace">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> represents an
            unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <value>
            <c>true</c> if <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> equals <see
            cref="F:Tektosyne.Geometry.SubdivisionElementType.Face"/>, and <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/> is either a null reference
            or has a <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of zero; otherwise, <c>false</c>.</value>
            <remarks>
            By convention, <see cref="F:Tektosyne.Geometry.SubdivisionElement.NullFace"/> represents the unbounded face of a planar <see
            cref="T:Tektosyne.Geometry.Subdivision"/>. The actual unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> always has a
            <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> of zero. <b>IsUnboundedFace</b> tests for both
            possibilities.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the value of the <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> property, 
            followed by the value of either the <see cref="P:Tektosyne.Geometry.SubdivisionElement.Edge"/>, <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/>, or <see
            cref="P:Tektosyne.Geometry.SubdivisionElement.Vertex"/> property.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.op_Equality(Tektosyne.Geometry.SubdivisionElement,Tektosyne.Geometry.SubdivisionElement)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances have the same value.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SubdivisionElement.Equals(Tektosyne.Geometry.SubdivisionElement)"/> method to test the
            two <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.op_Inequality(Tektosyne.Geometry.SubdivisionElement,Tektosyne.Geometry.SubdivisionElement)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances have different values.
            </summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is different from the value of
            <paramref name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.SubdivisionElement.Equals(Tektosyne.Geometry.SubdivisionElement)"/> method to test the
            two <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instance and a specified
            object, which must be a <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>
            instance and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>
            instance, <b>Equals</b> invokes the strongly-typed <see
            cref="M:Tektosyne.Geometry.SubdivisionElement.Equals(Tektosyne.Geometry.SubdivisionElement)"/> overload to test the two instances for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.Equals(Tektosyne.Geometry.SubdivisionElement)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> have
            the same value.</summary>
            <param name="element">
            A <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="element"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> is not a valid <see cref="T:Tektosyne.Geometry.SubdivisionElementType"/> value.
            </exception>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> property and either
            the <see cref="P:Tektosyne.Geometry.SubdivisionElement.Edge"/>, <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/>, or <see cref="P:Tektosyne.Geometry.SubdivisionElement.Vertex"/> property of the two
            <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.Equals(Tektosyne.Geometry.SubdivisionElement,Tektosyne.Geometry.SubdivisionElement)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances have the
            same value.</summary>
            <param name="a">
            The first <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> to compare.</param>
            <param name="b">
            The second <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="a"/> is the same as the value of <paramref
            name="b"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.SubdivisionElement.Equals(Tektosyne.Geometry.SubdivisionElement)"/> overload
            to test the two <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the data needed to serialize the
            <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that receives the serialized object data of
            the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for details.
            </para><para>
            The values of the <see cref="F:Tektosyne.Geometry.SubdivisionElement.ElementType"/> property and either the <see cref="P:Tektosyne.Geometry.SubdivisionElement.Edge"/>,
            <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/>, or <see cref="P:Tektosyne.Geometry.SubdivisionElement.Vertex"/> property are serialized to two fields, named
            "Type" and "Value".</para></remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionElementType">
            <summary>
            Specifies the type of a <see cref="T:Tektosyne.Geometry.SubdivisionElement"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionElementType.Edge">
            <summary>
            Specifies an <see cref="P:Tektosyne.Geometry.SubdivisionElement.Edge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionElementType.Face">
            <summary>
            Specifies a <see cref="P:Tektosyne.Geometry.SubdivisionElement.Face"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionElementType.Vertex">
            <summary>
            Specifies a <see cref="P:Tektosyne.Geometry.SubdivisionElement.Vertex"/>.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionFace">
            <summary>
            Represents a face in a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <remarks><para>
            <b>SubdivisionFace</b> represents any polygonal region that is bounded by the edges of a
            <see cref="T:Tektosyne.Geometry.Subdivision"/>, whether on the inside, on the outside, or both. There is always
            exactly one face without an outer boundary, called the unbounded face, which comprises the
            entire plane outside of the <see cref="T:Tektosyne.Geometry.Subdivision"/>.
            </para><para>
            A <b>SubdivisionFace</b> stores one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> for each of its outer and
            inner boundaries. The corresponding polygonal region can be reconstructed from the cycle of
            half-edges that begins with an incident <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> or <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> element. Use the <b>Cycle…</b> properties of these
            half-edges to obtain face boundaries and related data.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.#ctor(Tektosyne.Geometry.Subdivision,System.Int32)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> class with the specified
            containing <see cref="T:Tektosyne.Geometry.Subdivision"/> and unique key.</summary>
            <param name="owner">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</param>
            <param name="key">
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> within its <paramref name="owner"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner"/> is a null reference.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.#ctor(Tektosyne.Geometry.Subdivision,System.Int32,Tektosyne.Geometry.SubdivisionEdge,System.Collections.Generic.IEnumerable{Tektosyne.Geometry.SubdivisionEdge})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> class with the specified
            containing <see cref="T:Tektosyne.Geometry.Subdivision"/>, unique key, and outer and inner boundaries.
            </summary>
            <param name="owner">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</param>
            <param name="key">
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> within its <paramref name="owner"/>.
            </param>
            <param name="outerEdge">
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on the outer boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>. This argument may be a null reference.</param>
            <param name="innerEdges">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection containing one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>
            on each inner boundary of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>. This argument may be a null
            reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner"/> is a null reference.</exception>
            <remarks>
            This constructor is intended for unit testing.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionFace._key">
            <summary>
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionFace._outerEdge">
            <summary>
            A <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on the outer boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionFace._innerEdges">
            <summary>
            A list containing one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on each inner boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <remarks>
            This field default to a null reference to save memory in the frequent case that the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> contains no inner boundaries.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionFace.Key">
            <summary>
            Gets the unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <value>
            The unique key of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> within its <see cref="F:Tektosyne.Geometry.SubdivisionFace.Owner"/>.
            </value>
            <remarks><para>
            <b>Key</b> begins at zero for the first <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instance in a <see
            cref="T:Tektosyne.Geometry.Subdivision"/>, and is incremented by one whenever an additional instance is
            created. The <b>Key</b> values of all <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instances thus
            reflect the order in which they were created.
            </para><para>
            <b>Key</b> is usually immutable, unless <see cref="M:Tektosyne.Geometry.Subdivision.RenumberFaces"/> is
            called on the containing <see cref="T:Tektosyne.Geometry.Subdivision"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionFace.Owner">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionFace.AllCycleEdges">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all half-edges on all
            boundaries of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains each <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on all boundaries of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</value>
            <remarks>
            <b>AllCycleEdges</b> begins with the <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/>, if any, and follows the
            chain of <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Next"/> pointers until the cycle is complete,
            yielding each encountered <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> in turn. <b>AllCycleEdges</b>
            then repeats this process for each <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> element.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge">
            <summary>
            Gets a <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on the outer boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <value><para>
            An inward-facing <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on the outer boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.
            </para><para>-or-</para><para>
            A null reference if the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> has no outer boundary. The default
            is a null reference.</para></value>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges">
            <summary>
            Gets a read-only list containing one <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on each inner
            boundary of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.ListEx`1"/> containing one outward-facing <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on each disconnected inner boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</value>
            <remarks>
            <b>InnerEdges</b> returns an empty collection if the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>
            contains no inner boundaries, or "holes".</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.FindNearestEdge(Tektosyne.Geometry.PointD,System.Double@)">
            <summary>
            Finds the half-edge bounding the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that is nearest to and
            facing the specified coordinates.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to locate.</param>
            <param name="distance">
            Returns the distance between <paramref name="q"/> and the returned <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/>, if any; otherwise, <see cref="F:System.Double.MaxValue"/>.</param>
            <returns><para>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> on any outer or inner boundaries of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> with the smallest distance to and facing <paramref name="q"/>.
            </para><para>-or-</para><para>
            A null reference if the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> is completely unbounded.
            </para></returns>
            <remarks><para>
            <b>FindNearestEdge</b> traverses the <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> boundary and all <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> boundaries, computing the distance from <paramref name="q"/> to each
            <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>. This is an O(n) operation where n is the number of
            half-edges incident on the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.
            </para><para>
            If <paramref name="q"/> is nearest to an edge that belongs to a zero-area protrusion
            into the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>, <b>FindNearestEdge</b> returns the twin
            half-edge that faces <paramref name="q"/>, according to its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> orientation.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> returns the value of the <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> property, which is
            guaranteed to be unique within the containing <see cref="T:Tektosyne.Geometry.Subdivision"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representation of the
            <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> property, followed by the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> values of
            the <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> and <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> properties. The value -1 is
            substituted for any properties or elements that are null references.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.AddInnerEdge(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Adds the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to the <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/>
            collection.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to add.</param>
            <remarks>
            <b>AddInnerEdge</b> first creates a new collection that backs the <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> property, if necessary.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.AddInnerEdges(Tektosyne.Collections.ListEx{Tektosyne.Geometry.SubdivisionEdge})">
            <summary>
            Adds the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> collection to the <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> collection.</summary>
            <param name="edges">
            A <see cref="T:Tektosyne.Collections.ListEx`1"/> containing the <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> elements to add.
            </param>
            <remarks>
            <b>AddInnerEdge</b> first creates a new collection that backs the <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> property, if necessary.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.MoveEdge(Tektosyne.Geometry.SubdivisionEdge)">
            <overloads>
            Moves the incident half-edge on one of the boundaries of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</overloads>
            <summary>
            Moves the incident half-edge on one of the boundaries of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> away from the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.
            </summary>
            <param name="oldEdge">
            The incident <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to replace with another half-edge on the same
            boundary of the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.MoveEdgeResult"/> value indicating which <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>
            properties were changed, if any.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="oldEdge"/> is a null reference.</exception>
            <remarks><para>
            If <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> equals the specified <paramref name="oldEdge"/> or its twin,
            <b>MoveEdge</b> sets <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> to the result of <see
            cref="M:Tektosyne.Geometry.SubdivisionEdge.GetOtherCycleEdge(Tektosyne.Geometry.SubdivisionEdge)"/> for the specified <paramref name="oldEdge"/>.
            </para><para>
            Otherwise, <b>MoveEdge</b> searches for an <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> element that equals
            <paramref name="oldEdge"/> or its twin. On success, <b>MoveEdge</b> removes that element
            if the cycle contains no other half-edges; otherwise, <b>MoveEdge</b> sets that element
            to the result of <see cref="M:Tektosyne.Geometry.SubdivisionEdge.GetOtherCycleEdge(Tektosyne.Geometry.SubdivisionEdge)"/> for <paramref
            name="oldEdge"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.MoveEdge(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Moves the incident half-edge on one of the boundaries of the <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> from the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to another
            specified instance.</summary>
            <param name="oldEdge">
            The incident <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to replace with <paramref name="newEdge"/>.
            </param>
            <param name="newEdge">
            The incident <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that replaces <paramref name="oldEdge"/>.
            </param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.MoveEdgeResult"/> value indicating which <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>
            properties were changed, if any.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="oldEdge"/> or <paramref name="newEdge"/> is a null reference.
            </exception>
            <remarks><para>
            If <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> equals the specified <paramref name="oldEdge"/>,
            <b>MoveEdge</b> sets that property to the specified <paramref name="newEdge"/>.
            Otherwise, <b>MoveEdge</b> sets the first <see cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> element that equals
            <paramref name="oldEdge"/> to <paramref name="newEdge"/>, if any.
            </para><para>
            Unlike the other <see cref="M:Tektosyne.Geometry.SubdivisionFace.MoveEdge(Tektosyne.Geometry.SubdivisionEdge)"/> overload, this overload does
            not check the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Twin"/> of <paramref name="oldEdge"/>, nor
            remove single-edge cycles.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.SetAllEdgeFaces(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Sets the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> property of each <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> in the <see cref="P:Tektosyne.Geometry.SubdivisionFace.OuterEdge"/> cycle and all <see
            cref="P:Tektosyne.Geometry.SubdivisionFace.InnerEdges"/> cycles to the specified value.</summary>
            <param name="face">
            The new value for the <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Face"/> property of each <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</param>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instance and a specified object,
            which must be a <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instance
            and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>
            instance, or an instance of a derived class, <b>Equals</b> invokes the strongly-typed
            <see cref="M:Tektosyne.Geometry.SubdivisionFace.Equals(Tektosyne.Geometry.SubdivisionFace)"/> overload to test the two instances for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.Equals(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> have the
            same value.</summary>
            <param name="face">
            A <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="face"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>Equals</b> compares the values all properties of the two <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> instances to test for value equality. Properties of type <see
            cref="T:Tektosyne.Geometry.SubdivisionEdge"/> are compared using <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            </para><para>
            <b>Equals</b> is intended for unit testing, as any two <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>
            instances created during normal operation are never equal.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.Equals(Tektosyne.Geometry.SubdivisionFace,Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.SubdivisionFace.Equals(Tektosyne.Geometry.SubdivisionFace)"/> overload to
            test the two <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionFace.StructureEquals(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> have the
            same structure.</summary>
            <param name="face">
            A <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the structure of <paramref name="face"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks><para>
            <b>StructureEquals</b> compares the values all properties of the two <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/> instances, except for <see cref="F:Tektosyne.Geometry.SubdivisionFace.Owner"/>, to test for
            structural equality. Properties of type <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> are compared by
            their <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> values.
            </para><para>
            <b>StructureEquals</b> is intended for testing the <see cref="M:Tektosyne.Geometry.Subdivision.Clone"/> 
            method which replicates <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> keys but not references.
            </para></remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionSearch">
            <summary>
            Provides a fast search structure for a planar <see cref="T:Tektosyne.Geometry.Subdivision"/></summary>
            <remarks><para>
            <b>SubdivisionSearch</b> creates a search structure that achieves a query time of O(log n)
            for point location in a planar <see cref="T:Tektosyne.Geometry.Subdivision"/> with n full edges. However, the
            search structure itself occupies O(n) fairly big objects which require O(n log n) steps to
            construct, and must be recreated whenever the underlying <see cref="T:Tektosyne.Geometry.Subdivision"/> changes.
            </para><para>
            Moreover, <b>SubdivisionSearch</b> requires a minimum epsilon of 1e-10 for coordinate
            comparisons to reliably construct its search structure, and must use the construction
            epsilon for all point location queries. Use the brute force <see cref="M:Tektosyne.Geometry.Subdivision.Find(Tektosyne.Geometry.PointD,System.Double)"/>
            algorithm to avoid construction costs and/or perform searches with a different epsilon.
            </para><para>
            The algorithm to incrementally construct a search structure for the trapezoidal map of a
            planar subdivision was adapted from Mark de Berg et al., <em>Computational Geometry</em>
            (3rd ed.), Springer-Verlag 2008, p.122-137. This implementation uses null half-edges and
            <see cref="F:System.Double.MaxValue"/> to indicate the unbounded face, rather than placing an actual
            bounding rectangle around the <see cref="T:Tektosyne.Geometry.Subdivision"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.#ctor(Tektosyne.Geometry.Subdivision,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> class with the
            specified <see cref="T:Tektosyne.Geometry.Subdivision"/>.</summary>
            <param name="source">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> to search.</param>
            <param name="ordered">
            <c>true</c> to insert the <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> of <paramref name="source"/>
            in their original order; <c>false</c> to use a random permutation of that order. The
            default is <c>false</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is a null reference.</exception>
            <remarks>
            The <paramref name="ordered"/> parameter is intended for tests that require a known edge
            insertion order. A random permutation is usually preferable, as the original <see
            cref="P:Tektosyne.Geometry.Subdivision.Edges"/> order can result in worst-case performance for the
            <b>SubdivisionSearch</b> algorithm.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Epsilon">
            <summary>
            The maximum absolute difference at which two coordinates should be considered equal.
            </summary>
            <remarks><para>
            <b>Epsilon</b> equals either 1e-10 or the comparison <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/>
            of the associated <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Source"/>, whichever is greater.
            </para><para>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> algorithm always uses a positive <b>Epsilon</b> to
            guard against <see cref="P:Tektosyne.Geometry.Subdivision.Vertices"/> with infinitesimal coordinate
            differences that might corrupt the search structure. If you encounter exceptions or
            incorrect search results for a given <see cref="T:Tektosyne.Geometry.Subdivision"/>, try increasing its
            comparison <see cref="P:Tektosyne.Geometry.Subdivision.Epsilon"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Source">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> for which the <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> structure
            was created.</summary>
            <remarks>
            <b>Source</b> never returns a null reference. The <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/>
            structure is not updated to reflect structural changes in the associated <b>Source</b>. 
            You must create a new <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> instance to receive correct
            results for a changed <b>Source</b>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Find(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> at the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates within the associated <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Source"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> that coincides with <paramref name="q"/>.
            </returns>
            <remarks><para>
            <b>Find</b> returns <see cref="F:Tektosyne.Geometry.SubdivisionElement.NullFace"/> if <paramref name="q"/>
            lies within the unbounded face of the associated <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Source"/>.
            </para><para>
            If <paramref name="q"/> coincides with a <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>, <b>Find</b>
            always returns the twin half-edge whose <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> is
            lexicographically smaller than its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>, according
            to <see cref="T:Tektosyne.Geometry.PointDComparerX"/>.
            </para><para>
            <b>Find</b> always uses the default <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Epsilon"/> to determine whether <paramref
            name="q"/> coincides with an <see cref="P:Tektosyne.Geometry.SubdivisionElement.Edge"/> or <see
            cref="P:Tektosyne.Geometry.SubdivisionElement.Vertex"/>. The <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> algorithm does
            not support a comparison epsilon that is significantly different from that which was
            used to construct the search structure.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Format">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the entire <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="M:System.Object.ToString"/> results for all
            nodes of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph, traversed in breadth-first order.
            </returns>
            <remarks>
            <b>Format</b> is a new method, rather than overriding <see cref="M:System.Object.ToString"/>,
            because the returned <see cref="T:System.String"/> may be hundreds or thousands of lines long.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Validate">
            <summary>
            Validates the structure of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph.</summary>
            <exception cref="T:Tektosyne.AssertionException">
            The structure of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph is invalid.</exception>
            <remarks>
            <b>Validate</b> performs a series of <see cref="M:Tektosyne.ThrowHelper.Assert(System.Boolean)"/> calls that verify
            all structural invariants of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.FindEdge(Tektosyne.Geometry.LineD)">
            <summary>
            Finds the list of <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> objects that intersect the specified <see
            cref="T:Tektosyne.Geometry.Subdivision"/> edge.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> edge to examine.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing each <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that intersects
            <paramref name="edge"/>, sorted by increasing x-coordinates.</returns>
            <remarks>
            The specified <paramref name="edge"/> must be oriented so that its <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> point is lexicographically smaller than its <see cref="F:Tektosyne.Geometry.LineD.End"/>
            point, according to <see cref="T:Tektosyne.Geometry.PointDComparerX"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.InsertEdge(Tektosyne.Geometry.SubdivisionEdge)">
            <summary>
            Inserts the specified <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> into the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> to insert.</param>
            <remarks>
            The specified <paramref name="edge"/> must be oriented so that its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> is lexicographically smaller than its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>, according to <see cref="T:Tektosyne.Geometry.PointDComparerX"/>.
            </remarks>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid">
            <summary>
            Represents one of the elements of the trapezoidal map created from the <see
            cref="T:Tektosyne.Geometry.Subdivision"/> to search.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.Parents">
            <summary>
            A list containing all <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> parents of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <remarks>
            A fully initialized <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> always has at least one valid <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> parent, but may have more than one.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.BottomEdge">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that forms the lower boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>, if any; otherwise, a null reference.</summary>
            <remarks>
            <b>BottomEdge</b> is a null reference if the lower side of the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> opens towards the unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.TopEdge">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that forms the upper boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>, if any; otherwise, a null reference.</summary>
            <remarks>
            <b>TopEdge</b> is a null reference if the upper side of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>
            opens towards the unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.Face">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that contains the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <value>
            A <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> wrapping the <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> that
            contains the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.</value>
            <remarks>
            <b>Face</b> returns <see cref="F:Tektosyne.Geometry.SubdivisionElement.NullFace"/> if <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.TopEdge"/> and <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.BottomEdge"/> are both null references.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LeftVertex">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex that marks the left boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.</summary>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate of <b>LeftVertex</b> equals <see
            cref="F:System.Double.MinValue"/> if the left side of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> opens
            towards the unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.RightVertex">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex that marks the right boundary of the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.</summary>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.PointD.X"/> coordinate of <b>RightVertex</b> equals <see
            cref="F:System.Double.MaxValue"/> if the right side of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> opens
            towards the unbounded <see cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerLeft">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> to the left of the current instance that shares the same
            <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.BottomEdge"/>, if any; otherwise, a null reference.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerRight">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> to the right of the current instance that shares the
            same <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.BottomEdge"/>, if any; otherwise, a null reference.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperLeft">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> to the left of the current instance that shares the same
            <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.TopEdge"/>, if any; otherwise, a null reference.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperRight">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> to the right of the current instance that shares the
            same <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.TopEdge"/>, if any; otherwise, a null reference.</summary>
        </member>
        <member name="P:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.IsDeleted">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> has been removed
            from the <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph.</summary>
            <value>
            <c>true</c> if <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.TopEdge"/> equals a special <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>
            instance with an invalid <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Key"/> of -1; otherwise,
            <c>false</c>. The default is <c>false</c>.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to <c>false</c>.</exception>
            <remarks>
            <see cref="M:Tektosyne.Geometry.SubdivisionSearch.Validate"/> checks <b>IsDeleted</b> to find obsolete <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> instances that remain erroneously linked to the search graph, or
            to neighboring instances.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.CopyLowerLeft(Tektosyne.Geometry.SubdivisionSearch.Trapezoid)">
            <summary>
            Copies the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerLeft"/> link from the specified <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <param name="trapezoid">
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> whose <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerLeft"/> link to copy.</param>
            <remarks>
            <b>CopyLowerLeft</b> also changes the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerRight"/> link of a valid <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerLeft"/> neighbor to the current instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.CopyLowerRight(Tektosyne.Geometry.SubdivisionSearch.Trapezoid)">
            <summary>
            Copies the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerRight"/> link from the specified <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <param name="trapezoid">
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> whose <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerRight"/> link to copy.</param>
            <remarks>
            <b>CopyLowerRight</b> also changes the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerLeft"/> link of a valid <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.LowerRight"/> neighbor to the current instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.CopyUpperLeft(Tektosyne.Geometry.SubdivisionSearch.Trapezoid)">
            <summary>
            Copies the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperLeft"/> link from the specified <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <param name="trapezoid">
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> whose <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperLeft"/> link to copy.</param>
            <remarks>
            <b>CopyUpperLeft</b> also changes the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperRight"/> link of a valid <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperLeft"/> neighbor to the current instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.CopyUpperRight(Tektosyne.Geometry.SubdivisionSearch.Trapezoid)">
            <summary>
            Copies the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperRight"/> link from the specified <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <param name="trapezoid">
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> whose <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperRight"/> link to copy.</param>
            <remarks>
            <b>CopyUpperRight</b> also changes the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperLeft"/> link of a valid <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.UpperRight"/> neighbor to the current instance.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the associated <see cref="T:Tektosyne.Geometry.Subdivision"/> edges and
            vertices, and the <see cref="M:System.Object.GetHashCode"/> results for the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>, its neighbors, and its <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.Parents"/>.</returns>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionSearch.Node">
            <summary>
            Represents one of the inner nodes of the search graph that spans the trapezoidal map
            created from the <see cref="T:Tektosyne.Geometry.Subdivision"/> to search.</summary>
            <remarks>
            The leaf nodes of the search graph are always <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> objects.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Node.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> class.</summary>
            <param name="epsilon"><para>
            The maximum absolute difference at which two coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. This value cannot be negative.
            </para></param>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Node.Epsilon">
            <summary>
            The maximum absolute difference at which two coordinates should be considered equal.
            </summary>
            <remarks>
            <b>Epsilon</b> is always equal to or greater than zero. This value is identical for
            all <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> instances in the same <see cref="T:Tektosyne.Geometry.SubdivisionSearch"/> graph.
            </remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Node.Left">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> or <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that is the left descendant of the
            current instance.</summary>
            <remarks>
            <b>Left</b> is never a null reference for a fully initialized <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/>.
            All inner nodes of the search graph have two descendants.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.Node.Right">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> or <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that is the right descendant of
            the current instance.</summary>
            <remarks>
            <b>Right</b> is never a null reference for a fully initialized <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/>.
            All inner nodes of the search graph have two descendants.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Node.Find(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> at the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates within the subtree starting at <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> that coincides with <paramref name="q"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Node.FindEdge(Tektosyne.Geometry.LineD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that contains the <see cref="F:Tektosyne.Geometry.LineD.Start"/> of the
            specified <see cref="T:Tektosyne.Geometry.Subdivision"/> edge.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> edge to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that contains the <see cref="F:Tektosyne.Geometry.LineD.Start"/> of <paramref
            name="edge"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Node.SetLeft(Tektosyne.Geometry.SubdivisionSearch.Trapezoid)">
            <summary>
            Sets the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Left"/> descendant to the specified <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <param name="trapezoid">
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that is the new <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Left"/> descendant.</param>
            <remarks>
            <b>SetLeft</b> also adds the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> to the <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.Parents"/> of the specified <paramref name="trapezoid"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Node.SetRight(Tektosyne.Geometry.SubdivisionSearch.Trapezoid)">
            <summary>
            Sets the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Right"/> descendant to the specified <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/>.
            </summary>
            <param name="trapezoid">
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that is the new <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Right"/> descendant.</param>
            <remarks>
            <b>SetRight</b> also adds the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> to the <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Trapezoid.Parents"/> of the specified <paramref name="trapezoid"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.Node.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="M:System.Object.GetHashCode"/> results for
            the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Left"/> and <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Right"/> descendants.</returns>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionSearch.EdgeNode">
            <summary>
            Represents a search graph <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> that divides its subtree along a <see
            cref="T:Tektosyne.Geometry.Subdivision"/> edge.</summary>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Left"/> child of an <see cref="T:Tektosyne.Geometry.SubdivisionSearch.EdgeNode"/> contains all search graph
            nodes to the left of its <see cref="F:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.Edge"/>, and the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Right"/>
            child contains all nodes to the right, assuming that y-coordinates increase upward.
            </remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.#ctor(Tektosyne.Geometry.SubdivisionEdge,Tektosyne.Geometry.LineD,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.EdgeNode"/> class with the specified
            <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/>.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that divides the subtree beginning at the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.EdgeNode"/>.</param>
            <param name="edgeLine">
            The <see cref="T:Tektosyne.Geometry.LineD"/> representation of <paramref name="edge"/>.</param>
            <param name="epsilon"><para>
            The maximum absolute difference at which two coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. This value cannot be negative.
            </para></param>
            <remarks>
            The specified <paramref name="edge"/> must be oriented so that its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> is lexicographically smaller than its <see
            cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>, according to <see cref="T:Tektosyne.Geometry.PointDComparerX"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.Edge">
            <summary>
            The <see cref="T:Tektosyne.Geometry.SubdivisionEdge"/> that divides the subtree beginning at the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.EdgeNode"/>.</summary>
            <remarks>
            <b>Edge</b> is always oriented so that its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Origin"/> is
            lexicographically smaller than its <see cref="P:Tektosyne.Geometry.SubdivisionEdge.Destination"/>,
            according to <see cref="T:Tektosyne.Geometry.PointDComparerX"/>.</remarks>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.EdgeLine">
            <summary>
            The <see cref="T:Tektosyne.Geometry.LineD"/> representation of the associated <see cref="F:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.Edge"/>.
            </summary>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.Find(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> at the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates within the subtree starting at <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> that coincides with <paramref name="q"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.FindEdge(Tektosyne.Geometry.LineD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that contains the <see cref="F:Tektosyne.Geometry.LineD.Start"/> of the
            specified <see cref="T:Tektosyne.Geometry.Subdivision"/> edge.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> edge to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that contains the <see cref="F:Tektosyne.Geometry.LineD.Start"/> of <paramref
            name="edge"/>.</returns>
            <remarks>
            The specified <paramref name="edge"/> must be oriented so that its <see
            cref="F:Tektosyne.Geometry.LineD.Start"/> point is lexicographically smaller than its <see
            cref="F:Tektosyne.Geometry.LineD.End"/> point, according to <see cref="T:Tektosyne.Geometry.PointDComparerX"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.EdgeNode"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="M:System.Object.GetHashCode"/> result for
            the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.EdgeNode"/>, the associated <see cref="F:Tektosyne.Geometry.SubdivisionSearch.EdgeNode.Edge"/>, and the result of the
            <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> implementation of <see cref="M:Tektosyne.Geometry.SubdivisionSearch.Node.ToString"/>.</returns>
        </member>
        <member name="T:Tektosyne.Geometry.SubdivisionSearch.VertexNode">
            <summary>
            Represents a search graph <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> that divides its subtree across a <see
            cref="T:Tektosyne.Geometry.Subdivision"/> vertex.</summary>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Left"/> child of a <see cref="T:Tektosyne.Geometry.SubdivisionSearch.VertexNode"/> contains all search
            graph nodes to the left of its <see cref="F:Tektosyne.Geometry.SubdivisionSearch.VertexNode.Vertex"/>, and the <see
            cref="F:Tektosyne.Geometry.SubdivisionSearch.Node.Right"/> child contains all nodes to the right.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.VertexNode.#ctor(Tektosyne.Geometry.PointD,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.VertexNode"/> class with the specified
            <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex.</summary>
            <param name="vertex">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex that divides the subtree beginning at the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.VertexNode"/>.</param>
            <param name="epsilon"><para>
            The maximum absolute difference at which two coordinates should be considered equal.
            </para><para>-or-</para><para>
            Zero to use exact coordinate comparisons. This value cannot be negative.
            </para></param>
        </member>
        <member name="F:Tektosyne.Geometry.SubdivisionSearch.VertexNode.Vertex">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> vertex that divides the subtree beginning at the <see
            cref="T:Tektosyne.Geometry.SubdivisionSearch.VertexNode"/>.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.VertexNode.Find(Tektosyne.Geometry.PointD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> at the specified <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates within the subtree starting at <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/>.</summary>
            <param name="q">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionElement"/> that coincides with <paramref name="q"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.VertexNode.FindEdge(Tektosyne.Geometry.LineD)">
            <summary>
            Finds the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that contains the <see cref="F:Tektosyne.Geometry.LineD.Start"/> of the
            specified <see cref="T:Tektosyne.Geometry.Subdivision"/> edge.</summary>
            <param name="edge">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> edge to examine.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Trapezoid"/> that contains the <see cref="F:Tektosyne.Geometry.LineD.Start"/> of <paramref
            name="edge"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.SubdivisionSearch.VertexNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.VertexNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the <see cref="M:System.Object.GetHashCode"/> result for
            the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.VertexNode"/>, the <see cref="F:Tektosyne.Geometry.SubdivisionSearch.VertexNode.Vertex"/> coordinates, and the result
            of the <see cref="T:Tektosyne.Geometry.SubdivisionSearch.Node"/> implementation of <see cref="M:Tektosyne.Geometry.SubdivisionSearch.Node.ToString"/>.</returns>
        </member>
        <member name="T:Tektosyne.Geometry.Voronoi">
            <summary>
            Provides a sweep line algorithm for Voronoi diagrams and Delaunay triangulations.</summary>
            <remarks><para>
            Call <see cref="M:Tektosyne.Geometry.Voronoi.FindAll(Tektosyne.Geometry.PointD[])"/> to find both the Voronoi diagram and the Delaunay
            triangulation for a given <see cref="T:Tektosyne.Geometry.PointD"/> set, or <see cref="M:Tektosyne.Geometry.Voronoi.FindDelaunay(Tektosyne.Geometry.PointD[])"/> to
            find only the Delaunay triangulation.
            </para><para>
            Since the outgoing edges of a Voronoi diagram continue indefinitely, <b>Voronoi</b> employs
            a clipping rectangle slightly larger than the bounding box of the specified point set.
            Voronoi edges that cross the clipping rectangle are terminated with a pseudo-vertex at the
            point of intersection. True Voronoi vertices beyond the clipping rectangle are not found.
            You may specify a larger clipping rectangle if desired.
            </para><para>
            <b>Voronoi</b> performs Fortune’s sweep line algorithm with an asymptotic runtime of O(n log
            n). This algorithm was first published in Steven J. Fortune, <em>A Sweepline Algorithm for
            Voronoi Diagrams,</em> Algorithmica 2 (1987), p.153-174. This C# implementation was adapted
            from Fortune’s own C implementation, available as <c>sweep2.gz</c> at the <a
            href="http://netlib.sandia.gov/voronoi/index.html">netlib/voronoi</a> archive page of Sandia
            National Laboratories. The following copyright statement is reproduced from the original C
            program, as required by the copyright conditions.
            </para><para>
            The author of this software is Steven Fortune.  Copyright (c) 1994 by AT&amp;T Bell
            Laboratories.
            </para><para>
            Permission to use, copy, modify, and distribute this software for any purpose without fee is
            hereby granted, provided that this entire notice is included in all copies of any software
            which is or includes a copy or modification of this software and in all copies of the
            supporting documentation for such software.
            </para><para>
            THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED WARRANTY.  IN
            PARTICULAR, NEITHER THE AUTHORS NOR AT&amp;T MAKE ANY REPRESENTATION OR WARRANTY OF ANY KIND
            CONCERNING THE MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.FindAll(Tektosyne.Geometry.PointD[])">
            <overloads>
            Finds the Voronoi diagram and the Delaunay triangulation for the specified set of <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates.</overloads>
            <summary>
            Finds the Voronoi diagram and the Delaunay triangulation for the specified set of <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates, using default clipping rectangle.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates whose Voronoi
            diagram and Delaunay triangulation to find.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.VoronoiResults"/> object containing the Voronoi diagram and Delaunay
            triangulation for the specified <paramref name="points"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is a null reference.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.FindAll(Tektosyne.Geometry.PointD[],Tektosyne.Geometry.RectD)">
            <summary>
            Finds the Voronoi diagram and the Delaunay triangulation for the specified set of <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates, using the specified clipping rectangle.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates whose Voronoi
            diagram and Delaunay triangulation to find.</param>
            <param name="clip">
            A <see cref="T:Tektosyne.Geometry.RectD"/> that indicates the clipping bounds for pseudo-vertices.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.VoronoiResults"/> object containing the Voronoi diagram and Delaunay
            triangulation for the specified <paramref name="points"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is a null reference.</exception>
            <remarks>
            The actual clipping rectangle always extends somewhat beyond the bounding rectangle of
            the specified <paramref name="points"/>. The specified <paramref name="clip"/> rectangle
            can only extend this area, not restrict it.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.FindDelaunay(Tektosyne.Geometry.PointD[])">
            <summary>
            Finds the Delaunay triangulation for the specified set of <see cref="T:Tektosyne.Geometry.PointD"/>
            coordinates.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates whose Delaunay
            triangulation to find.</param>
            <returns>
            An <see cref="T:System.Array"/> containing all edges of the Delaunay triangulation, stored as
            index pairs relative to the specified <paramref name="points"/> array.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is a null reference.</exception>
            <remarks><para>
            The <see cref="F:Tektosyne.Geometry.PointI.X"/> and <see cref="F:Tektosyne.Geometry.PointI.Y"/> components of each <see
            cref="T:Tektosyne.Geometry.PointI"/> element in the returned <see cref="T:System.Array"/> hold the indices of any two 
            <paramref name="points"/> elements that are connected by an edge in the Delaunay
            triangulation.
            </para><para>
            Use <see cref="M:Tektosyne.Geometry.LineD.FromIndexPoints(Tektosyne.Geometry.PointD[],Tektosyne.Geometry.PointI[])"/> to convert <paramref name="points"/> and the
            returned index <see cref="T:System.Array"/> into a <see cref="T:Tektosyne.Geometry.LineD"/> array.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.#ctor(Tektosyne.Geometry.PointD[],Tektosyne.Geometry.RectD@,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Voronoi"/> class with the specified set of
            <see cref="T:Tektosyne.Geometry.PointD"/> coordinates and requested actions.</summary>
            <param name="points">
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates whose Voronoi
            diagram and/or Delaunay triangulation to find.</param>
            <param name="clip">
            A <see cref="T:Tektosyne.Geometry.RectD"/> that indicates the desired clipping bounds for pseudo-vertices,
            and returns the actual clipping bounds for the Voronoi diagram.</param>
            <param name="findDelaunay">
            <c>true</c> to find only the Delaunay triangulation for the specified <paramref
            name="points"/>; <c>false</c> to also find the Voronoi diagram.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> contains less than three elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is a null reference.</exception>
            <remarks><para>
            Call <see cref="M:Tektosyne.Geometry.Voronoi.SweepLine"/> on the returned <see cref="T:Tektosyne.Geometry.Voronoi"/> object to actually
            compute the Voronoi diagram and/or Delaunay triangulation for the specified <paramref
            name="points"/>.
            </para><para>
            The specified <paramref name="clip"/> rectangle is ignored if <paramref
            name="findDelaunay"/> is <c>true</c>, or if its <see cref="F:Tektosyne.Geometry.RectD.Width"/> or <see
            cref="F:Tektosyne.Geometry.RectD.Height"/> component is not positive.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.SweepLine">
            <summary>
            Performs Fortune’s sweep line algorithm on the current set of input coordinates.
            </summary>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.AddVertex(Tektosyne.Geometry.Voronoi.FullEdge,System.Boolean,Tektosyne.Geometry.Voronoi.SiteVertex)">
            <summary>
            Adds the specified vertex to the specified side of the specified edge.</summary>
            <param name="e">
            The <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> to which to add <paramref name="s"/>.</param>
            <param name="isRight">
            <c>true</c> to add <paramref name="s"/> to the right side of <paramref name="e"/>;
            <c>false</c> to add to the left side.</param>
            <param name="s">
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the vertex to add.</param>
            <remarks>
            When <paramref name="e"/> contains vertices on both sides, it is added to the Voronoi
            diagram.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.BisectSites(Tektosyne.Geometry.Voronoi.SiteVertex,Tektosyne.Geometry.Voronoi.SiteVertex)">
            <summary>
            Creates a Voronoi edge that bisects the two specified sites.</summary>
            <param name="s">
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the first site to bisect.</param>
            <param name="t">
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the second site to bisect.</param>
            <returns>
            The new <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> the represents the Voronoi edge bisecting <paramref
            name="s"/> and <paramref name="t"/>.</returns>
            <remarks>
            <b>BisectSites</b> also creates a corresponding Delaunay edge if desired.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.GetDistance(Tektosyne.Geometry.Voronoi.SiteVertex,Tektosyne.Geometry.Voronoi.SiteVertex)">
            <summary>
            Computes the distance between the two specified sites or vertices.</summary>
            <param name="s">
            The first <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> to examine.</param>
            <param name="t">
            The second <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> to examine.</param>
            <returns>
            The distance between the <see cref="F:Tektosyne.Geometry.Voronoi.SiteVertex.X"/> and <see cref="F:Tektosyne.Geometry.Voronoi.SiteVertex.Y"/>
            coordinates of the specified <paramref name="s"/> and <paramref name="t"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.GetLeftSite(Tektosyne.Geometry.Voronoi.HalfEdge)">
            <summary>
            Gets the site to the left of the specified edge.</summary>
            <param name="he">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to examine.</param>
            <returns>
            The <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.RightSite"/> of the <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.Edge"/> of the specified
            <paramref name="he"/> if its <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.IsRight"/> flag is <c>true</c>;
            otherwise, the <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftSite"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.GetRightSite(Tektosyne.Geometry.Voronoi.HalfEdge)">
            <summary>
            Gets the site to the right of the specified edge.</summary>
            <param name="he">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to examine.</param>
            <returns>
            The <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.RightSite"/> of the <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.Edge"/> of the specified
            <paramref name="he"/> if its <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.IsRight"/> flag is <c>false</c>;
            otherwise, the <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftSite"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.Intersect(Tektosyne.Geometry.Voronoi.HalfEdge,Tektosyne.Geometry.Voronoi.HalfEdge)">
            <summary>
            Creates a Voronoi vertex at the intersection of the specified edges.</summary>
            <param name="he1">
            The first <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to intersect.</param>
            <param name="he2">
            The second <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to intersect.</param>
            <returns>
            The new <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the Voronoi vertex at the intersection
            of <paramref name="he1"/> and <paramref name="he2"/>, if found; otherwise, a null
            reference.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.IsRightOf(Tektosyne.Geometry.Voronoi.HalfEdge,Tektosyne.Geometry.Voronoi.SiteVertex)">
            <summary>
            Determines whether the specified site is to the right of the specified edge.</summary>
            <param name="he">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to examine.</param>
            <param name="p">
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the site to examine.</param>
            <returns>
            <c>true</c> if <paramref name="p"/> is to the right of <paramref name="he"/>; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.StoreVoronoiEdge(Tektosyne.Geometry.Voronoi.FullEdge)">
            <summary>
            Stores the specified Voronoi edge, clipped to the desired output region.</summary>
            <param name="e">
            The <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> that represents the Voronoi edge to store.</param>
            <remarks>
            <b>StoreVoronoiEdge</b> also creates a new pseudo-vertex in the Voronoi diagram if 
            <paramref name="e"/> extends beyond the desired output region.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.EdgeListInitialize">
            <summary>
            Initializes the edge list.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.EdgeListInsert(Tektosyne.Geometry.Voronoi.HalfEdge,Tektosyne.Geometry.Voronoi.HalfEdge)">
            <summary>
            Inserts the specified <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> at the specified position in the edge list.
            </summary>
            <param name="hePos">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> in the edge list that will be the left neighbor of the
            inserted <paramref name="heNew"/>.</param>
            <param name="heNew">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to insert to the right of <paramref name="hePos"/>.</param>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.EdgeListDelete(Tektosyne.Geometry.Voronoi.HalfEdge)">
            <summary>
            Deletes the specified <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> from the edge list.</summary>
            <param name="he">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to delete.</param>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.EdgeListHash(System.Int32)">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> at the specified hash bucket in the edge list.</summary>
            <param name="bucket">
            The hash bucket to search.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> at the specified hash bucket in the edge list, if any;
            otherwise, a null reference.</returns>
            <remarks>
            If the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> at the specified <paramref name="bucket"/> references a
            deleted <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/>, <b>EdgeListHash</b> removes it from the edge list and
            returns a null reference.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.EdgeListLeftBound(Tektosyne.Geometry.Voronoi.SiteVertex)">
            <summary>
            Finds the left bound of the specified site in the edge list.</summary>
            <param name="s">
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the site to find.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> that represents the left bound of <paramref name="s"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.PriQueueBucket(Tektosyne.Geometry.Voronoi.HalfEdge)">
            <summary>
            Gets the hash bucket for the specified <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> in the priority queue.
            </summary>
            <param name="he">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> whose hash bucket to return.</param>
            <returns>
            The hash bucket for the specified <paramref name="he"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.PriQueueDelete(Tektosyne.Geometry.Voronoi.HalfEdge)">
            <summary>
            Deletes the specified <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> from the priority queue.</summary>
            <param name="he">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to delete.</param>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.PriQueueInitialize">
            <summary>
            Initializes the priority queue.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.PriQueueInsert(Tektosyne.Geometry.Voronoi.HalfEdge,Tektosyne.Geometry.Voronoi.SiteVertex,System.Double)">
            <summary>
            Inserts the specified <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> with the specified vertex in the priority
            queue.</summary>
            <param name="he">
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to insert.</param>
            <param name="v">
            The new value for the <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.Vertex"/> of <paramref name="he"/>.</param>
            <param name="offset">
            The offset to add to the <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.YStar"/> coordinate of <paramref
            name="he"/>.</param>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.PriQueuePeek">
            <summary>
            Returns the coordinates of the first <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> in the priority queue,
            without removing it.</summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointD"/> containing the <see cref="F:Tektosyne.Geometry.Voronoi.SiteVertex.X"/> and <see
            cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.YStar"/> coordinates of the first <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> in the priority
            queue.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.PriQueuePop">
            <summary>
            Removes and returns the first <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> in the priority queue.</summary>
            <returns>
            The removed first <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> in the priority queue.</returns>
        </member>
        <member name="T:Tektosyne.Geometry.Voronoi.FullEdge">
            <summary>
            Represents one edge in the Voronoi diagram.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.FullEdge.A">
            <summary>
            The A component of the line equation for the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> (ax + by = c).
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.FullEdge.B">
            <summary>
            The B component of the line equation for the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> (ax + by = c).
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.FullEdge.C">
            <summary>
            The C component of the line equation for the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> (ax + by = c).
            </summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftSite">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the left-hand generator site of the
            pair that is bisected by the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftVertex">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the left-hand Voronoi vertex
            terminating the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.FullEdge.RightSite">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the right-hand generator site of the
            pair that is bisected by the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.FullEdge.RightVertex">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the right-hand Voronoi vertex
            terminating the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/>.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.FullEdge.GetVertex(System.Boolean)">
            <summary>
            Gets the Voronoi vertex on the specified side of the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/>.
            </summary>
            <param name="isRight">
            <c>true</c> to get the <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.RightVertex"/>; <c>false</c> to get the <see
            cref="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftVertex"/>.</param>
            <returns>
            The value of the <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.RightVertex"/> field if <paramref name="isRight"/> is
            <c>true</c>; otherwise, the value of the <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftVertex"/> field.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.FullEdge.SetVertex(System.Boolean,Tektosyne.Geometry.Voronoi.SiteVertex)">
            <summary>
            Sets the Voronoi vertex on the specified side of the <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> to the
            specified <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</summary>
            <param name="isRight">
            <c>true</c> to set the <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.RightVertex"/>; <c>false</c> to set the <see
            cref="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftVertex"/>.</param>
            <param name="vertex">
            The new value for the <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.RightVertex"/> or <see cref="F:Tektosyne.Geometry.Voronoi.FullEdge.LeftVertex"/> field,
            depending on the specified <paramref name="isRight"/> flag.</param>
        </member>
        <member name="T:Tektosyne.Geometry.Voronoi.HalfEdge">
            <summary>
            Represents one side of an edge of the Voronoi diagram.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.HalfEdge.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> class with default
            properties.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.HalfEdge.#ctor(Tektosyne.Geometry.Voronoi.FullEdge,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> class with the
            specified <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> and direction flag.</summary>
            <param name="e">
            The <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> of which the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> is a part.</param>
            <param name="isRight">
            Indicates whether the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> is the right or left part of the
            associated <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.Edge"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.HalfEdge.Edge">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.FullEdge"/> of which the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> is a part.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.HalfEdge.IsRight">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> is the right or left part of the
            associated <see cref="F:Tektosyne.Geometry.Voronoi.HalfEdge.Edge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.HalfEdge.Left">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to the left of this instance in the edge list.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.HalfEdge.Next">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> following this instance in the priority queue.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.HalfEdge.Right">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> to the right of this instance in the edge list.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.HalfEdge.Vertex">
            <summary>
            The <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> that represents the Voronoi vertex terminating the <see
            cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.HalfEdge.YStar">
            <summary>
            The modified y-coordinate of the <see cref="T:Tektosyne.Geometry.Voronoi.HalfEdge"/> (y + d(z)).</summary>
        </member>
        <member name="T:Tektosyne.Geometry.Voronoi.SiteVertex">
            <summary>
            Represents a generator site or vertex in the Voronoi diagram.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.SiteVertex.#ctor(System.Double,System.Double)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> class with the specified
            coordinates.</summary>
            <param name="x">
            The x-coordinate of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</param>
            <param name="y">
            The y-coordinate of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</param>
        </member>
        <member name="M:Tektosyne.Geometry.Voronoi.SiteVertex.#ctor(Tektosyne.Geometry.PointD,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/> class with the specified
            coordinates and internal index.</summary>
            <param name="p">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</param>
            <param name="index">
            The unique internal index of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.SiteVertex.Index">
            <summary>
            The unique internal index of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.SiteVertex.X">
            <summary>
            The x-coordinate of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.Voronoi.SiteVertex.Y">
            <summary>
            The y-coordinate of the <see cref="T:Tektosyne.Geometry.Voronoi.SiteVertex"/>.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.VoronoiEdge">
            <summary>
            Represents one edge in the Voronoi diagram found by the <see cref="T:Tektosyne.Geometry.Voronoi"/> algorithm.
            </summary>
            <remarks><para>
            <b>VoronoiEdge</b> is an immutable structure that represents one element in the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiEdges"/> collection of the <see cref="T:Tektosyne.Geometry.VoronoiResults"/> class.
            </para><para>
            <b>VoronoiEdge</b> contains not only the indices of the two <see
            cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> that terminate the edge but also the indices of the
            two <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> that are bisected by the edge. This data is
            required to construct the Voronoi region corresponding to each generator site.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> structure with the specified
            generator site and Voronoi vertex indices.</summary>
            <param name="site1">
            The index of the first of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> that are
            bisected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</param>
            <param name="site2">
            The index of the second of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> that are
            bisected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</param>
            <param name="vertex1">
            The index of the first of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> that are
            connected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</param>
            <param name="vertex2">
            The index of the second of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> that are
            connected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</param>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiEdge.Site1">
            <summary>
            The index of the first of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> that are
            bisected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiEdge.Site2">
            <summary>
            The index of the second of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> that are
            bisected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiEdge.Vertex1">
            <summary>
            The index of the first of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> that are
            connected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiEdge.Vertex2">
            <summary>
            The index of the second of the two <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> that are
            connected by the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</summary>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the values of the <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site1"/>, <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site2"/>,
            <see cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex1"/>, and <see cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex2"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the values of the <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site1"/>, <see
            cref="F:Tektosyne.Geometry.VoronoiEdge.Site2"/>, <see cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex1"/>, and <see cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex2"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.op_Equality(Tektosyne.Geometry.VoronoiEdge,Tektosyne.Geometry.VoronoiEdge)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.VoronoiEdge.Equals(Tektosyne.Geometry.VoronoiEdge)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.op_Inequality(Tektosyne.Geometry.VoronoiEdge,Tektosyne.Geometry.VoronoiEdge)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances have different values.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.Geometry.VoronoiEdge.Equals(Tektosyne.Geometry.VoronoiEdge)"/> method to test the two <see
            cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instance and a specified object, which
            must be a <see cref="T:Tektosyne.Geometry.VoronoiEdge"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instance and
            its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instance,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.Geometry.VoronoiEdge.Equals(Tektosyne.Geometry.VoronoiEdge)"/> overload to
            test the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.Equals(Tektosyne.Geometry.VoronoiEdge)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> have the same
            value.</summary>
            <param name="edge">
            A <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="edge"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site1"/>, <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site2"/>, <see
            cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex1"/>, and <see cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex2"/> properties of the two <see
            cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiEdge.Equals(Tektosyne.Geometry.VoronoiEdge,Tektosyne.Geometry.VoronoiEdge)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances have the same
            value. </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.Geometry.VoronoiEdge.Equals(Tektosyne.Geometry.VoronoiEdge)"/> overload to test
            the two <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.Geometry.VoronoiResults">
            <summary>
            Contains the results of the <see cref="T:Tektosyne.Geometry.Voronoi"/> algorithm.</summary>
            <remarks>
            <b>VoronoiResults</b> holds the Voronoi diagram and Delaunay triangulation found by the <see
            cref="T:Tektosyne.Geometry.Voronoi"/> algorithm when both results were requested.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.#ctor(Tektosyne.Geometry.RectD,Tektosyne.Geometry.PointD[],Tektosyne.Geometry.PointD[],Tektosyne.Geometry.VoronoiEdge[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.VoronoiResults"/> class with the specified
            clipping bounds, generator sites, and Voronoi diagram.</summary>
            <param name="clippingBounds">
            The clipping bounds for the entire Voronoi diagram.</param>
            <param name="generatorSites">
            The generator sites for the Voronoi diagram and Delaunay triangulation.</param>
            <param name="voronoiVertices">
            The vertex list for the Voronoi diagram.</param>
            <param name="voronoiEdges">
            The edge list for the Voronoi diagram.</param>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults._voronoiRegions">
            <summary>
            Backs the <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> property.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds">
            <summary>
            The clipping bounds for the entire Voronoi diagram.</summary>
            <remarks><para>
            <b>ClippingBounds</b> contains the clipping rectangle that was actually used by the <see
            cref="T:Tektosyne.Geometry.Voronoi"/> algorithm, which may be larger than the clipping rectangle originally
            supplied to <see cref="M:Tektosyne.Geometry.Voronoi.FindAll(Tektosyne.Geometry.PointD[],Tektosyne.Geometry.RectD)"/>.
            </para><para>
            All Voronoi edges are terminated with a pseudo-vertex in <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/>
            when they intersect the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>. No <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/>
            lie outside the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.
            </para><para>
            Moreover, the four corners of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> are always part of some
            <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> that were originally unbounded. Usually, the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> list does not contain these corner vertices.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges">
            <summary>
            Gets the edge list for the Delaunay triangulation.</summary>
            <value>
            An <see cref="T:System.Array"/> containing all <see cref="T:Tektosyne.Geometry.LineD"/> edges of the Delaunay
            triangulation.</value>
            <remarks>
            <b>DelaunayEdges</b> returns an <see cref="T:System.Array"/> of the same size as <see
            cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiEdges"/>. Each element is a <see cref="T:Tektosyne.Geometry.LineD"/> connecting the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> indicated by <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site1"/> and <see
            cref="F:Tektosyne.Geometry.VoronoiEdge.Site2"/> of the <see cref="T:Tektosyne.Geometry.VoronoiEdge"/> at the same index position.
            </remarks>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites">
            <summary>
            The generator sites for the Voronoi diagram and Delaunay triangulation.</summary>
            <remarks><para>
            <b>GeneratorSites</b> holds the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates whose Voronoi diagram
            and Delaunay triangulation are provided by the <see cref="T:Tektosyne.Geometry.VoronoiResults"/>.
            </para><para>
            <b>GeneratorSites</b> is the original <see cref="T:Tektosyne.Geometry.PointD"/> array that was supplied to the
            <see cref="T:Tektosyne.Geometry.Voronoi"/> algorithm and resulted in this <see cref="T:Tektosyne.Geometry.VoronoiResults"/>
            object. This property is provided merely for convenience.</para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.VoronoiEdges">
            <summary>
            The edge list for the Voronoi diagram.</summary>
            <remarks><para>
            <b>VoronoiEdges</b> holds all edges in the Voronoi diagram, stored as double index pairs
            relative to the <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> and <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> arrays.
            </para><para>
            The complete Voronoi diagram is defined both by the <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> and by
            the <b>VoronoiEdges</b> that connect the vertices. All coordinates are bounded by the
            current <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions">
            <summary>
            Gets the regions of the Voronoi diagram.</summary>
            <value>
            An <see cref="T:System.Array"/> which contains, for each index in <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/>, 
            the vertices of the corresponding Voronoi region as an <see cref="T:System.Array"/> of <see
            cref="T:Tektosyne.Geometry.PointD"/> coordinates.</value>
            <remarks><para>
            The <b>VoronoiRegions</b> are calculated when the property is first accessed, and then
            cached for repeated access. All coordinates are bounded by the current <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.
            </para><para>
            The <see cref="T:Tektosyne.Geometry.PointD"/> array for each generator site contains the vertices of a convex
            polygon. The last vertex is implicitly assumed to be connected with the first vertex.
            Most vertices also appear in <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/>, except for the four corners
            of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> which terminate the outermost regions.
            </para></remarks>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices">
            <summary>
            The vertex list for the Voronoi diagram.</summary>
            <remarks><para>
            <b>VoronoiVertices</b> holds the <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of all vertices in the
            Voronoi diagram.
            </para><para>
            The complete Voronoi diagram is defined both by the <b>VoronoiVertices</b> and by the
            <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiEdges"/> that connect the vertices. All coordinates are bounded by the
            current <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.ClearVoronoiRegions">
            <summary>
            Clears the <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> property.</summary>
            <remarks><para>
            <b>ClearVoronoiRegions</b> resets the <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> property to a null
            reference, causing its value to be recalculated when the property is next accessed.
            </para><para>
            Call this method to reduce memory consumption when the <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> are
            no longer required, e.g. after executing <see cref="M:Tektosyne.Geometry.VoronoiResults.ToVoronoiSubdivision"/>.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.ClipDelaunayEdges(Tektosyne.Geometry.RectD)">
            <summary>
            Clips the edge list for the Delaunay triangulation to the specified bounds.</summary>
            <param name="bounds">
            A <see cref="T:Tektosyne.Geometry.RectD"/> that indicates the clipping bounds for all <see
            cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/>.</param>
            <returns>
            An <see cref="T:System.Array"/> containing all <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> which intersect the
            specified <paramref name="bounds"/>, as defined below.</returns>
            <remarks><para>
            <b>ClipDelaunayEdges</b> returns all <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> whose corresponding
            <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiEdges"/> element fulfils two conditions:
            </para><list type="bullet"><item>
            <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site1"/> and <see cref="F:Tektosyne.Geometry.VoronoiEdge.Site2"/> both fall within the
            specified <paramref name="bounds"/>.
            </item><item>
            The line segment indicated by <see cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex1"/> and <see
            cref="F:Tektosyne.Geometry.VoronoiEdge.Vertex2"/> intersects the specified <paramref name="bounds"/>.
            </item></list><para>
            In other words, <b>ClipDelaunayEdges</b> selects those <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> that
            fall entirely within <paramref name="bounds"/>, and which connect two <see
            cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> that share a common border within <paramref name="bounds"/>.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.ToDelaunySubdivision(System.Boolean)">
            <overloads>
            Converts all <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> to a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>.
            </overloads>
            <summary>
            Converts all <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> to a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>, using
            the default <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</summary>
            <param name="addRegions">
            <c>true</c> to add all <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> with the corresponding <see
            cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> to the <see cref="P:Tektosyne.Geometry.Subdivision.VertexRegions"/> collection of the
            new <see cref="T:Tektosyne.Geometry.Subdivision"/>; otherwise, <c>false</c>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.Subdivision"/> whose <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> correspond to the
            <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> of the <see cref="T:Tektosyne.Geometry.VoronoiResults"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.ToDelaunySubdivision(Tektosyne.Geometry.RectD,System.Boolean)">
            <summary>
            Converts all <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> to a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>, using
            the specified clipping bounds.</summary>
            <param name="bounds">
            A <see cref="T:Tektosyne.Geometry.RectD"/> that indicates the clipping bounds for all <see
            cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/>.</param>
            <param name="addRegions">
            <c>true</c> to add all <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> with the corresponding <see
            cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> to the <see cref="P:Tektosyne.Geometry.Subdivision.VertexRegions"/> collection of the
            new <see cref="T:Tektosyne.Geometry.Subdivision"/>; otherwise, <c>false</c>.</param>
            <returns>
            A new <see cref="T:Tektosyne.Geometry.Subdivision"/> whose <see cref="P:Tektosyne.Geometry.Subdivision.Edges"/> correspond to the
            <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> of the <see cref="T:Tektosyne.Geometry.VoronoiResults"/>.</returns>
            <remarks><para>
            The specified <paramref name="bounds"/> determine the subset of <see
            cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> and <see cref="P:Tektosyne.Geometry.VoronoiResults.DelaunayEdges"/> that is stored in the new <see
            cref="T:Tektosyne.Geometry.Subdivision"/>, as described in <see cref="M:Tektosyne.Geometry.VoronoiResults.ClipDelaunayEdges(Tektosyne.Geometry.RectD)"/>.
            </para><para>
            If <paramref name="addRegions"/> is <c>true</c>, the polygons added to the <see
            cref="P:Tektosyne.Geometry.Subdivision.VertexRegions"/> collection are also clipped the specified <paramref
            name="bounds"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.ToVoronoiSubdivision">
            <summary>
            Converts all <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> to a planar <see cref="T:Tektosyne.Geometry.Subdivision"/>.
            </summary>
            <returns>
            A <see cref="T:Tektosyne.Geometry.VoronoiResults.SubdivisionMap"/> containing a new <see cref="T:Tektosyne.Geometry.Subdivision"/> whose bounded
            <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/> correspond to the <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> of the
            <see cref="T:Tektosyne.Geometry.VoronoiResults"/>.</returns>
            <remarks><para>
            The returned <see cref="T:Tektosyne.Geometry.VoronoiResults.SubdivisionMap"/> also provides a mapping between the zero-based
            indices of all <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> and <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> and the
            corresponding <see cref="P:Tektosyne.Geometry.Subdivision.Faces"/>. This mapping will become invalid as soon
            as the created <see cref="T:Tektosyne.Geometry.Subdivision"/> is changed.
            </para><para>
            <b>ToVoronoiSubdivision</b> creates all <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> if they have not
            yet been calculated. Call <see cref="M:Tektosyne.Geometry.VoronoiResults.ClearVoronoiRegions"/> if you no longer require
            this property after <b>ToVoronoiSubdivision</b> has returned.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.CloseCornerRegion(System.Collections.Generic.LinkedList{Tektosyne.Geometry.PointI},Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Closes the specified Voronoi region by adding pseudo-edges across one or two <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> corner between the specified Voronoi vertices.</summary>
            <param name="region">
            A <see cref="T:System.Collections.Generic.LinkedList`1"/> containing the known Voronoi vertex indices of the
            Voronoi region to close.</param>
            <param name="v1">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the first known vertex in the specified
            <paramref name="region"/>.</param>
            <param name="v2">
            The <see cref="T:Tektosyne.Geometry.PointD"/> coordinates of the last known vertex in the specified <paramref
            name="region"/>. Both components must be different from <paramref name="v1"/>.</param>
            <remarks>
            <b>CloseCornerRegion</b> adds one or two <see cref="T:Tektosyne.Geometry.PointI"/> pseudo-edges beginning
            with <see cref="T:Tektosyne.Geometry.VoronoiResults.CornerIndex"/> values (other than <see cref="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.None"/>) to the
            specified <paramref name="region"/>.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.ConnectCandidates(System.Collections.Generic.LinkedList{Tektosyne.Geometry.PointI},System.Collections.Generic.LinkedList{Tektosyne.Geometry.PointI})">
            <summary>
            Connects the specified candidate edges to the specified Voronoi region by inserting
            edges that span a border or corner of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</summary>
            <param name="candidates">
            A <see cref="T:System.Collections.Generic.LinkedList`1"/> containing the candidate edges that must be connected
            to the specified <paramref name="region"/>.</param>
            <param name="region">
            A <see cref="T:System.Collections.Generic.LinkedList`1"/> containing the sorted and connected edges of the
            Voronoi region. The first and last vertex must touch the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.
            </param>
            <remarks>
            <b>ConnectCandidates</b> adds one or two edges at the beginning of the specified
            <paramref name="candidates"/> list. If two edges are added, both will contain one
            pseudo-vertex represented by a <see cref="T:Tektosyne.Geometry.VoronoiResults.CornerIndex"/> value.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.CreateCornerEdge(Tektosyne.Geometry.PointD)">
            <summary>
            Creates a pseudo-edge that begins with the <see cref="T:Tektosyne.Geometry.VoronoiResults.CornerIndex"/> corresponding to
            the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="p">
            A <see cref="T:Tektosyne.Geometry.PointD"/> that coincides with one of the four corners of the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.Geometry.PointI"/> whose <see cref="F:Tektosyne.Geometry.PointI.X"/> component contains the result of
            <see cref="M:Tektosyne.Geometry.VoronoiResults.GetCornerIndex(Tektosyne.Geometry.PointD)"/> for <paramref name="p"/>, and whose <see cref="F:Tektosyne.Geometry.PointI.Y"/>
            component equals <see cref="F:System.Int32.MinValue"/>.</returns>
            <remarks>
            The <see cref="F:Tektosyne.Geometry.PointI.Y"/> component of the returned pseudo-edge is deliberately invalid
            because <b>CreateCornerEdge</b> is only used in the last stage of <see
            cref="M:Tektosyne.Geometry.VoronoiResults.CreateRegions"/> when <see cref="F:Tektosyne.Geometry.PointI.Y"/> components are ignored.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.CreateRegions">
            <summary>
            Creates the regions of the Voronoi diagram.</summary>
            <remarks>
            <b>CreateRegions</b> stores its output in the <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> property.
            Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.FindHorizontalBorder(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Finds the horizontal border of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> towards which the
            Voronoi region containing the specified vertical border coordinates is open.</summary>
            <param name="p">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <param name="q">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns>
            The <see cref="P:Tektosyne.Geometry.RectD.Top"/> or <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> border of the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>, depending on the specified <paramref name="p"/> and <paramref
            name="q"/>.</returns>
            <remarks>
            The specified <paramref name="p"/> and <paramref name="q"/> must lie on opposite
            vertical borders of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>, and their Voronoi region must open
            to one of the horizontal borders, including both adjacent corners.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.FindVerticalBorder(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Finds the vertical border of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> towards which the Voronoi
            region containing the specified horizontal border coordinates is open.</summary>
            <param name="p">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <param name="q">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns>
            The <see cref="P:Tektosyne.Geometry.RectD.Left"/> or <see cref="P:Tektosyne.Geometry.RectD.Right"/> border of the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>, depending on the specified <paramref name="p"/> and <paramref
            name="q"/>.</returns>
            <remarks>
            The specified <paramref name="p"/> and <paramref name="q"/> must lie on opposite
            horizontal borders of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>, and their Voronoi region must
            open to one of the vertical borders, including both adjacent corners.</remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.GetCornerIndex(Tektosyne.Geometry.PointD)">
            <overloads>
            Gets the index of the corner of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> that corresponds to the
            specified coordinates.</overloads>
            <summary>
            Gets the index of the corner of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> that coincides with the
            specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="p">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns><para>
            A <see cref="T:Tektosyne.Geometry.VoronoiResults.CornerIndex"/> value indicating the corner of the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> that coincides with <paramref name="p"/>.
            </para><para>-or-</para><para>
            <see cref="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.None"/> if <paramref name="p"/> does not coincide with any corner
            of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</para></returns>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.GetCornerIndex(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Gets the index of the corner of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> that separates the
            specified two <see cref="T:Tektosyne.Geometry.PointD"/> coordinates.</summary>
            <param name="p">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <param name="q">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns><para>
            A <see cref="T:Tektosyne.Geometry.VoronoiResults.CornerIndex"/> value indicating the corner of the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> that separates <paramref name="p"/> and <paramref name="q"/>.
            </para><para>-or-</para><para>
            <see cref="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.None"/> if <paramref name="p"/> and <paramref name="q"/> do not
            lie on adjacent borders of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</para></returns>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.GetVertex(System.Int32)">
            <summary>
            Gets the Voronoi vertex with the specified index.</summary>
            <param name="index">
            The index of the Voronoi vertex to retrieve. This may be either a <see
            cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> index or a <see cref="T:Tektosyne.Geometry.VoronoiResults.CornerIndex"/> value.</param>
            <returns>
            One of the four corners of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> if <paramref name="index"/>
            equals a <see cref="T:Tektosyne.Geometry.VoronoiResults.CornerIndex"/> value other than <see cref="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.None"/>;
            otherwise, the <see cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> element with the specified <paramref
            name="index"/>.</returns>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.IsAtClippingBounds(Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether the specified <see cref="T:Tektosyne.Geometry.PointD"/> coordinates touch the borders of
            the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</summary>
            <param name="p">
            The <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="F:Tektosyne.Geometry.PointD.X"/> component of <paramref name="p"/> equals the
            <see cref="P:Tektosyne.Geometry.RectD.Left"/> or <see cref="P:Tektosyne.Geometry.RectD.Right"/> border of the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>, or if the <see cref="F:Tektosyne.Geometry.PointD.Y"/> component equals the <see
            cref="P:Tektosyne.Geometry.RectD.Top"/> or <see cref="P:Tektosyne.Geometry.RectD.Bottom"/> border; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.MeetAtClippingBounds(Tektosyne.Geometry.PointD,Tektosyne.Geometry.PointD)">
            <summary>
            Determines whether the specified two <see cref="T:Tektosyne.Geometry.PointD"/> coordinates lie on the same
            border of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</summary>
            <param name="p">
            The first <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <param name="q">
            The second <see cref="T:Tektosyne.Geometry.PointD"/> to examine.</param>
            <returns>
            <c>true</c> if the <see cref="F:Tektosyne.Geometry.PointD.X"/> components of <paramref name="p"/> and
            <paramref name="q"/> both equal the <see cref="P:Tektosyne.Geometry.RectD.Left"/> or <see
            cref="P:Tektosyne.Geometry.RectD.Right"/> border of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>, or if their <see
            cref="F:Tektosyne.Geometry.PointD.Y"/> components both equal the <see cref="P:Tektosyne.Geometry.RectD.Top"/> or <see
            cref="P:Tektosyne.Geometry.RectD.Bottom"/> border; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Tektosyne.Geometry.VoronoiResults.CornerIndex">
            <summary>
            Specifies the four corners of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/>.</summary>
            <remarks>
            The four corners of the <see cref="F:Tektosyne.Geometry.VoronoiResults.ClippingBounds"/> rectangle appear as vertices of the
            <see cref="P:Tektosyne.Geometry.VoronoiResults.VoronoiRegions"/> but do not have corresponding indices in the <see
            cref="F:Tektosyne.Geometry.VoronoiResults.VoronoiVertices"/> array. <b>CornerIndex</b> therefore provides negative
            pseudo-indices for these four vertices that are accepted by <see cref="M:Tektosyne.Geometry.VoronoiResults.GetVertex(System.Int32)"/>.
            </remarks>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.None">
            <summary>
            Specifies none of the four corners.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.TopLeft">
            <summary>
            Specifies the <see cref="P:Tektosyne.Geometry.RectD.TopLeft"/> corner.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.TopRight">
            <summary>
            Specifies the <see cref="P:Tektosyne.Geometry.RectD.TopRight"/> corner.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.BottomLeft">
            <summary>
            Specifies the <see cref="P:Tektosyne.Geometry.RectD.BottomLeft"/> corner.</summary>
        </member>
        <member name="F:Tektosyne.Geometry.VoronoiResults.CornerIndex.BottomRight">
            <summary>
            Specifies the <see cref="P:Tektosyne.Geometry.RectD.BottomRight"/> corner.</summary>
        </member>
        <member name="T:Tektosyne.Geometry.VoronoiResults.SubdivisionMap">
            <summary>
            Maps the faces of a planar <see cref="T:Tektosyne.Geometry.Subdivision"/> to <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/>
            indices.</summary>
            <remarks><para>
            <b>SubdivisionMap</b> provides a mapping between all faces of a planar <see
            cref="T:Tektosyne.Geometry.Subdivision"/> and the zero-based indices of the <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> of
            the <see cref="T:Tektosyne.Geometry.VoronoiResults"/> from which the <see cref="T:Tektosyne.Geometry.Subdivision"/> was created.
            </para><para>
            The mapping is realized by a pair of arrays for optimal runtime efficiency. However,
            <b>SubdivisionMap</b> will not reflect changes to the underlying <see
            cref="T:Tektosyne.Geometry.Subdivision"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.#ctor(Tektosyne.Geometry.Subdivision,Tektosyne.Geometry.VoronoiResults,System.Int32[],Tektosyne.Geometry.SubdivisionFace[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Geometry.VoronoiResults.SubdivisionMap"/> class.</summary>
            <param name="source">
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all mapped faces.</param>
            <param name="target">
            The <see cref="T:Tektosyne.Geometry.VoronoiResults"/> that contain all mapped indices.</param>
            <param name="faceToSite">
            A one-dimensional <see cref="T:System.Array"/> that maps <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> keys
            to <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> indices.</param>
            <param name="siteToFace">
            A two-dimensional <see cref="T:System.Array"/> that maps <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> indices
            to <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> objects.</param>
        </member>
        <member name="P:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.Target">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.VoronoiResults"/> object that define all mapped <see
            cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> indices.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.VoronoiResults"/> object that define all <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/>
            indices returned and accepted by the <see cref="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.ToFace(System.Int32)"/>
            methods, respectively.</value>
        </member>
        <member name="P:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.Tektosyne#Geometry#ISubdivisionMap{System#Int32}#Target">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.VoronoiResults"/> object that define all mapped <see
            cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> indices.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.VoronoiResults"/> object that define all <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/>
            indices returned and accepted by the <see cref="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.ToFace(System.Int32)"/>
            methods, respectively.</value>
        </member>
        <member name="P:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.Source">
            <summary>
            Gets the <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all mapped faces.</summary>
            <value>
            The <see cref="T:Tektosyne.Geometry.Subdivision"/> that contains all faces accepted and returned by the
            <see cref="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)"/> and <see cref="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.ToFace(System.Int32)"/> methods, respectively.</value>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.FromFace(Tektosyne.Geometry.SubdivisionFace)">
            <summary>
            Converts the specified <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> into the associated <see
            cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> index.</summary>
            <param name="face">
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> to convert.</param>
            <returns>
            The zero-based <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> index associated with <paramref
            name="face"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="face"/> contains a <see cref="P:Tektosyne.Geometry.SubdivisionFace.Key"/> that is less
            than one or greater than the number of <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/>.</exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="face"/> is a null reference.</exception>
        </member>
        <member name="M:Tektosyne.Geometry.VoronoiResults.SubdivisionMap.ToFace(System.Int32)">
            <summary>
            Converts the specified <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> index into the associated <see
            cref="T:Tektosyne.Geometry.SubdivisionFace"/>.</summary>
            <param name="value">
            The zero-based <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> index to convert.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.SubdivisionFace"/> associated with <paramref name="value"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="value"/> is not a valid <see cref="F:Tektosyne.Geometry.VoronoiResults.GeneratorSites"/> index.
            </exception>
        </member>
        <member name="T:Tektosyne.Graph.AStar`1">
            <summary>
            Provides an A* pathfinding algorithm for <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instances.</summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks><para>
            The <b>AStar</b> algorithm finds the best path to move an <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> from
            one specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node to another. The "best path" is the one whose
            total cost is minimal compared to all other connecting paths, where the total cost of a path
            is defined as the sum of all <see cref="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)"/> results for each step
            between two adjacent path nodes.
            </para><para>
            This implementation of the A* algorithm is based on the CAStar class created by James
            Matthews. The original source code supplemented his article "Basic A* Pathfinding Made
            Simple", pages 105-113 in "AI Game Programming Wisdom", Charles River Media, 2002.
            </para><note type="caution">
            Multi-step movements are problematic when the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> uses a
            non-trivial <see cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> condition. After a successful path
            search, <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> is always valid and optimal for a single-step
            movement. However, calling <see cref="M:Tektosyne.Graph.AStar`1.GetLastNode(System.Double)"/> with less than the maximum
            path cost may yield a suboptimal intermediate node, or none at all. Since the algorithm does
            not know whether a given intermediate path node will be occupied permanently or merely
            traversed, the final path may contain many intermediate nodes for which <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> fails.</note></remarks>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.#ctor(Tektosyne.Graph.IGraph2D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Graph.AStar`1"/> class with the specified
            two-dimensional graph.</summary>
            <param name="graph">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graph"/> is a null reference.</exception>
        </member>
        <member name="P:Tektosyne.Graph.AStar`1.AbsoluteLimit">
            <summary>
            Gets the absolute limit on the search radius for the last path search.</summary>
            <value><para>
            The maximum sum of the distances, according to <see cref="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)"/>,
            between any one <see cref="F:Tektosyne.Graph.AStar`1.Graph"/> node in the search path and the source and target
            nodes. Nodes that exceed this sum are not added to the search path.
            </para><para>-or-</para><para>
            Zero to indicate that there was no limit on the search radius. The default is zero.
            </para></value>
            <remarks>
            This property is set by <see cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/>, depending on the current value of
            <see cref="P:Tektosyne.Graph.AStar`1.RelativeLimit"/>. Please see there for further details.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.AStar`1.Agent">
            <summary>
            Gets the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> for the last path search.</summary>
            <value>
            The <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> that was supplied to the last invocation of <see
            cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/>. The default is a null reference.</value>
        </member>
        <member name="P:Tektosyne.Graph.AStar`1.BestNode">
            <summary>
            Gets the final node found by the last successful path search.</summary>
            <value>
            The <see cref="T:Tektosyne.Graph.PathNode`1"/> that represents the target node of the last successful
            call to <see cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/>. This <see cref="T:Tektosyne.Graph.PathNode`1"/> ends the best path.
            </value>
            <remarks><para>
            <b>BestNode</b> returns a null reference if the last call to <see cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/>
            returned <c>false</c>, or if the method has not yet been called.
            </para><para>
            The best path ended by <b>BestNode</b> is returned by the <see cref="P:Tektosyne.Graph.AStar`1.Nodes"/> property.
            It is found by backtracking through the <see cref="P:Tektosyne.Graph.PathNode`1.Parent"/> properties of
            all connected <see cref="T:Tektosyne.Graph.PathNode`1"/> objects.</para></remarks>
        </member>
        <member name="F:Tektosyne.Graph.AStar`1.Graph">
            <summary>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</summary>
        </member>
        <member name="P:Tektosyne.Graph.AStar`1.Nodes">
            <summary>
            Gets a list of all <see cref="F:Tektosyne.Graph.AStar`1.Graph"/> nodes in the best path found by the last
            successful path search.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.ListEx`1"/> containing all <see cref="F:Tektosyne.Graph.AStar`1.Graph"/> nodes that
            constitute the best movement path found by the last successful call to <see
            cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/>, including source and target node.</value>
            <remarks><para>
            <b>Nodes</b> never returns a null reference, but it returns an empty collection if the
            last call to <see cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/> returned <c>false</c>, or if the method has not
            yet been called.
            </para><para>
            The first element in <b>Nodes</b> is always the source node, and the last element is
            always the <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> represented by the <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/>.
            </para></remarks>
        </member>
        <member name="P:Tektosyne.Graph.AStar`1.RelativeLimit">
            <summary>
            Gets or sets the limit on the search radius, relative to the distance between source and
            target node.</summary>
            <value><para>
            The factor to multiply with the distance between source and target node, according to
            <see cref="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)"/>, to obtain the <see cref="P:Tektosyne.Graph.AStar`1.AbsoluteLimit"/> on the
            search radius.
            </para><para>-or-</para><para>
            Zero to indicate that there is no limit on the search radius. The default is zero.
            </para></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a negative value, or to a value that is greater than zero and
            less than one.</exception>
            <remarks><para>
            Setting <b>RelativeLimit</b> to a positive value restricts the search path to an
            elliptical area. The source and target nodes are the focal points of the ellipse, and
            <b>RelativeLimit</b> defines its inverse eccentricity.
            </para><para>
            Please refer to <see cref="P:Tektosyne.Graph.AStar`1.AbsoluteLimit"/> and <see cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/> for further
            details.</para></remarks>
        </member>
        <member name="P:Tektosyne.Graph.AStar`1.TotalCost">
            <summary>
            Gets the total cost of the best path found by the last successful path search.</summary>
            <value>
            The value of the <see cref="P:Tektosyne.Graph.PathNode`1.G"/> property of <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/>. This is
            the sum of the <see cref="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)"/> results for all <see
            cref="P:Tektosyne.Graph.AStar`1.Nodes"/>.</value>
            <remarks>
            <b>TotalCost</b> returns -1 if <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> is a null reference. This is the
            case if the last call to <see cref="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)"/> returned <c>false</c>, or if the
            method has not yet been called.</remarks>
        </member>
        <member name="F:Tektosyne.Graph.AStar`1.UseWorldDistance">
            <summary>
            <c>true</c> if the <see cref="T:Tektosyne.Graph.AStar`1"/> algorithm should prefer path nodes with a
            minimal distance from the target node, in world coordinates; otherwise, <c>false</c>.
            The default is <c>false</c>.</summary>
            <remarks><para>
            If <b>UseWorldDistance</b> is <c>true</c>, candidate path nodes whose path costs are
            identical are also compared for their distances from the target node, using the world
            coordinates returned by <see cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldLocation(`0)"/>.
            </para><para>
            This option eliminates zero-cost oscillations in the final path, creating a smoother and
            more "natural" course. However, the additional calculations and comparisons may slow
            down pathfinding. <b>UseWorldDistance</b> has no effect if <see
            cref="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)"/> already uses world coordinates.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.FindBestPath(Tektosyne.Graph.IGraphAgent{`0},`0,`0)">
            <summary>
            Finds the best path to move the specified agent from one specified <see cref="F:Tektosyne.Graph.AStar`1.Graph"/>
            node to another.</summary>
            <param name="agent">
            The <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> that performs the movement.</param>
            <param name="source">
            The source node within <see cref="F:Tektosyne.Graph.AStar`1.Graph"/>.</param>
            <param name="target">
            The target node within <see cref="F:Tektosyne.Graph.AStar`1.Graph"/>.</param>
            <returns>
            <c>true</c> if a best path between <paramref name="source"/> and <paramref
            name="target"/> could be found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="agent"/>, <paramref name="source"/>, or <paramref name="target"/> is a
            null reference.</exception>
            <remarks><para>
            <b>FindBestPath</b> returns <c>false</c> if either of the specified <paramref
            name="source"/> and <paramref name="target"/> nodes is invalid, or if no connecting path
            could be found.
            </para><para>
            Otherwise, <b>FindBestPath</b> returns <c>true</c> and sets the <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/>,
            <see cref="P:Tektosyne.Graph.AStar`1.Nodes"/>, and <see cref="P:Tektosyne.Graph.AStar`1.TotalCost"/> properties to the results of the path
            search.
            </para><para>
            <b>FindBestPath</b> calls <see cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> and <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.IsNearTarget(`0,`0,System.Double)"/> on the specified <paramref name="agent"/> to
            determine whether a given <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> candidate is acceptable. Depending on
            the implementation of <b>IsNearTarget</b>, the <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> of the
            final <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> may differ from the specified <paramref name="target"/>,
            and possibly equal the specified <paramref name="source"/>. <b>CanOccupy</b> is never
            called on path nodes that match the <paramref name="source"/> node.
            </para><para>
            <b>FindBestPath</b> operates with a <em>restricted search radius</em> if <see
            cref="P:Tektosyne.Graph.AStar`1.RelativeLimit"/> is greater than zero. In this case, <see cref="P:Tektosyne.Graph.AStar`1.AbsoluteLimit"/>
            is set to the product (rounded up) of <b>RelativeLimit</b> and the distance between
            <paramref name="source"/> and <paramref name="target"/>. Whenever a node is considered
            for inclusion in the search path, its distances from <paramref name="source"/> and
            <paramref name="target"/> are calculated, and the node is ignored if the sum exceeds
            <b>AbsoluteLimit</b>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.GetLastNode(System.Double)">
            <summary>
            Returns the last <see cref="F:Tektosyne.Graph.AStar`1.Graph"/> node in the best path whose total path cost does
            not exceed the specified maximum cost.</summary>
            <param name="maxCost">
            The maximum total path cost of the returned <see cref="F:Tektosyne.Graph.AStar`1.Graph"/> node.</param>
            <returns>
            The <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> of the last <see cref="P:Tektosyne.Graph.AStar`1.Nodes"/> element whose total
            path cost does not exceed the specified <paramref name="maxCost"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxCost"/> is zero or negative.</exception>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> is a null reference.</exception>
            <remarks>
            <b>GetLastNode</b> returns the <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> associated with the <see
            cref="T:Tektosyne.Graph.PathNode`1"/> found by <see cref="M:Tektosyne.Graph.AStar`1.GetLastPathNode(System.Double)"/> for the specified <paramref
            name="maxCost"/>. Please see there for details.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.GetLastPathNode(System.Double)">
            <summary>
            Returns the last <see cref="T:Tektosyne.Graph.PathNode`1"/> in the best path whose total path cost does
            not exceed the specified maximum cost.</summary>
            <param name="maxCost">
            The maximum total path cost of the returned <see cref="T:Tektosyne.Graph.PathNode`1"/>.</param>
            <returns>
            The <see cref="T:Tektosyne.Graph.PathNode`1"/> that is the last parent of <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> whose
            total path cost does not exceed the specified <paramref name="maxCost"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxCost"/> is zero or negative.</exception>
            <exception cref="T:Tektosyne.PropertyValueException">
            <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> is a null reference.</exception>
            <remarks><para>
            <b>GetLastNode</b> always returns a <see cref="T:Tektosyne.Graph.PathNode`1"/> whose <see
            cref="F:Tektosyne.Graph.PathNode`1.Node"/> is an element of <see cref="P:Tektosyne.Graph.AStar`1.Nodes"/>. The exact element
            depends on the specified <paramref name="maxCost"/>.
            </para><para>
            <b>GetLastNode</b> searches for the <see cref="T:Tektosyne.Graph.PathNode`1"/> that is the last <see
            cref="P:Tektosyne.Graph.PathNode`1.Parent"/> of <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> whose <see cref="P:Tektosyne.Graph.PathNode`1.G"/>
            value does not exceed the specified <paramref name="maxCost"/>, and for which <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> succeeds with the moving <see cref="P:Tektosyne.Graph.AStar`1.Agent"/>.
            </para><para>
            If <see cref="P:Tektosyne.Graph.IGraphAgent`1.RelaxedRange"/> is <c>true</c> for the moving <see
            cref="P:Tektosyne.Graph.AStar`1.Agent"/>, the <see cref="P:Tektosyne.Graph.PathNode`1.G"/> value of the returned <b>PathNode</b>
            may exceed <paramref name="maxCost"/> if the <see cref="P:Tektosyne.Graph.PathNode`1.G"/> value of its
            <see cref="P:Tektosyne.Graph.PathNode`1.Parent"/> node is strictly less than <paramref name="maxCost"/>.
            </para><para>
            If the specified <paramref name="maxCost"/> exceeds the cost of all nodes, or if
            <b>CanOccupy</b> fails for all affordable nodes, <b>GetLastNode</b> returns the <see
            cref="T:Tektosyne.Graph.PathNode`1"/> that corresponds to the first <see cref="P:Tektosyne.Graph.AStar`1.Nodes"/> element, i.e. the
            source node of the path search.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.CreateChildren(Tektosyne.Graph.PathNode{`0})">
            <summary>
            Adds all valid neighbors as children to the specified parent node.</summary>
            <param name="parent">
            The <see cref="T:Tektosyne.Graph.PathNode`1"/> whose neighbors to examine.</param>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.GetWorldDistance(Tektosyne.Graph.PathNode{`0})">
            <summary>
            Returns the squared world distance between the specified <see cref="T:Tektosyne.Graph.PathNode`1"/> and
            the target node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.PathNode`1"/> whose distance to the target node to compute.</param>
            <returns>
            The squared distance, in world coordinates, from the specified <paramref name="node"/>
            to the current target node.</returns>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.LinkChild(Tektosyne.Graph.PathNode{`0},`0)">
            <summary>
            Links the specified child node to the specified parent node.</summary>
            <param name="parent">
            The parent node to link with <paramref name="graphChild"/>.</param>
            <param name="graphChild">
            The child node within <see cref="F:Tektosyne.Graph.AStar`1.Graph"/> to link with <paramref name="parent"/>.
            </param>
            <remarks>
            <b>LinkChild</b> searches the open and closed tables for the specified <paramref
            name="graphChild"/>, and creates a new open list node if no matching node was found.
            </remarks>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.SetBestNode">
            <summary>
            Sets the <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> property to the open list node with the lowest <see
            cref="P:Tektosyne.Graph.PathNode`1.F"/> value.</summary>
            <returns>
            <c>true</c> if the open list contained another node that was removed and stored as the
            new value of the <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> property; otherwise, <c>false</c>.</returns>
            <remarks>
            <see cref="P:Tektosyne.Graph.AStar`1.BestNode"/> is a null reference exactly if <b>SetBestNode</b> returns
            <c>false</c>.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.AStar`1.UpdateParents(Tektosyne.Graph.PathNode{`0})">
            <summary>
            Updates all parents of all children of the specified node to reflect lowered path costs.
            </summary>
            <param name="node">
            A closed list node that has been reached by a new path.</param>
            <remarks>
            All possible paths are represented by <see cref="P:Tektosyne.Graph.PathNode`1.Parent"/> links through the
            current <see cref="T:Tektosyne.Graph.PathNode`1"/> collection. If an existing node has been reached by a
            new and cheaper path, the cost for all paths that involve this node must be updated
            accordingly.</remarks>
        </member>
        <member name="T:Tektosyne.Graph.Coverage`1">
            <summary>
            Provides a path coverage algorithm for <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instances.</summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks><para>
            The <b>Coverage</b> algorithm finds all <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes that an <see
            cref="T:Tektosyne.Graph.IGraphAgent`1"/> can reach by any movement path that starts on a specified node, and
            whose total cost does not exceed a specified maximum cost.
            </para><para>
            The total path cost is defined as the sum of all <see cref="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)"/>
            results for each movement step between two adjacent path nodes. Only nodes for which <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> succeeds are considered reachable.
            </para><note type="caution">
            Multi-step movements are problematic when the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> uses a
            non-trivial <see cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> condition. After a successful path
            search, all found <see cref="P:Tektosyne.Graph.Coverage`1.Nodes"/> are valid end points for a single-step
            movement. However, attempting to reach any <b>Nodes</b> element with multiple movement steps
            may prove impossible. Since the algorithm does not know whether a given intermediate path
            node will be occupied permanently or merely traversed, the path by which a <b>Nodes</b>
            element was reached may contain many intermediate nodes for which <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> fails.</note></remarks>
        </member>
        <member name="M:Tektosyne.Graph.Coverage`1.#ctor(Tektosyne.Graph.IGraph2D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Graph.Coverage`1"/> class with the specified
            two-dimensional graph.</summary>
            <param name="graph">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graph"/> is a null reference.</exception>
        </member>
        <member name="P:Tektosyne.Graph.Coverage`1.Agent">
            <summary>
            Gets the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> for the last search.</summary>
            <value>
            The <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> that was supplied to the last invocation of <see
            cref="M:Tektosyne.Graph.Coverage`1.FindReachable(Tektosyne.Graph.IGraphAgent{`0},`0,System.Double)"/>. The default is a null reference.</value>
        </member>
        <member name="F:Tektosyne.Graph.Coverage`1.Graph">
            <summary>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</summary>
        </member>
        <member name="P:Tektosyne.Graph.Coverage`1.Nodes">
            <summary>
            Gets a list of all <see cref="F:Tektosyne.Graph.Coverage`1.Graph"/> nodes that were reached by the last successful
            search.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.ListEx`1"/> containing all <see cref="F:Tektosyne.Graph.Coverage`1.Graph"/> nodes that
            were reached by the last successful call to <see cref="M:Tektosyne.Graph.Coverage`1.FindReachable(Tektosyne.Graph.IGraphAgent{`0},`0,System.Double)"/>, not including
            the source node.</value>
            <remarks>
            <b>Nodes</b> never returns a null reference, but it returns an empty collection if the
            last call to <see cref="M:Tektosyne.Graph.Coverage`1.FindReachable(Tektosyne.Graph.IGraphAgent{`0},`0,System.Double)"/> returned <c>false</c>, or if the method has not
            yet been called.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.Coverage`1.FindReachable(Tektosyne.Graph.IGraphAgent{`0},`0,System.Double)">
            <summary>
            Finds all <see cref="F:Tektosyne.Graph.Coverage`1.Graph"/> nodes that the specified agent can reach from the
            specified node with the specified maximum path cost.</summary>
            <param name="agent">
            The <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> that performs the movement.</param>
            <param name="source">
            The source node within <see cref="F:Tektosyne.Graph.Coverage`1.Graph"/> where the movement starts.</param>
            <param name="maxCost">
            The maximum total cost of the best path from the specified <paramref name="source"/> to
            any reachable <see cref="F:Tektosyne.Graph.Coverage`1.Graph"/> node.</param>
            <returns>
            <c>true</c> if one or more <see cref="F:Tektosyne.Graph.Coverage`1.Graph"/> nodes could be reached from the specified
            <paramref name="source"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="agent"/> or <paramref name="source"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxCost"/> is zero or negative.</exception>
            <remarks><para>
            <b>FindReachable</b> returns <c>false</c> if the specified <paramref name="source"/>
            node is invalid, or if there are no reachable nodes whose total path cost is equal to or
            less than the specified <paramref name="maxCost"/>.
            </para><para>
            Otherwise, <b>FindReachable</b> returns <c>true</c> and sets the <see cref="P:Tektosyne.Graph.Coverage`1.Nodes"/>
            property to the result of the path search. This collection contains only those reachable
            nodes for which <see cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> has succeeded.
            </para><para>
            If <see cref="P:Tektosyne.Graph.IGraphAgent`1.RelaxedRange"/> is <c>true</c> for the specified <paramref
            name="agent"/>, the <b>Nodes</b> collection includes those nodes whose total path cost
            exceeds <paramref name="maxCost"/>, but which can be reached from a neighbor whose total
            path cost is less than (but not equal to) <paramref name="maxCost"/>. These nodes are
            considered reachable regardless of their actual step costs.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.Coverage`1.ExpandArea(`0,System.Double)">
            <summary>
            Expands the current coverage area with all neighbors of the specified <see
            cref="F:Tektosyne.Graph.Coverage`1.Graph"/> node that can be reached by the current <see cref="P:Tektosyne.Graph.Coverage`1.Agent"/>.</summary>
            <param name="node">
            The <see cref="F:Tektosyne.Graph.Coverage`1.Graph"/> node whose neighbors to examine.</param>
            <param name="cost">
            The total path cost to reach <paramref name="node"/>, measured as the sum of all <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)"/> results for each movement step between neighboring
            nodes.</param>
            <remarks><para>
            <b>ExpandArea</b> recursively computes all possible movement paths for the current <see
            cref="P:Tektosyne.Graph.Coverage`1.Agent"/>, adding all valid nodes in any affordable path to the <see cref="P:Tektosyne.Graph.Coverage`1.Nodes"/>
            collection.
            </para><para>
            <b>ExpandArea</b> never revisits nodes that were already reached by a better path. The
            source node specified in the <see cref="M:Tektosyne.Graph.Coverage`1.FindReachable(Tektosyne.Graph.IGraphAgent{`0},`0,System.Double)"/> call is never added to the
            <b>Nodes</b> collection.</para></remarks>
        </member>
        <member name="T:Tektosyne.Graph.FloodFill`1">
            <summary>
            Provides a flood fill algorithm for <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instances.</summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks>
            The <b>FloodFill</b> algorithm starts on a specified starting node, and recursively finds
            any adjacent nodes that match the conditions defined by a specified <see
            cref="T:System.Predicate`1"/> delegate.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.FloodFill`1.#ctor(Tektosyne.Graph.IGraph2D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Graph.FloodFill`1"/> class with the specified
            two-dimensional graph.</summary>
            <param name="graph">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graph"/> is a null reference.</exception>
        </member>
        <member name="F:Tektosyne.Graph.FloodFill`1.Graph">
            <summary>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</summary>
        </member>
        <member name="P:Tektosyne.Graph.FloodFill`1.Nodes">
            <summary>
            Gets a list of all <see cref="F:Tektosyne.Graph.FloodFill`1.Graph"/> nodes that were reached by the last successful
            search.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.ListEx`1"/> containing all <see cref="F:Tektosyne.Graph.FloodFill`1.Graph"/> nodes that were
            reached by the last successful call to <see cref="M:Tektosyne.Graph.FloodFill`1.FindMatching(System.Predicate{`0},`0)"/>, not including the
            source node.</value>
            <remarks>
            <b>Nodes</b> never returns a null reference, but it returns an empty collection if the
            last call to <see cref="M:Tektosyne.Graph.FloodFill`1.FindMatching(System.Predicate{`0},`0)"/> returned <c>false</c>, or if the method has not
            yet been called.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.FloodFill`1.FindMatching(System.Predicate{`0},`0)">
            <summary>
            Finds all contiguous <see cref="F:Tektosyne.Graph.FloodFill`1.Graph"/> nodes that match the specified conditions,
            starting from the specified node.</summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the conditions each <see
            cref="F:Tektosyne.Graph.FloodFill`1.Graph"/> node must match.</param>
            <param name="source">
            The source node within <see cref="F:Tektosyne.Graph.FloodFill`1.Graph"/> where the search starts.</param>
            <returns>
            <c>true</c> if one or more <see cref="F:Tektosyne.Graph.FloodFill`1.Graph"/> nodes could be reached from the specified
            <paramref name="source"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> or <paramref name="source"/> is a null reference.</exception>
            <remarks><para>
            <b>FindMatching</b> returns <c>false</c> if the specified <paramref name="source"/> node
            is invalid, or if there are no contiguous nodes for which <paramref name="match"/>
            succeeds.
            </para><para>
            Otherwise, <b>FindMatching</b> returns <c>true</c> and sets the <see cref="P:Tektosyne.Graph.FloodFill`1.Nodes"/>
            property to the result of the flood fill.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.FloodFill`1.ExpandArea(`0)">
            <summary>
            Expands the current fill area with all neighbors of the specified <see cref="F:Tektosyne.Graph.FloodFill`1.Graph"/>
            node for which the matching predicate succeeds.</summary>
            <param name="node">
            The <see cref="F:Tektosyne.Graph.FloodFill`1.Graph"/> node whose neighbors to examine.</param>
            <remarks><para>
            <b>ExpandArea</b> recursively visits all contiguous nodes for which the matching
            predicate succeeds, and adds them to the <see cref="P:Tektosyne.Graph.FloodFill`1.Nodes"/> collection.
            </para><para>
            <b>ExpandArea</b> never revisits nodes that were already added or rejected. The source
            node specified in the <see cref="M:Tektosyne.Graph.FloodFill`1.FindMatching(System.Predicate{`0},`0)"/> call is never added to the <b>Nodes</b>
            collection.</para></remarks>
        </member>
        <member name="T:Tektosyne.Graph.IGraph2D`1">
            <summary>
            Provides a navigable graph whose nodes map to regions in two-dimensional space.</summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks><para>
            <b>IGraph2D</b> provides a graph suitable for pathfinding and other generic graph
            algorithms. All nodes map to locations and regions in two-dimensional space. Connected nodes
            can be navigated by mobile objects, typically represented by an <see cref="T:Tektosyne.Graph.IGraphAgent`1"/>
            instance.
            </para><para>
            <b>IGraph2D</b> makes no assumptions about the underlying topology. Representable topologies
            include grids of regular polygons as described by the <see cref="T:Tektosyne.Geometry.PolygonGrid"/> class, but
            also irregular graphs as described by the <see cref="T:Tektosyne.Geometry.Subdivision"/> class.
            </para><note type="implementnotes">
            <typeparamref name="T"/> must provide meaningful <see cref="M:System.Object.Equals(System.Object)"/> and <see
            cref="M:System.Object.GetHashCode"/> methods because some graph algorithms store nodes in hashtables.
            </note></remarks>
        </member>
        <member name="P:Tektosyne.Graph.IGraph2D`1.Connectivity">
            <summary>
            Gets the maximum number of direct neighbors for any <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.
            </summary>
            <value>
            A positive <see cref="T:System.Int32"/> value indicating the maximum number of direct neighbors
            for any given <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</value>
            <remarks>
            The direct neighbors of any given <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node are those that are
            directly connected with the node, without any intermediate nodes.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.IGraph2D`1.NodeCount">
            <summary>
            Gets the total number of <see cref="P:Tektosyne.Graph.IGraph2D`1.Nodes"/> in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</summary>
            <value>
            The total number of <see cref="P:Tektosyne.Graph.IGraph2D`1.Nodes"/> in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</value>
            <remarks>
            <b>NodeCount</b> never returns a negative value.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.IGraph2D`1.Nodes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all nodes in the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/>.</summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection that contains all nodes in the <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/>.</value>
            <remarks>
            <b>Nodes</b> returns a total of <see cref="P:Tektosyne.Graph.IGraph2D`1.NodeCount"/> elements. The enumeration order
            depends on the concrete <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instance.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraph2D`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> contains the specified node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node to examine.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> contains the specified <paramref
            name="node"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="node"/> is not a valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</exception>
            <remarks>
            <b>Contains</b> should throw an <see cref="T:System.ArgumentException"/> only if the specified
            <paramref name="node"/> is invalid for any possible <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instance,
            e.g. a null reference.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)">
            <summary>
            Returns the distance between the two specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes.
            </summary>
            <param name="source">
            The source node in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</param>
            <param name="target">
            The target node in the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</param>
            <returns>
            The non-negative distance between <paramref name="source"/> and <paramref
            name="target"/>, using world coordinates, movement steps, or another arbitrary measure.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> or <paramref name="target"/> is not a valid <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</exception>
            <remarks><para>
            <b>GetDistance</b> must conform to the following invariants:
            </para><list type="bullet"><item>
            The distance between identical valid nodes is always zero.
            </item><item>
            The distance between different valid nodes is always positive.
            </item><item>
            The sum of the distances between all successive nodes within a sequence is never less
            than the distance between any two nodes from the same sequence.
            </item><item>
            The distance between two valid nodes is always equal to or less than the result of <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)"/> for the same two nodes.
            </item><item>
            The distance between two valid nodes remains unchanged if the arguments are reversed.
            </item><item>
            The distance is undefined if one or both nodes are invalid. In this case only, the
            result may be negative.
            </item></list><para>
            <b>GetDistance</b> should throw an <see cref="T:System.ArgumentException"/> only if the specified
            <paramref name="source"/> or <paramref name="target"/> is invalid for any possible <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> instance, e.g. a null reference.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraph2D`1.GetNearestNode(Tektosyne.Geometry.PointD)">
            <summary>
            Gets the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node that is nearest to the specified location, in
            world coordinates.</summary>
            <param name="location">
            The <see cref="T:Tektosyne.Geometry.PointD"/> location, in world coordinates, whose nearest <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node to find.</param>
            <returns>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose <see cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldLocation(`0)"/> result is
            nearest to the specified <paramref name="location"/>.</returns>
            <remarks><para>
            <b>GetNearestNode</b> always returns a valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, even if the
            distance between its <see cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldLocation(`0)"/> result and the specified <paramref
            name="location"/> is very large.
            </para><para>
            The node returned by <b>GetNearestNode</b> is not necessarily the one whose <see
            cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldRegion(`0)"/> result contains the specified <paramref name="location"/>.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraph2D`1.GetNeighbors(`0)">
            <summary>
            Returns all direct neighbors of the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose direct neighbors to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IList`1"/> containing all valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes that are
            directly connected with the specified <paramref name="node"/>. The number of elements is
            at most <see cref="P:Tektosyne.Graph.IGraph2D`1.Connectivity"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="node"/> is not a valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</exception>
            <remarks><para>
            <b>GetNeighbors</b> never returns a null reference, but it returns an empty <see
            cref="T:System.Collections.Generic.IList`1"/> if the specified <paramref name="node"/> or all its neighbors are not
            part of the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.
            </para><para>
            <b>GetNeighbors</b> returns the complete set of target nodes for which <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.CanMakeStep(`0,`0)"/> could possibly succeed, assuming the specified
            <paramref name="node"/> is the source node.
            </para><para>
            <b>GetNeighbors</b> should throw an <see cref="T:System.ArgumentException"/> only if the
            specified <paramref name="node"/> is invalid for any possible <see cref="T:Tektosyne.Graph.IGraph2D`1"/>
            instance, e.g. a null reference.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraph2D`1.GetWorldLocation(`0)">
            <summary>
            Gets the location of the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, in world coordinates.
            </summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose location to return.</param>
            <returns>
            The <see cref="T:Tektosyne.Geometry.PointD"/> location of the specified <paramref name="node"/>, in world
            coordinates.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="node"/> is not a valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</exception>
            <remarks><para>
            <b>GetWorldLocation</b> returns coordinates within an arbitrary "world" coordinate
            system whose interpretation depends on the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instance. The
            returned coordinates are the location of the specified <paramref name="node"/> within
            the region determined by <see cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldRegion(`0)"/>.
            </para><para>
            The result of <see cref="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)"/> for any two nodes is usually the Euclidean
            distance between their <b>GetWorldLocation</b> results, but this is not a requirement.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraph2D`1.GetWorldRegion(`0)">
            <summary>
            Gets the region covered by the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, in world
            coordinates.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node whose region to return.</param>
            <returns><para>
            An <see cref="T:System.Array"/> containing the <see cref="T:Tektosyne.Geometry.PointD"/> vertices of the polygonal
            region covered by the specified <paramref name="node"/>, in world coordinates.
            </para><para>-or-</para><para>
            A null reference if <paramref name="node"/> does not define a polygonal region.
            </para></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="node"/> is not a valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</exception>
            <remarks><para>
            <b>GetWorldRegion</b> returns coordinates within an arbitrary "world" coordinate system
            whose interpretation depends on the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instance.
            </para><para>
            The returned polygon is implicitly assumed to be closed, with an edge connecting its
            last and first vertex. The polygon should be simple and enclose a positive area that
            contains the location of the specified <paramref name="node"/>, as determined by <see
            cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldLocation(`0)"/>.</para></remarks>
        </member>
        <member name="T:Tektosyne.Graph.IGraphAgent`1">
            <summary>
            Represents an agent that can navigate an <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks>
            <b>IGraphAgent</b> represents a mobile object that can navigate the node connections defined
            by an <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instance. Both interfaces allow the use of generic search
            algorithms, such as <see cref="T:Tektosyne.Graph.AStar`1"/> and <see cref="T:Tektosyne.Graph.Coverage`1"/>, with
            application-specific graphs and agents.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.IGraphAgent`1.RelaxedRange">
            <summary>
            Indicates whether the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> can enter <see cref="T:Tektosyne.Graph.IGraph2D`1"/>
            nodes that exceed the maximum path cost for a movement.</summary>
            <value>
            <c>true</c> if the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> may end a movement on an <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node that exceeds the maximum path cost for the movement;
            otherwise, <c>false</c>.</value>
            <remarks><para>
            The <see cref="T:Tektosyne.Graph.AStar`1"/> and <see cref="T:Tektosyne.Graph.Coverage`1"/> algorithms examine
            <b>RelaxedRange</b> when computing the results of the <see cref="M:Tektosyne.Graph.AStar`1.GetLastNode(System.Double)"/>
            and <see cref="M:Tektosyne.Graph.Coverage`1.FindReachable(Tektosyne.Graph.IGraphAgent{`0},`0,System.Double)"/> methods, respectively.
            </para><para>
            If <b>RelaxedRange</b> is <c>false</c>, the maximum path cost for a movement is the
            absolute upper limit that determines all reachable nodes. The <see
            cref="T:Tektosyne.Graph.IGraphAgent`1"/> will not enter any node whose total path cost exceeds this
            limit, as determined by <see cref="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)"/>.
            </para><para>
            If <b>RelaxedRange</b> is <c>true</c>, the <b>IGraphAgent</b> can enter any node as the
            <em>final</em> step of a movement path, regardless of the actual <b>GetStepCost</b>
            result for that node, as long as the total path cost of all <em>previous</em> steps is
            less than the maximum path cost.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraphAgent`1.CanMakeStep(`0,`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> can move from one specified <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node to another neighboring node.</summary>
            <param name="source">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node where the move starts.</param>
            <param name="target">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node where the move ends. This node must be a neighbor of
            <paramref name="source"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> can move from <paramref name="source"/>
            to <paramref name="target"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> and <paramref name="target"/> are not valid neighboring <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes.</exception>
            <remarks><para>
            <b>CanMakeStep</b> should only consider whether the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> could
            move to the specified <paramref name="target"/> node <em>if</em> it were already placed
            on the specified <paramref name="source"/> node.
            </para><para>
            <b>CanMakeStep</b> should <em>not</em> consider whether the <b>IGraphAgent</b> could
            reach the <paramref name="source"/> or <paramref name="target"/> node from its actual
            present <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node, if any.
            </para><para>
            <b>CanMakeStep</b> should succeed if the <b>PlanarAgent</b> could occupy <paramref
            name="target"/> either temporarily or permanently. Use <see cref="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)"/> to impose
            additional restrictions on stopping a movement at specific nodes.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraphAgent`1.CanOccupy(`0)">
            <summary>
            Determines whether the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> can permanently occupy the specified
            <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</summary>
            <param name="target">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node to occupy.</param>
            <returns>
            <c>true</c> if the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> can permanently occupy <paramref
            name="target"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is not a valid <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</exception>
            <remarks><para>
            <b>CanOccupy</b> should consider whether the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> could
            <em>permanently</em> occupy the specified <paramref name="target"/> node. Assuming that
            the <b>IGraphAgent</b> has already reached <paramref name="target"/>, <b>CanOccupy</b>
            determines whether movement could stop at this node.
            </para><para>
            <b>CanOccupy</b> should <em>not</em> consider whether the <b>IGraphAgent</b> could
            temporarily occupy <paramref name="target"/> during a continuing multi-step movement, or
            whether <paramref name="target"/> could be reached at all from any other node.
            </para><para>
            The default implementation of <b>CanOccupy</b> should simply return <c>true</c>.
            Pathfinding algorithms always specify a <paramref name="target"/> node for which <see
            cref="M:Tektosyne.Graph.IGraphAgent`1.CanMakeStep(`0,`0)"/> has already succeeded, so you should return <c>false</c> only if
            you wish to specifically prevent the <b>IGraphAgent</b> from ending a path on the
            <paramref name="target"/> node.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)">
            <summary>
            Returns the cost for moving the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> from one specified <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node to another neighboring node.</summary>
            <param name="source">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node where the move starts.</param>
            <param name="target">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node where the move ends. This node must be a neighbor of
            <paramref name="source"/>.</param>
            <returns>
            The cost for moving the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> from <paramref name="source"/> to
            <paramref name="target"/>. This value cannot be less than the result of <see
            cref="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)"/> for the two nodes.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> and <paramref name="target"/> are not valid neighboring <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes.</exception>
            <remarks><para>
            <b>GetStepCost</b> should not attempt to verify that the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/>
            can actually move from the specified <paramref name="source"/> node to the specified
            <paramref name="target"/> node. Clients should call <see cref="M:Tektosyne.Graph.IGraphAgent`1.CanMakeStep(`0,`0)"/> to ensure
            this condition.
            </para><para>
            Moreover, <b>GetStepCost</b> should compute the movement cost under the assumption that
            the <b>IGraphAgent</b> was already placed on the <paramref name="source"/> node. The
            cost of reaching <paramref name="source"/> from its actual present <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> node, if any, should be ignored.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraphAgent`1.IsNearTarget(`0,`0,System.Double)">
            <summary>
            Determines whether the specified <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node is near enough to the
            specified target node to be considered equivalent.</summary>
            <param name="source">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node to consider.</param>
            <param name="target">
            The target node within the <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.</param>
            <param name="distance">
            The distance between <paramref name="source"/> and <paramref name="target"/>, according
            to <see cref="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)"/>. This argument may be negative to indicate that
            the <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> should calculate the distance.</param>
            <returns>
            <c>true</c> if a movement towards <paramref name="target"/> should be considered
            complete when <paramref name="source"/> is reached; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> and <paramref name="target"/> are not valid <see
            cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes.</exception>
            <remarks><para>
            A default implementation of <b>IsNearTarget</b> should merely check whether the
            specified <paramref name="source"/> and <paramref name="target"/> nodes are identical.
            This can be accomplished by comparing the specified or calculated <paramref
            name="distance"/> to zero.
            </para><para>
            More complex implementations might check for a maximum <paramref name="distance"/>, or
            examine application-specific properties of the <paramref name="source"/> and <paramref
            name="target"/> nodes.</para></remarks>
        </member>
        <member name="T:Tektosyne.Graph.IGraphPath`1">
            <summary>
            Represents the path of an <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> across an <see cref="T:Tektosyne.Graph.IGraph2D`1"/>.
            </summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks><para>
            <b>IGraphPath</b> tracks the path of an <see cref="T:Tektosyne.Graph.IGraphAgent`1"/> instance moving across
            an <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instance.
            </para><para>
            In addition to the actual movement path as a sequence of <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes,
            <b>IGraphPath</b> also provides the total cost of this path, and a method to determine the
            last path node that can be reached within a given maximum cost.</para></remarks>
        </member>
        <member name="P:Tektosyne.Graph.IGraphPath`1.Nodes">
            <summary>
            Gets a list of all <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes in the movement path.</summary>
            <value>
            An <see cref="T:System.Collections.Generic.IList`1"/> containing all <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes that constitute
            the movement path.</value>
            <remarks>
            <b>Nodes</b> should never return a null reference, but it may return an empty collection
            to signify invalid data.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.IGraphPath`1.TotalCost">
            <summary>
            Gets the total cost of the <see cref="T:Tektosyne.Graph.IGraphPath`1"/>.</summary>
            <value>
            The sum of the <see cref="M:Tektosyne.Graph.IGraphAgent`1.GetStepCost(`0,`0)"/> results for all <see
            cref="P:Tektosyne.Graph.IGraphPath`1.Nodes"/>.</value>
            <remarks>
            <b>TotalCost</b> may return a non-positive value to signify invalid data.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.IGraphPath`1.GetLastNode(System.Double)">
            <summary>
            Returns the last <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node in the <see cref="T:Tektosyne.Graph.IGraphPath`1"/> whose
            total cost does not exceed the specified maximum cost.</summary>
            <param name="maxCost">
            The maximum total path cost of the returned <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node.</param>
            <returns>
            The last <see cref="P:Tektosyne.Graph.IGraphPath`1.Nodes"/> element whose total path cost does not exceed the specified
            <paramref name="maxCost"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxCost"/> is zero or negative.</exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Tektosyne.Graph.IGraphPath`1"/> instance contains invalid data.</exception>
        </member>
        <member name="T:Tektosyne.Graph.NodeArc">
            <summary>
            Provides the tangential arc and distance of an <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node from a source
            node.</summary>
            <remarks>
            <b>NodeArc</b> encapsulates various data required by the <see cref="T:Tektosyne.Graph.Visibility`1"/>
            line-of-sight algorithm. The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node that defines the <see
            cref="T:Tektosyne.Graph.NodeArc"/> and the source node that defines the viewpoint are stored separately.
            </remarks>
        </member>
        <member name="M:Tektosyne.Graph.NodeArc.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Graph.NodeArc"/> class with the specified
            tangential arc and distance.</summary>
            <param name="start">
            The starting angle of the tangential arc from the source node, measured clockwise in
            radians from the x-axis, assuming that y-coordinates increase upward.</param>
            <param name="sweep">
            The positive sweep angle of the tangential arc from the source node, measured clockwise
            in radians, assuming that y-coordinates increase upward.</param>
            <param name="distance">
            The positive distance from the source node to the graph node that defines the tangential
            arc, in world coordinates.</param>
        </member>
        <member name="F:Tektosyne.Graph.NodeArc._visibleFraction">
            <summary>
            The visible fraction of the <see cref="T:Tektosyne.Graph.NodeArc"/>.</summary>
        </member>
        <member name="F:Tektosyne.Graph.NodeArc.Distance">
            <summary>
            The positive distance from the source node to the <see cref="T:Tektosyne.Graph.NodeArc"/>, in world
            coordinates.</summary>
            <remarks>
            <b>Distance</b> is measured from the <see cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldLocation(`0)"/> result
            for the source node to the nearest vertex of the <see
            cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldRegion(`0)"/> result for the graph node that defines the
            tangential arc.</remarks>
        </member>
        <member name="F:Tektosyne.Graph.NodeArc.Start">
            <summary>
            The starting angle of the <see cref="T:Tektosyne.Graph.NodeArc"/>, measured clockwise in radians from the
            x-axis, assuming that y-coordinates increase upward.</summary>
        </member>
        <member name="F:Tektosyne.Graph.NodeArc.Sweep">
            <summary>
            The positive sweep angle of the <see cref="T:Tektosyne.Graph.NodeArc"/>, measured clockwise in radians, 
            assuming that y-coordinates increase upward.</summary>
        </member>
        <member name="P:Tektosyne.Graph.NodeArc.VisibleFraction">
            <summary>
            Gets the visible fraction of the <see cref="T:Tektosyne.Graph.NodeArc"/>.</summary>
            <value>
            The fraction of the <see cref="F:Tektosyne.Graph.NodeArc.Sweep"/> angle that remains unobscured, from zero to one.
            The default is one, indicating that the entire <see cref="T:Tektosyne.Graph.NodeArc"/> is visible.</value>
            <remarks>
            <b>VisibleFraction</b> may be inaccurate if it is smaller than the current <see
            cref="P:Tektosyne.Graph.Visibility`1.Threshold"/>, as the <see cref="T:Tektosyne.Graph.Visibility`1"/> algorithm stops
            updating a <see cref="T:Tektosyne.Graph.NodeArc"/> as soon as it is considered obscured.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.NodeArc.IsObscured(Tektosyne.Graph.NodeArc)">
            <summary>
            Determines whether the current <see cref="T:Tektosyne.Graph.NodeArc"/> completely obscures the specified
            instance, or vice versa.</summary>
            <param name="arc">
            The <see cref="T:Tektosyne.Graph.NodeArc"/> to examine.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative obscuration of this instance and
            <paramref name="arc"/>, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term><description>
            <paramref name="arc"/> completely obscures this instance.</description>
            </item><item>
            <term>Zero</term><description>
            Neither instance completely obscures the other.</description>
            </item><item>
            <term>Greater than zero</term><description>
            This instance completely obscures <paramref name="arc"/>.</description>
            </item></list></returns>
            <remarks>
            <b>IsObscured</b> takes the <see cref="F:Tektosyne.Graph.NodeArc.Distance"/> of both instances into account to
            determine which instance obscures the other, if any.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.NodeArc.Obscure(System.Double@,System.Double@)">
            <summary>
            Obscures the specified tangential arc with the <see cref="T:Tektosyne.Graph.NodeArc"/>.</summary>
            <param name="start"><para>
            The starting angle of the tangential arc to obscure, in radians.
            </para><para>
            On return, possibly increased to the starting angle of the arc that remains visible.
            </para></param>
            <param name="sweep"><para>
            The positive sweep angle of the tangential arc to obscure, in radians.
            </para><para>
            On return, possibly decreased to the remaining sweep angle of the arc that remains
            visible, or to zero if the arc is completely obscured.</para></param>
            <remarks>
            <b>Obscure</b> assumes that the <see cref="T:Tektosyne.Graph.NodeArc"/> is closer to the common source
            node than the instance from which the specified <paramref name="start"/> and <paramref
            name="sweep"/> were initialized. Clients must ensure this condition holds.</remarks>
        </member>
        <member name="T:Tektosyne.Graph.PathNode`1">
            <summary>
            Provides a node for <see cref="T:Tektosyne.Graph.AStar`1"/> search paths.</summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks>
            <b>PathNode</b> associates an <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node with various other data
            required by the <see cref="T:Tektosyne.Graph.AStar`1"/> pathfinding algorithm.</remarks>
        </member>
        <member name="M:Tektosyne.Graph.PathNode`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Graph.PathNode`1"/> class.</summary>
            <param name="node">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node that the <see cref="T:Tektosyne.Graph.PathNode`1"/> represents.
            </param>
            <param name="children">
            The initial capacity of the <see cref="P:Tektosyne.Graph.PathNode`1.Children"/> collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="children"/> is less than zero.</exception>
            <remarks>
            The specified <paramref name="children"/> should equal the <see
            cref="P:Tektosyne.Graph.IGraph2D`1.Connectivity"/> of the <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instance on which the
            path search is performed, so as to avoid costly reallocations.</remarks>
        </member>
        <member name="F:Tektosyne.Graph.PathNode`1._children">
            <summary>
            A <see cref="T:Tektosyne.Collections.ListEx`1"/> containing all accessible direct neighbors of the current <see
            cref="F:Tektosyne.Graph.PathNode`1.Node"/> that were examined during the path search.</summary>
        </member>
        <member name="F:Tektosyne.Graph.PathNode`1._g">
            <summary>
            The total cost from the source node to the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/>.</summary>
        </member>
        <member name="F:Tektosyne.Graph.PathNode`1._h">
            <summary>
            The estimated total cost from the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> to the target node.
            </summary>
        </member>
        <member name="F:Tektosyne.Graph.PathNode`1._next">
            <summary>
            The next <see cref="T:Tektosyne.Graph.PathNode`1"/> in a linked list, or a null reference for the last
            list node or an unlinked node.</summary>
        </member>
        <member name="F:Tektosyne.Graph.PathNode`1._parent">
            <summary>
            The parent of the <see cref="T:Tektosyne.Graph.PathNode`1"/>.</summary>
        </member>
        <member name="P:Tektosyne.Graph.PathNode`1.Children">
            <summary>
            Gets a read-only view of the children of the <see cref="T:Tektosyne.Graph.PathNode`1"/>.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.ListEx`1"/> containing all accessible direct neighbors of the
            current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> that were examined during the path search.</value>
            <remarks>
            The <see cref="T:Tektosyne.Graph.AStar`1"/> pathfinding algorithm adds elements to the <see
            cref="P:Tektosyne.Graph.PathNode`1.Children"/> collection while expanding the current search path.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.PathNode`1.F">
            <summary>
            Gets the estimated total cost of the search path.</summary>
            <value>
            The sum of the <see cref="P:Tektosyne.Graph.PathNode`1.G"/> and <see cref="P:Tektosyne.Graph.PathNode`1.H"/> properties.</value>
            <remarks>
            <b>F</b> returns the estimated total cost of the path from source to target node that
            leads across the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/>.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.PathNode`1.G">
            <summary>
            Gets the total cost of the search path up to the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/>.</summary>
            <value>
            The total cost from the source node to the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/>.</value>
            <remarks><para>
            <b>G</b> is a known quantity that represents the total cost to move from the source node
            to the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/>, along the path defined by the chain of <see
            cref="P:Tektosyne.Graph.PathNode`1.Parent"/> values.
            </para><para>
            <b>G</b> is zero if the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> is the source node.</para></remarks>
        </member>
        <member name="P:Tektosyne.Graph.PathNode`1.H">
            <summary>
            Gets the estimated total cost of the search path that begins with the current <see
            cref="F:Tektosyne.Graph.PathNode`1.Node"/>.</summary>
            <value>
            The estimated total cost from the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> to the target node.</value>
            <remarks><para>
            <b>H</b> is an estimated quantity that represents the total cost to move from the
            current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> to the target node. This estimate is usually obtained by
            calling <see cref="M:Tektosyne.Graph.IGraph2D`1.GetDistance(`0,`0)"/>.
            </para><para>
            <b>H</b> is zero if the current <see cref="F:Tektosyne.Graph.PathNode`1.Node"/> is the target node.</para></remarks>
        </member>
        <member name="F:Tektosyne.Graph.PathNode`1.Node">
            <summary>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> node that the <see cref="T:Tektosyne.Graph.PathNode`1"/> represents.
            </summary>
            <remarks>
            The <b>Node</b> of the first <see cref="T:Tektosyne.Graph.PathNode`1"/> in a search path is the source
            node, and the <b>Node</b> of the last <see cref="T:Tektosyne.Graph.PathNode`1"/> is the target node,
            assuming that pathfinding was successful.</remarks>
        </member>
        <member name="P:Tektosyne.Graph.PathNode`1.Parent">
            <summary>
            Gets the parent of the <see cref="T:Tektosyne.Graph.PathNode`1"/>.</summary>
            <value>
            The preceding <see cref="T:Tektosyne.Graph.PathNode`1"/> in a path that starts at the source node, or a
            null reference for the source node itself.</value>
            <remarks>
            Tracing back through the <b>Parent</b> properties of all <see cref="T:Tektosyne.Graph.PathNode`1"/>
            objects eventually leads back to the source node.</remarks>
        </member>
        <member name="T:Tektosyne.Graph.Visibility`1">
            <summary>
            Provides a line-of-sight algorithm for <see cref="T:Tektosyne.Graph.IGraph2D`1"/> instances.</summary>
            <typeparam name="T">
            The type of all nodes in the graph. If <typeparamref name="T"/> is a reference type, nodes
            cannot be null references.</typeparam>
            <remarks><para>
            The <b>Visibility</b> algorithm starts on a specified starting node and recursively finds
            any adjacent nodes, up to a specified maximum world distance, whose line of sight is not
            blocked by any other examined nodes closer to the source. The opacity of a given node is
            determined by a specified <see cref="T:System.Predicate`1"/> delegate.
            </para><para>
            For each tested node, we consider its polygonal world region as defined by <see
            cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldRegion(`0)"/>. We draw the two tangents from the source node’s world
            location to the extreme points of that region. An opaque node blocks visibility, across the
            angle between its tangents, for any node whose nearest world region vertex is farther from
            the source than that of the opaque node. A node is considered visible as long as a certain
            fraction of its tangential arc remains unobscured, as defined by the <see
            cref="P:Tektosyne.Graph.Visibility`1.Threshold"/> property.
            </para><para>
            If an opaque node obscures only the middle part of another node’s tangential arc, but leaves
            partial arcs on both ends visible, only the greater of these partial arcs is considered
            visible whereas the smaller is considered obscured. This simplifies visibility testing,
            although very rarely visible nodes may be misclassified as obscured if the size of world
            regions varies greatly among <see cref="T:Tektosyne.Graph.IGraph2D`1"/> nodes.
            </para><para>
            Any graph node for which <see cref="M:Tektosyne.Graph.IGraph2D`1.GetWorldRegion(`0)"/> returns a null reference
            is assigned a default tangential arc, spanning one degree around its world location. This
            assumption allows the <b>Visibility</b> algorithm to process graphs that do not define world
            regions for all nodes, although the results are likely not very useful.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.Visibility`1.#ctor(Tektosyne.Graph.IGraph2D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.Graph.Visibility`1"/> class with the specified
            two-dimensional graph.</summary>
            <param name="graph">
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graph"/> is a null reference.</exception>
        </member>
        <member name="F:Tektosyne.Graph.Visibility`1.Graph">
            <summary>
            The <see cref="T:Tektosyne.Graph.IGraph2D`1"/> on which all searches are performed.</summary>
        </member>
        <member name="P:Tektosyne.Graph.Visibility`1.Nodes">
            <summary>
            Gets the list of all <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes that were reached by the last successful
            search.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.ListEx`1"/> containing all <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes that were
            reached by the last successful call to <see cref="M:Tektosyne.Graph.Visibility`1.FindVisible(System.Predicate{`0},`0,System.Double)"/>, not including the
            source node.</value>
            <remarks><para>
            <b>Nodes</b> never returns a null reference, but it returns an empty collection if the
            last call to <see cref="M:Tektosyne.Graph.Visibility`1.FindVisible(System.Predicate{`0},`0,System.Double)"/> returned <c>false</c>, or if the method has not
            yet been called.
            </para><para>
            <b>Nodes</b> contains those <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes in the <see cref="P:Tektosyne.Graph.Visibility`1.NodeArcs"/>
            collection whose <see cref="P:Tektosyne.Graph.NodeArc.VisibleFraction"/> equals or exceeds the current
            <see cref="P:Tektosyne.Graph.Visibility`1.Threshold"/>.</para></remarks>
        </member>
        <member name="P:Tektosyne.Graph.Visibility`1.NodeArcs">
            <summary>
            Gets the source distances, tangential arcs, and visible fractions for all <see
            cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes that were examined by the last search.</summary>
            <value>
            A read-only <see cref="T:Tektosyne.Collections.DictionaryEx`2"/> that maps all visited <see
            cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes to the corresponding <see cref="T:Tektosyne.Graph.NodeArc"/> instances.</value>
            <remarks><para>
            <b>NodeArcs</b> never returns a null reference, but it returns an empty collection if
            <see cref="M:Tektosyne.Graph.Visibility`1.FindVisible(System.Predicate{`0},`0,System.Double)"/> has not yet been called.
            </para><para>
            <b>NodeArcs</b> contains all <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes that were examined by <see
            cref="M:Tektosyne.Graph.Visibility`1.FindVisible(System.Predicate{`0},`0,System.Double)"/>, including partly or fully obscured nodes that were not added to
            the <see cref="P:Tektosyne.Graph.Visibility`1.Nodes"/> collection, but excluding the source node.</para></remarks>
        </member>
        <member name="P:Tektosyne.Graph.Visibility`1.Threshold">
            <summary>
            Gets or sets the visibility threshold for any <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> node, as a fraction of
            the sweep angle of its tangential arc.</summary>
            <value>
            The minimum <see cref="P:Tektosyne.Graph.NodeArc.VisibleFraction"/> for the <see cref="T:Tektosyne.Graph.NodeArc"/> of any
            <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> node that should be considered visible. The default is 1/3.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The property is set to a value that is less than zero or greater than one.</exception>
            <remarks><para>
            <b>Threshold</b> returns <see cref="F:System.Double.Epsilon"/> when set to zero. The effect is
            that a <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> node is considered visible while even the smallest fraction
            of its tangential arc remains unobscured.
            </para><para>
            Setting <b>Threshold</b> to one has the opposite effect. A <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> node is
            considered visible only if its entire tangential arc remains unobscured. Values between
            zero and one allow greater or lesser degrees of obscuration.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.Visibility`1.FindVisible(System.Predicate{`0},`0,System.Double)">
            <summary>
            Finds all contiguous <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes within the specified maximum world
            distance that are visible from the specified node.</summary>
            <param name="isOpaque">
            The <see cref="T:System.Predicate`1"/> delegate that determines whether a <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/>
            node blocks the line of sight.</param>
            <param name="source">
            The source node within <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> where the search starts.</param>
            <param name="distance"><para>
            The maximum world distance from the specified <paramref name="source"/> to search.
            </para><para>-or-</para><para>
            Zero to search the entire <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/>. The default is zero.</para></param>
            <returns>
            <c>true</c> if one or more nodes are visible from <paramref name="source"/> within the
            specified <paramref name="distance"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="isOpaque"/> or <paramref name="source"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="distance"/> is less than zero.</exception>
            <remarks><para>
            <b>FindVisible</b> returns <c>false</c> if the specified <paramref name="source"/> node
            is invalid, or if there are no visible nodes. Otherwise, <b>FindVisible</b> returns
            <c>true</c> and sets the <see cref="P:Tektosyne.Graph.Visibility`1.Nodes"/> and <see cref="P:Tektosyne.Graph.Visibility`1.NodeArcs"/> properties to
            the result of the visibility search.
            </para><para>
            All nodes within the specified maximum <paramref name="distance"/> are considered
            visible, except for those that are obscured by a node for which <paramref
            name="isOpaque"/> succeeds, as described for the <see cref="T:Tektosyne.Graph.Visibility`1"/> class.
            </para><para>
            If <paramref name="distance"/> is positive, any visible node must be reachable by a path
            that only includes other nodes within <paramref name="distance"/>; otherwise, it will
            not be found. This condition holds for any <see cref="T:Tektosyne.Geometry.PolygonGrid"/>, and for any <see
            cref="T:Tektosyne.Geometry.Subdivision"/> that was created from a Delaunay triangulation.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.Visibility`1.CreateNodeArc(`0)">
            <summary>
            Creates the <see cref="T:Tektosyne.Graph.NodeArc"/> for the specified target node.</summary>
            <param name="target">
            The <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> node whose <see cref="T:Tektosyne.Graph.NodeArc"/> to create.</param>
            <returns>
            A new <see cref="T:Tektosyne.Graph.NodeArc"/> for the specified <paramref name="target"/> node.</returns>
        </member>
        <member name="M:Tektosyne.Graph.Visibility`1.FindObscuringNodes(`0)">
            <summary>
            Expands the current collection of obscuring <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes with all neighbors
            of the specified node, within maximum world distance from the source node.</summary>
            <param name="node">
            The <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> node whose neighbors to examine.</param>
            <remarks><para>
            <b>FindObscuringNodes</b> recursively visits all directly connected nodes, and adds them
            to an internal collection of obscuring nodes if they are opaque. Nodes which are fully
            obscured by other obscuring nodes are removed from the collection.
            </para><para>
            <b>FindObscuringNodes</b> never revisits nodes that were already examined. All visited
            nodes are added to <see cref="P:Tektosyne.Graph.Visibility`1.NodeArcs"/> for later processing by <see
            cref="M:Tektosyne.Graph.Visibility`1.FindVisibleNodes"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Graph.Visibility`1.FindVisibleNodes">
            <summary>
            Expands the current visibility area with all visible <see cref="F:Tektosyne.Graph.Visibility`1.Graph"/> nodes, within
            maximum world distance from the source node.</summary>
            <remarks><para>
            <b>FindVisibleNodes</b> iterates over all <see cref="P:Tektosyne.Graph.Visibility`1.NodeArcs"/> found by <see
            cref="M:Tektosyne.Graph.Visibility`1.FindObscuringNodes(`0)"/>, and adjusts their <see cref="P:Tektosyne.Graph.NodeArc.VisibleFraction"/> 
            according to the collection of obscuring nodes also created by that method.
            </para><para>
            Any node whose <see cref="T:Tektosyne.Graph.NodeArc"/> remains unobscured by at least the current <see
            cref="P:Tektosyne.Graph.Visibility`1.Threshold"/> is added to the <see cref="P:Tektosyne.Graph.Visibility`1.Nodes"/> collection.</para></remarks>
        </member>
        <member name="T:Tektosyne.IO.IOUtility">
            <summary>
            Provides auxiliary methods for <b>System.IO</b>.</summary>
        </member>
        <member name="M:Tektosyne.IO.IOUtility.CopyAndReplace(System.String,System.String,System.String,System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>
            Copies the specified text file while recursively replacíng file inclusion tags with the
            referenced files.</summary>
            <param name="source">
            The text file to copy to <paramref name="target"/> while expanding any embedded file
            inclusion tags.</param>
            <param name="target">
            The text file to copy <paramref name="source"/> to, along with any included files.
            </param>
            <param name="fileGroup">
            The name of the match <see cref="T:System.Text.RegularExpressions.Group"/> within the <paramref name="includeSearch"/>
            pattern that identifies file names.</param>
            <param name="includeSearch">
            The <see cref="T:System.Text.RegularExpressions.Regex"/> search pattern describing the file inclusion tags embedded in
            <paramref name="source"/>.</param>
            <param name="includePrefix">
            The <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/> pattern to write to <paramref name="target"/> before
            file inclusion begins.</param>
            <param name="includeSuffix">
            The <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/> pattern to write to <paramref name="target"/> after file
            inclusion ends.</param>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="source"/>, <paramref name="target"/>, or <paramref name="fileGroup"/> is
            a null reference or an empty string.</exception>
            <remarks><para>
            <b>CopyAndReplace</b> reads the specified <paramref name="source"/> text file, line by
            line, and matches each line against the specified <paramref name="includeSearch"/>
            pattern. If no match is found, the line is simply copied to the specified <paramref
            name="target"/> file; otherwise, the specified <paramref name="fileGroup"/> within the
            <see cref="T:System.Text.RegularExpressions.Regex"/> match is assumed to indicate another text file whose contents will
            be read and copied to <paramref name="target"/> in the same fashion. The <paramref
            name="source"/> line that matched <paramref name="includeSearch"/> is discarded. Any
            existing file of the same name as <paramref name="target"/> is overwritten.
            </para><para>
            The <paramref name="includePrefix"/> and <paramref name="includeSuffix"/> parameters
            allow the creation of "marker lines" bracketing any included file content. In formalized
            input text such as XML or source code, these arguments might evaluate to some kind of
            comments in order to aid later reconstruction of the file inclusion process.
            </para><para>
            Either or both of the <paramref name="includePrefix"/> and <paramref
            name="includeSuffix"/> arguments may be null references or empty strings to suppress the
            creation of marker lines. Valid <paramref name="includePrefix"/> and <paramref
            name="includeSuffix"/> parameters are passed to the <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/> method
            of the specified <paramref name="includeSearch"/> pattern. They are applied to any line
            producing a non-empty <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)"/> result for <paramref
            name="includeSearch"/>, i.e. any line containing a file inclusion tag. This allows
            reusing the specified <paramref name="fileGroup"/> and any other named groups in
            <paramref name="includeSearch"/> to create marker lines containing the name of the
            included file and other variable data.</para></remarks>
            <example><para>
            Consider an XML file containing file inclusion tags of the following form:
            </para><code>
            &lt;include href="section.xml"/&gt;
            </code><para>
            We want to replace all such lines with the following sequence of lines:
            </para><code>
            &lt;!-- include_open "section.xml --&gt;
            </code><code>
            <em>...contents of "section.xml" follow here...</em>
            </code><code>
            &lt;!-- include_close "section.xml --&gt;
            </code><para>
            Assuming "input.xml" as the name of the input file and "output.xml" as the name of the
            output file, the following invocation of <b>CopyAndReplace</b> would achieve the desired
            result:
            </para><code>
            CopyAndReplace("input.xml", "output.xml", "file",
                new Regex(@"&lt;include href=""(?&lt;file&gt;[^""]*)""/&gt;"),
                @"&lt;!-- include_open ""${file}"" --&gt;",
                @"&lt;!-- include_close ""${file}"" --&gt;");
            </code><para>
            Note how the group identifier "file" is used both in the search expression and in the
            parameters for the marker lines.</para></example>
        </member>
        <member name="M:Tektosyne.IO.IOUtility.SearchDirectory(System.String,System.String)">
            <summary>
            Searches a single directory for a file matching the specified pattern.</summary>
            <param name="directory">
            The directory to search for <paramref name="pattern"/>.</param>
            <param name="pattern">
            The file name pattern to search for. The pattern may contain wildcards but no directory
            prefixes.</param>
            <returns><para>
            The first file name in <paramref name="directory"/> that matches the specified <paramref
            name="pattern"/>.
            </para><para>-or-</para><para>
            A null reference if no match was found or <paramref name="directory"/> does not exist.
            </para></returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="directory"/> or <paramref name="pattern"/> is a null reference or an
            empty string.</exception>
            <remarks><para>
            <b>SearchDirectory</b> prefixes the returned file name, if any, with the specified
            <paramref name="directory"/>.
            </para><para>
            The search <paramref name="pattern"/> may contain any wildcards accepted by the file
            system, as described in <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)"/>.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.IO.IOUtility.SearchDirectoryTree(System.String,System.String)">
            <summary>
            Searches a directory tree for a file matching the specified pattern.</summary>
            <param name="rootDirectory">
            The root directory of the directory tree to search for <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The file name pattern to search for. The pattern may contain wildcards but no directory
            prefixes.</param>
            <returns><para>
            The first file name in the directory tree starting with <paramref name="rootDirectory"/>
            that matches the specified <paramref name="pattern"/>.
            </para><para>-or-</para><para>
            A null reference if no match was found or <paramref name="rootDirectory"/> does not
            exist.</para></returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="rootDirectory"/> or <paramref name="pattern"/> is a null reference or an
            empty string.</exception>
            <remarks><para>
            <b>SearchDirectoryTree</b> performs a depth-first search starting with the specified
            <paramref name="rootDirectory"/>, but always checks all files in the present directory
            before descending another level.
            </para><para>
            <b>SearchDirectoryTree</b> prefixes the returned file name, if any, with the specified
            <paramref name="rootDirectory"/> and any intermediate subdirectories.
            </para><para>
            The search <paramref name="pattern"/> may contain any wildcards accepted by the file
            system, as described in <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)"/>.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.IO.IOUtility.RecursiveCopy(System.String,System.IO.StreamWriter,System.String,System.Text.RegularExpressions.Regex,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Copies the specified text file while recursively replacing file inclusion tags with the
            referenced files.</summary>
            <param name="source">
            The text file to copy to <paramref name="writer"/>, while expanding any embedded file
            inclusion tags.</param>
            <param name="writer">
            The <see cref="T:System.IO.StreamWriter"/> to copy <paramref name="source"/> to, along with any
            included files.</param>
            <param name="fileGroup">
            The name of the match <see cref="T:System.Text.RegularExpressions.Group"/> within the <paramref name="includeSearch"/>
            pattern that identifies file names.</param>
            <param name="includeSearch">
            The <see cref="T:System.Text.RegularExpressions.Regex"/> search pattern describing the file inclusion tags embedded in
            <paramref name="source"/>.</param>
            <param name="includePrefix">
            The <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/> pattern to write to <paramref name="writer"/> before
            file inclusion begins.</param>
            <param name="includeSuffix">
            The <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/> pattern to write to <paramref name="writer"/> after file
            inclusion ends.</param>
            <param name="openFiles">
            The names of all files which are still open and should be skipped when encountered again
            in a <paramref name="fileGroup"/> match.</param>
            <remarks><para>
            <b>RecursiveCopy</b> uses the <paramref name="openFiles"/> list to keep track of all
            files opened by previous recursion levels. Any inclusion tag specifying one of these
            files is silently ignored to prevent endless loops. The initial caller should supply an
            empty <see cref="T:System.Collections.Generic.List`1"/> for <paramref name="openFiles"/>, and will receive an
            empty <see cref="T:System.Collections.Generic.List`1"/> upon return.
            </para><para>
            Please refer to <see cref="M:Tektosyne.IO.IOUtility.CopyAndReplace(System.String,System.String,System.String,System.Text.RegularExpressions.Regex,System.String,System.String)"/> for details on other parameters.
            </para></remarks>
        </member>
        <member name="T:Tektosyne.IO.PathEx">
            <summary>
            Provides auxiliary methods for <b>System.IO.Path</b>.</summary>
        </member>
        <member name="M:Tektosyne.IO.PathEx.AddDirectorySeparator(System.String)">
            <summary>
            Adds a trailing directory separator character to the specified file path.</summary>
            <param name="path">
            The file path to which to add a trailing directory separator character.</param>
            <returns>
            The specified <paramref name="path"/>, with a single trailing <see
            cref="F:System.IO.Path.DirectorySeparatorChar"/> if neither this character nor <see
            cref="F:System.IO.Path.AltDirectorySeparatorChar"/> were already present.</returns>
            <remarks>
            <b>RemoveDirectorySeparator</b> returns a string containing a single <see
            cref="F:System.IO.Path.DirectorySeparatorChar"/> if the specified <paramref name="path"/> is a null
            reference or an empty string.</remarks>
        </member>
        <member name="M:Tektosyne.IO.PathEx.Equals(System.String,System.String)">
            <summary>
            Determines whether the two specified file paths are equivalent.</summary>
            <param name="firstPath">
            The first file path to compare.</param>
            <param name="secondPath">
            The second file path to compare.</param>
            <returns>
            <c>true</c> if the two file paths are equivalent, ignoring character case and directory
            separator variants.</returns>
            <remarks><para>
            <b>Equals</b> uses the following rules to test if the specified <paramref
            name="firstPath"/> equals the specified <paramref name="secondPath"/>:
            </para><list type="bullet"><item>
            Any trailing <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see
            cref="F:System.IO.Path.AltDirectorySeparatorChar"/> characters are removed before the comparison.
            </item><item>
            <paramref name="firstPath"/> and <paramref name="secondPath"/> must have the same
            length.
            </item><item>
            All characters that match either <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see
            cref="F:System.IO.Path.AltDirectorySeparatorChar"/> are considered equal.
            </item><item>
            All other characters are compared using the <see
            cref="F:System.StringComparison.OrdinalIgnoreCase"/> option.
            </item></list><para>
            If either argument is a null reference or an empty string, <b>Equals</b> returns
            <c>true</c> exactly if the other argument is also a null reference or an empty string;
            otherwise, <c>false</c>.</para></remarks>
        </member>
        <member name="M:Tektosyne.IO.PathEx.GetTempFileName(System.String)">
            <summary>
            Returns a unique name for a temporary file with the specified extension.</summary>
            <param name="extension">
            The new extension (with a leading period). Specify a null reference for no extension.
            </param>
            <returns>
            The full path to a uniquely named file with the specified <paramref name="extension"/>
            in the Windows directory for temporary files.</returns>
            <remarks><para>
            <b>GetTempFileName</b> performs the following steps to determine its return value:
            </para><list type="number"><item>
            Call <see cref="M:System.IO.Path.GetRandomFileName"/> to obtain a random file name without a
            directory prefix or extension suffix.
            </item><item>
            Prepend the directory for temporary files returned by <see cref="M:System.IO.Path.GetTempPath"/>.
            </item><item>
            Append the specified <paramref name="extension"/>.
            </item><item>
            Repeat from step #1 if a file already exists at that location; otherwise, return the
            resulting file name.
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.IO.PathEx.NormalizeDirectorySeparator(System.String)">
            <summary>
            Normalizes all directory separator characters in the specified file path.</summary>
            <param name="path">
            The file path whose directory separator characters to normalize.</param>
            <returns>
            The specified <paramref name="path"/>, in which all occurrences of <see
            cref="F:System.IO.Path.AltDirectorySeparatorChar"/> have been replaced with <see
            cref="F:System.IO.Path.DirectorySeparatorChar"/>.</returns>
            <remarks>
            <b>NormalizeDirectorySeparator</b> returns an empty string if the specified <paramref
            name="path"/> is a null reference or an empty string.</remarks>
        </member>
        <member name="M:Tektosyne.IO.PathEx.RemoveDirectorySeparator(System.String)">
            <summary>
            Removes any trailing directory separator characters from the specified file path.
            </summary>
            <param name="path">
            The file path whose trailing directory separator characters to remove.</param>
            <returns>
            The specified <paramref name="path"/>, without any trailing <see
            cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>
            characters.</returns>
            <remarks>
            <b>RemoveDirectorySeparator</b> returns an empty string if the specified <paramref
            name="path"/> is a null reference or an empty string.</remarks>
        </member>
        <member name="M:Tektosyne.IO.PathEx.Shorten(System.String,System.String)">
            <summary>
            Shortens the specified file path by the specified directory.</summary>
            <param name="path">
            The file path that may start with the specified <paramref name="directory"/> prefix.
            </param>
            <param name="directory">
            The directory prefix to remove from the specified <paramref name="path"/>.</param>
            <returns>
            The specified <paramref name="path"/> without the specified <paramref name="directory"/>
            prefix.</returns>
            <remarks><para>
            <b>Shorten</b> calls <see cref="M:Tektosyne.IO.PathEx.Equals(System.String,System.String)"/> to determine whether the beginning of the
            specified <paramref name="path"/> up to the length of <paramref name="directory"/>
            matches the specified <paramref name="directory"/>.
            </para><para>
            On success, <b>Shorten</b> returns an empty string if both arguments have the same
            length. Otherwise, if either the last character of <paramref name="directory"/> or the
            first character of the remaining part of <paramref name="path"/> matches
            <b>DirectorySeparatorChar</b> or <b>AltDirectorySeparatorChar</b>, <b>Shorten</b>
            returns the part of <paramref name="path"/> that follows this separator character.
            </para><para>
            <b>Shorten</b> returns the unmodified value of the specified <paramref name="path"/>
            under the following conditions:
            </para><list type="bullet"><item>
            <paramref name="path"/> is a null reference or an empty string.
            </item><item>
            <paramref name="directory"/> is a null reference or an empty string.
            </item><item>
            The length of <paramref name="directory"/> is greater than the length of <paramref
            name="path"/>.
            </item><item>
            <paramref name="path"/> does not start with <paramref name="directory"/>.
            </item><item>
            <paramref name="path"/> starts with <paramref name="directory"/> but the two parts are
            not separated by <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see
            cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</item><para>
            <b>Shorten</b> never returns a null reference. If the method were to return <paramref
            name="path"/> and this argument is a null reference, <b>Shorten</b> will return an empty
            string instead.</para></list></remarks>
        </member>
        <member name="T:Tektosyne.IO.RootedPath">
            <summary>
            Provides a file path that may be relative to a root folder.</summary>
            <remarks><para>
            <b>RootedPath</b> wraps a <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> and a file path that may be
            located below that root folder. The <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> and <see
            cref="P:Tektosyne.IO.RootedPath.RelativePath"/> properties return different transformations of the wrapped
            file path, suitable either for I/O operations or for text display.
            </para><para>
            <b>AbsolutePath</b> automatically prepends <b>RootFolder</b> if the file path is specified
            as a relative path, and <b>RelativePath</b> automatically strips <b>RootFolder</b> if the
            current <b>AbsolutePath</b> is located below that folder. <b>RootedPath</b> does not check
            whether any of the specified folders and paths actually exist in the file system.
            </para><para>
            <b>RootedPath</b> is an immutable reference type, just like <see cref="T:System.String"/>. The
            methods <see cref="M:Tektosyne.IO.RootedPath.Change(System.String)"/> and <see cref="M:Tektosyne.IO.RootedPath.Clear"/> return a new
            <b>RootedPath</b> instance, leaving the current instance unchanged.</para></remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.#ctor(Tektosyne.IO.RootedPath)">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.IO.RootedPath"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.IO.RootedPath"/> class that is a shallow copy
            of the specified instance.</summary>
            <param name="path">
            The <see cref="T:Tektosyne.IO.RootedPath"/> object whose property values should be copied to the new
            instance.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference.</exception>
            <remarks>
            This "copy constructor" does not need to perform a deep copy as all properties are
            backed by immutable <see cref="T:System.String"/> objects.</remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.IO.RootedPath"/> class with the specified root
            folder.</summary>
            <param name="rootFolder">
            The root folder for the <see cref="T:Tektosyne.IO.RootedPath"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="rootFolder"/> is not an absolute file path.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="rootFolder"/> is a null reference or an empty string.</exception>
            <remarks><para>
            If the specified <paramref name="rootFolder"/> does not end with a directory separator
            character, a single <see cref="F:System.IO.Path.DirectorySeparatorChar"/> is appended before the 
            value is assigned to the <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> property.
            </para><para>
            <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> is set to the same value as <paramref name="rootFolder"/>.
            This means that <see cref="P:Tektosyne.IO.RootedPath.RelativePath"/> will return an empty string.</para></remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.IO.RootedPath"/> class with the specified root
            folder and current file path.</summary>
            <param name="rootFolder">
            The root folder for the <see cref="T:Tektosyne.IO.RootedPath"/>.</param>
            <param name="filePath">
            An absolute or relative file path used to initialize the remaining properties. This
            argument may be a null reference or an empty string.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="rootFolder"/> is not an absolute file path.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="rootFolder"/> is a null reference or an empty string.</exception>
            <remarks><para>
            If the specified <paramref name="rootFolder"/> does not end with a directory separator
            character, a single <see cref="F:System.IO.Path.DirectorySeparatorChar"/> is appended before the 
            value is assigned to the <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> property.
            </para><para>
            If the specified <paramref name="filePath"/> is a null reference, an empty string, or an
            absolute file path that is equivalent to <paramref name="rootFolder"/>, <see
            cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> is initialized to <paramref name="rootFolder"/>. This means that
            <see cref="P:Tektosyne.IO.RootedPath.RelativePath"/> will return an empty string.
            </para><para>
            If <paramref name="filePath"/> is an absolute file path that is <em>not</em> equivalent
            to <paramref name="rootFolder"/>, <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> is initialized to <paramref
            name="filePath"/>. Otherwise, if <paramref name="filePath"/> is a relative file path,
            <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/>  is initialized to the combination of <paramref
            name="rootFolder"/> and <paramref name="filePath"/>. In either case, <see
            cref="P:Tektosyne.IO.RootedPath.RelativePath"/> will return <paramref name="filePath"/>.</para></remarks>
        </member>
        <member name="F:Tektosyne.IO.RootedPath.AbsolutePath">
            <summary>
            The absolute file path wrapped by the <see cref="T:Tektosyne.IO.RootedPath"/>.</summary>
            <remarks>
            <b>AbsolutePath</b> always returns a non-empty absolute file path.</remarks>
        </member>
        <member name="P:Tektosyne.IO.RootedPath.DirectoryName">
            <summary>
            Gets the directory information for <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/>.</summary>
            <value>
            The result of <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/> for <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/>.
            </value>
            <remarks>
            <b>DirectoryName</b> never returns a null reference or an empty string since <see
            cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> always contains a directory prefix.</remarks>
        </member>
        <member name="P:Tektosyne.IO.RootedPath.FileName">
            <summary>
            Gets the file name and extension of <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/>.</summary>
            <value>
            The result of <see cref="M:System.IO.Path.GetFileName(System.String)"/> for <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/>.</value>
            <remarks>
            <b>FileName</b> never returns a null reference, but it returns an empty string if <see
            cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> ends with a directory or volume separator character.</remarks>
        </member>
        <member name="P:Tektosyne.IO.RootedPath.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="T:Tektosyne.IO.RootedPath"/> wraps an empty relative
            path.</summary>
            <value>
            <c>true</c> if <see cref="P:Tektosyne.IO.RootedPath.RelativePath"/> is an empty string; otherwise, <c>false</c>.
            </value>
            <remarks>
            <b>IsEmpty</b> is <c>true</c> exactly if <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> and <see
            cref="F:Tektosyne.IO.RootedPath.RootFolder"/> contain equivalent file paths. That is the case if both properties
            contain either identical string values or different string values that evaluate to the
            same file path.</remarks>
        </member>
        <member name="P:Tektosyne.IO.RootedPath.RelativePath">
            <summary>
            Gets the relative path wrapped by the <see cref="T:Tektosyne.IO.RootedPath"/>.</summary>
            <value>
            The value of the <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> property, shortened by the value of the
            <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> property if the absolute path is located below that folder.
            </value>
            <remarks><para>
            <b>RelativePath</b> never returns a null reference, but it may return an empty string if
            <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> and <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> contain equivalent file paths.
            </para><para>
            <b>RelativePath</b> calls <see cref="M:Tektosyne.IO.PathEx.Shorten(System.String,System.String)"/> to determine its value; please
            see there for further details on the path shortening algorithm.</para></remarks>
        </member>
        <member name="F:Tektosyne.IO.RootedPath.RootFolder">
            <summary>
            The root folder for the <see cref="T:Tektosyne.IO.RootedPath"/>.</summary>
            <remarks>
            <b>RootFolder</b> always returns a non-empty absolute file path that ends with a
            directory separator character. <b>RootFolder</b> is stripped from the <see
            cref="P:Tektosyne.IO.RootedPath.RelativePath"/> if the <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> is located below that folder.
            </remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.Change(System.String)">
            <summary>
            Changes the file path wrapped by the <see cref="T:Tektosyne.IO.RootedPath"/>.</summary>
            <param name="filePath">
            The absolute or relative file path to wrap.</param>
            <returns>
            A new <see cref="T:Tektosyne.IO.RootedPath"/> instance with the same <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> as this
            instance, and that wraps the specified <paramref name="filePath"/>.</returns>
            <remarks>
            <b>Change</b> has the same effect as <see cref="M:Tektosyne.IO.RootedPath.Clear"/> if the specified <paramref
            name="filePath"/> is a null reference, an empty string, or an absolute file path that is
            equivalent to <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/>.</remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.Clear">
            <summary>
            Clears the file path wrapped by the <see cref="T:Tektosyne.IO.RootedPath"/>.</summary>
            <returns>
            A new <see cref="T:Tektosyne.IO.RootedPath"/> instance with the same <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> as this
            instance, and that wraps an empty file path.</returns>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.IO.RootedPath"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the results of <see cref="M:System.String.GetHashCode"/> for the <see
            cref="F:Tektosyne.IO.RootedPath.RootFolder"/> and <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.IO.RootedPath"/>.</summary>
            <returns>
            The value of the <see cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> property.</returns>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.op_Equality(Tektosyne.IO.RootedPath,Tektosyne.IO.RootedPath)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.IO.RootedPath"/> instances have the same value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.IO.RootedPath"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.IO.RootedPath"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.IO.RootedPath.Equals(Tektosyne.IO.RootedPath,Tektosyne.IO.RootedPath)"/> method to test
            the two <see cref="T:Tektosyne.IO.RootedPath"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.op_Inequality(Tektosyne.IO.RootedPath,Tektosyne.IO.RootedPath)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.IO.RootedPath"/> instances have different values.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.IO.RootedPath"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.IO.RootedPath"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.IO.RootedPath.Equals(Tektosyne.IO.RootedPath,Tektosyne.IO.RootedPath)"/> method to test
            the two <see cref="T:Tektosyne.IO.RootedPath"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tektosyne.IO.RootedPath"/>.</summary>
            <returns>
            A shallow copy of the <see cref="T:Tektosyne.IO.RootedPath"/>.</returns>
            <remarks>
            <b>Clone</b> invokes the "copy constructor", <see cref="M:Tektosyne.IO.RootedPath.#ctor(Tektosyne.IO.RootedPath)"/>, to
            create a shallow copy of the current instance.</remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.IO.RootedPath"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.IO.RootedPath"/> instance and a specified object, which
            must be a <see cref="T:Tektosyne.IO.RootedPath"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.IO.RootedPath"/> instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.IO.RootedPath"/> instance and
            its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.IO.RootedPath"/> instance,
            or an instance of a derived class, <b>Equals</b> invokes the strongly-typed <see
            cref="M:Tektosyne.IO.RootedPath.Equals(Tektosyne.IO.RootedPath)"/> overload to test the two instances for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.Equals(Tektosyne.IO.RootedPath)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.IO.RootedPath"/> have the same
            value.</summary>
            <param name="path">
            A <see cref="T:Tektosyne.IO.RootedPath"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="path"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.IO.RootedPath.RootFolder"/> and <see
            cref="F:Tektosyne.IO.RootedPath.AbsolutePath"/> properties of the two <see cref="T:Tektosyne.IO.RootedPath"/> instances to test
            for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.IO.RootedPath.Equals(Tektosyne.IO.RootedPath,Tektosyne.IO.RootedPath)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.IO.RootedPath"/> instances have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.IO.RootedPath"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.IO.RootedPath"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.IO.RootedPath.Equals(Tektosyne.IO.RootedPath)"/> overload to test
            the two <see cref="T:Tektosyne.IO.RootedPath"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.MathUtility">
            <summary>
            Provides auxiliary methods for <b>System.Math</b>.</summary>
        </member>
        <member name="M:Tektosyne.MathUtility.Compare(System.Double,System.Double,System.Double)">
            <overloads>
            Compares two specified floating-point numbers and returns an indication of their
            relative magnitudes, given the specified epsilon.</overloads>
            <summary>
            Compares two specified <see cref="T:System.Double"/> numbers and returns an indication of their
            relative magnitudes, given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:System.Double"/> number to compare.</param>
            <param name="b">
            The second <see cref="T:System.Double"/> number to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which <paramref name="a"/> and <paramref name="b"/>
            should be considered equal.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term><description><paramref name="a"/> is less than <paramref
            name="b"/> by more than <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Zero</term><description>
            The absolute difference between <paramref name="a"/> and <paramref name="b"/> is less
            than or equal to <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Greater than zero</term><description><paramref name="a"/> is greater than
            <paramref name="b"/> by more than <paramref name="epsilon"/>.</description>
            </item></list></returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Compare</b>
            does not check this condition.</remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.Compare(System.Single,System.Single,System.Single)">
            <summary>
            Compares two specified <see cref="T:System.Single"/> numbers and returns an indication of their
            relative magnitudes, given the specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:System.Single"/> number to compare.</param>
            <param name="b">
            The second <see cref="T:System.Single"/> number to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which <paramref name="a"/> and <paramref name="b"/>
            should be considered equal.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term><description><paramref name="a"/> is less than <paramref
            name="b"/> by more than <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Zero</term><description>
            The absolute difference between <paramref name="a"/> and <paramref name="b"/> is less
            than or equal to <paramref name="epsilon"/>.</description>
            </item><item>
            <term>Greater than zero</term><description><paramref name="a"/> is greater than
            <paramref name="b"/> by more than <paramref name="epsilon"/>.</description>
            </item></list></returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Compare</b>
            does not check this condition.</remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.Equals(System.Double,System.Double,System.Double)">
            <overloads>
            Determines whether two specified floating-point numbers are equal, given the specified
            epsilon.</overloads>
            <summary>
            Determines whether two specified <see cref="T:System.Double"/> numbers are equal, given the
            specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:System.Double"/> number to compare.</param>
            <param name="b">
            The second <see cref="T:System.Double"/> number to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which <paramref name="a"/> and <paramref name="b"/>
            should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between <paramref name="a"/> and <paramref
            name="b"/> is equal to or less than <paramref name="epsilon"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.Equals(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether two specified <see cref="T:System.Single"/> numbers are equal, given the
            specified epsilon.</summary>
            <param name="a">
            The first <see cref="T:System.Single"/> number to compare.</param>
            <param name="b">
            The second <see cref="T:System.Single"/> number to compare.</param>
            <param name="epsilon">
            The maximum absolute difference at which <paramref name="a"/> and <paramref name="b"/>
            should be considered equal.</param>
            <returns>
            <c>true</c> if the absolute difference between <paramref name="a"/> and <paramref
            name="b"/> is equal to or less than <paramref name="epsilon"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The specified <paramref name="epsilon"/> must be greater than zero, but <b>Equals</b>
            does not check this condition.</remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.IsPrime(System.Int32)">
            <overloads>
            Determines whether the specified number is prime.</overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Int32"/> number is prime.</summary>
            <param name="candidate">
            The <see cref="T:System.Int32"/> number to examine.</param>
            <returns>
            <c>true</c> if <paramref name="candidate"/> is prime; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="candidate"/> is equal to or less than zero.</exception>
            <remarks>
            <b>IsPrime</b> performs trial divisions of the specified <paramref name="candidate"/>
            against any number between two and its square root.</remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.IsPrime(System.UInt32)">
            <summary>
            Determines whether the specified <see cref="T:System.UInt32"/> number is prime.</summary>
            <param name="candidate">
            The <see cref="T:System.UInt32"/> number to examine.</param>
            <returns>
            <c>true</c> if <paramref name="candidate"/> is prime; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IsPrime</b> performs trial divisions of the specified <paramref name="candidate"/>
            against any number between two and its square root.</remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.Normalize(System.Double[])">
            <overloads>
            Normalizes the specified <see cref="T:System.Array"/> of non-negative numbers.</overloads>
            <summary>
            Normalizes the specified <see cref="T:System.Array"/> of non-negative <see cref="T:System.Double"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of non-negative <see cref="T:System.Double"/> numbers to normalize.
            </param>
            <returns>
            The sum of all values in <paramref name="array"/> before normalization.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="array"/> contains a negative value.</exception>
            <remarks><para>
            <b>Normalize</b> divides all values in <paramref name="array"/> by the sum of all
            values, thus normalizing the list of values to a partitioning of the standard interval
            [0,1].
            </para><para>
            If the sum of all values is zero, <b>Normalize</b> sets all values to the quotient
            1/<see cref="P:System.Array.Length"/> instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.Normalize(System.Single[])">
            <summary>
            Normalizes the specified <see cref="T:System.Array"/> of non-negative <see cref="T:System.Single"/>
            numbers.</summary>
            <param name="array">
            The <see cref="T:System.Array"/> of non-negative <see cref="T:System.Single"/> numbers to normalize.
            </param>
            <returns>
            The sum of all values in <paramref name="array"/> before normalization.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="array"/> contains a negative value.</exception>
            <remarks><para>
            <b>Normalize</b> divides all values in <paramref name="array"/> by the sum of all
            values, thus normalizing the list of values to a partitioning of the standard interval
            [0,1].
            </para><para>
            If the sum of all values is zero, <b>Normalize</b> sets all values to the quotient
            1/<see cref="P:System.Array.Length"/> instead.</para></remarks>
        </member>
        <member name="M:Tektosyne.MathUtility.Restrict(System.Decimal,System.Decimal,System.Decimal)">
            <overloads>
            Restricts the specified number to the specified range.</overloads>
            <summary>
            Restricts the specified <see cref="T:System.Decimal"/> number to the specified range.</summary>
            <param name="a">
            The <see cref="T:System.Decimal"/> number to restrict.</param>
            <param name="min">
            An <see cref="T:System.Decimal"/> number indicating the smallest permissible value.</param>
            <param name="max">
            An <see cref="T:System.Decimal"/> number indicating the greatest permissible value.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term><paramref name="min"/></term><description>
            <paramref name="a"/> is equal to or less than <paramref name="min"/>.</description>
            </item><item>
            <term><paramref name="a"/></term><description>
            <paramref name="a"/> is greater than <paramref name="min"/> and less than <paramref
            name="max"/>.</description>
            </item><item>
            <term><paramref name="max"/></term><description>
            <paramref name="a"/> is equal to or greater than <paramref name="max"/>.</description>
            </item></list></returns>
        </member>
        <member name="M:Tektosyne.MathUtility.Restrict(System.Double,System.Double,System.Double)">
            <summary>
            Restricts the specified <see cref="T:System.Double"/> number to the specified range.</summary>
            <param name="a">
            The <see cref="T:System.Double"/> number to restrict.</param>
            <param name="min">
            An <see cref="T:System.Double"/> number indicating the smallest permissible value.</param>
            <param name="max">
            An <see cref="T:System.Double"/> number indicating the greatest permissible value.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term><paramref name="min"/></term><description>
            <paramref name="a"/> is equal to or less than <paramref name="min"/>.</description>
            </item><item>
            <term><paramref name="a"/></term><description>
            <paramref name="a"/> is greater than <paramref name="min"/> and less than <paramref
            name="max"/>.</description>
            </item><item>
            <term><paramref name="max"/></term><description>
            <paramref name="a"/> is equal to or greater than <paramref name="max"/>.</description>
            </item></list></returns>
        </member>
        <member name="M:Tektosyne.MathUtility.Restrict(System.Single,System.Single,System.Single)">
            <summary>
            Restricts the specified <see cref="T:System.Single"/> number to the specified range.</summary>
            <param name="a">
            The <see cref="T:System.Single"/> number to restrict.</param>
            <param name="min">
            An <see cref="T:System.Single"/> number indicating the smallest permissible value.</param>
            <param name="max">
            An <see cref="T:System.Single"/> number indicating the greatest permissible value.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term><paramref name="min"/></term><description>
            <paramref name="a"/> is equal to or less than <paramref name="min"/>.</description>
            </item><item>
            <term><paramref name="a"/></term><description>
            <paramref name="a"/> is greater than <paramref name="min"/> and less than <paramref
            name="max"/>.</description>
            </item><item>
            <term><paramref name="max"/></term><description>
            <paramref name="a"/> is equal to or greater than <paramref name="max"/>.</description>
            </item></list></returns>
        </member>
        <member name="M:Tektosyne.MathUtility.Restrict(System.Int16,System.Int16,System.Int16)">
            <summary>
            Restricts the specified <see cref="T:System.Int16"/> number to the specified range.</summary>
            <param name="a">
            The <see cref="T:System.Int16"/> number to restrict.</param>
            <param name="min">
            An <see cref="T:System.Int16"/> number indicating the smallest permissible value.</param>
            <param name="max">
            An <see cref="T:System.Int16"/> number indicating the greatest permissible value.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term><paramref name="min"/></term><description>
            <paramref name="a"/> is equal to or less than <paramref name="min"/>.</description>
            </item><item>
            <term><paramref name="a"/></term><description>
            <paramref name="a"/> is greater than <paramref name="min"/> and less than <paramref
            name="max"/>.</description>
            </item><item>
            <term><paramref name="max"/></term><description>
            <paramref name="a"/> is equal to or greater than <paramref name="max"/>.</description>
            </item></list></returns>
        </member>
        <member name="M:Tektosyne.MathUtility.Restrict(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts the specified <see cref="T:System.Int32"/> number to the specified range.</summary>
            <param name="a">
            The <see cref="T:System.Int32"/> number to restrict.</param>
            <param name="min">
            An <see cref="T:System.Int32"/> number indicating the smallest permissible value.</param>
            <param name="max">
            An <see cref="T:System.Int32"/> number indicating the greatest permissible value.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term><paramref name="min"/></term><description>
            <paramref name="a"/> is equal to or less than <paramref name="min"/>.</description>
            </item><item>
            <term><paramref name="a"/></term><description>
            <paramref name="a"/> is greater than <paramref name="min"/> and less than <paramref
            name="max"/>.</description>
            </item><item>
            <term><paramref name="max"/></term><description>
            <paramref name="a"/> is equal to or greater than <paramref name="max"/>.</description>
            </item></list></returns>
        </member>
        <member name="M:Tektosyne.MathUtility.Restrict(System.Int64,System.Int64,System.Int64)">
            <summary>
            Restricts the specified <see cref="T:System.Int64"/> number to the specified range.</summary>
            <param name="a">
            The <see cref="T:System.Int64"/> number to restrict.</param>
            <param name="min">
            An <see cref="T:System.Int64"/> number indicating the smallest permissible value.</param>
            <param name="max">
            An <see cref="T:System.Int64"/> number indicating the greatest permissible value.</param>
            <returns><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term><paramref name="min"/></term><description>
            <paramref name="a"/> is equal to or less than <paramref name="min"/>.</description>
            </item><item>
            <term><paramref name="a"/></term><description>
            <paramref name="a"/> is greater than <paramref name="min"/> and less than <paramref
            name="max"/>.</description>
            </item><item>
            <term><paramref name="max"/></term><description>
            <paramref name="a"/> is equal to or greater than <paramref name="max"/>.</description>
            </item></list></returns>
        </member>
        <member name="T:Tektosyne.MersenneTwister">
            <summary>
            Provides a pseudo-random number generator.</summary>
            <remarks><para>
            <b>MersenneTwister</b> is an implementation of the random number generator MT19937,
            developed by Takuji Nishimura and Makoto Matsumoto. The various <see cref="T:System.Double"/>
            algorithms were added by Isaku Wada.
            </para><para>
            This C# implementation was created by Christoph Nahr, based on the above authors’ revised C
            implementation dating from 26 January 2002.
            </para><para>
            The following copyright statement is reproduced from the original C program, as required by
            the copyright conditions. The original C program containing this copyright statement is
            available at the <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">Mersenne
            Twister</a> home page.
            </para><para>
            <strong>Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura, All rights
            reserved.</strong>
            </para><para>
            Redistribution and use in source and binary forms, with or without modification, are
            permitted provided that the following conditions are met:
            </para><list type="number"><item>
            Redistributions of source code must retain the above copyright notice, this list of
            conditions and the following disclaimer.
            </item><item>
            Redistributions in binary form must reproduce the above copyright notice, this list of
            conditions and the following disclaimer in the documentation and/or other materials provided
            with the distribution.
            </item><item>
            The names of its contributors may not be used to endorse or promote products derived from
            this software without specific prior written permission.
            </item></list><para>
            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
            OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
            COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
            EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
            SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
            HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
            TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
            EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para></remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.MersenneTwister"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MersenneTwister"/> class, using a
            time-dependent default seed value.</summary>
            <remarks>
            The new instance of the <see cref="T:Tektosyne.MersenneTwister"/> class is initialized with the
            current value of the <see cref="P:System.Environment.TickCount"/> property of the <see
            cref="T:System.Environment"/> class.</remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MersenneTwister"/> class, using the
            specified seed value.</summary>
            <param name="seed">
            A <see cref="T:System.UInt32"/> value used to initialize the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Tektosyne.MersenneTwister.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MersenneTwister"/> class, using the
            specified array of initialization keys.</summary>
            <param name="keys">
            An <see cref="T:System.Array"/> of <see cref="T:System.UInt32"/> values used to initialize the
            pseudo-random number sequence.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="keys"/> is a null reference or an empty array.</exception>
        </member>
        <member name="F:Tektosyne.MersenneTwister.Default">
            <summary>
            A default-initialized <see cref="T:Tektosyne.MersenneTwister"/>.</summary>
            <remarks><para>
            <b>Default</b> is a read-only instance of the <see cref="T:Tektosyne.MersenneTwister"/> class that
            was created using a time-dependent default seed value.
            </para><note type="caution">
            The read-only instance returned by <b>Default</b> is <em>not</em> thread-safe because
            any call to a <see cref="M:Tektosyne.MersenneTwister.Next"/> method changes its internal state. Either provide your
            own synchronization or create separate instances when different threads need to access a
            <see cref="T:Tektosyne.MersenneTwister"/>.</note></remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.Next">
            <overloads>
            Returns a random <see cref="T:System.Int32"/> value.</overloads>
            <summary>
            Returns a non-negative random <see cref="T:System.Int32"/> value.</summary>
            <returns>
            A pseudo-random <see cref="T:System.Int32"/> value, greater than or equal to zero and less than
            or equal to <see cref="F:System.Int32.MaxValue"/>.</returns>
            <remarks>
            The <b>Next</b> methods have the same return type and similar (but closed) ranges as the
            <see cref="M:System.Random.Next"/> methods of the <see cref="T:System.Random"/> class.</remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.Next(System.Int32)">
            <summary>
            Returns a non-negative random <see cref="T:System.Int32"/> value within the specified upper
            bound.</summary>
            <param name="maxValue">
            The upper bound of the random number to be generated.</param>
            <returns>
            A pseudo-random <see cref="T:System.Int32"/> value, greater than or equal to zero and less than
            or equal to the specified <paramref name="maxValue"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than zero.</exception>
            <remarks>
            The <b>Next</b> methods have the same return type and similar (but closed) ranges as the
            <see cref="M:System.Random.Next"/> methods of the <see cref="T:System.Random"/> class.</remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random <see cref="T:System.Int32"/> value within the specified lower and upper bounds.
            </summary>
            <param name="minValue">
            The lower bound of the random number to be generated.</param>
            <param name="maxValue">
            The upper bound of the random number to be generated.</param>
            <returns>
            A pseudo-random <see cref="T:System.Int32"/> value, greater than or equal to <paramref
            name="minValue"/> and less than or equal to <paramref name="maxValue"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
            <remarks>
            The <b>Next</b> methods have the same return type and similar (but closed) ranges as the
            <see cref="M:System.Random.Next"/> methods of the <see cref="T:System.Random"/> class.</remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.NextDouble">
            <summary>
            Returns a random <see cref="T:System.Double"/> value in the half-open interval [0, 1).</summary>
            <returns>
            A pseudo-random <see cref="T:System.Double"/> value, greater than or equal to zero and less than
            one.</returns>
            <remarks>
            <b>NextDouble</b> has the same return type and the same range as the <see
            cref="M:System.Random.NextDouble"/> method of the <see cref="T:System.Random"/> class.</remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.NextDoubleClosed">
            <summary>
            Returns a random <see cref="T:System.Double"/> value in the closed interval [0, 1].</summary>
            <returns>
            A pseudo-random <see cref="T:System.Double"/> value, greater than or equal to zero and less than
            or equal to one.</returns>
        </member>
        <member name="M:Tektosyne.MersenneTwister.NextDoubleOpen">
            <summary>
            Returns a random <see cref="T:System.Double"/> value in the open interval (0, 1).</summary>
            <returns>
            A pseudo-random <see cref="T:System.Double"/> value, greater than zero and less than one.
            </returns>
        </member>
        <member name="M:Tektosyne.MersenneTwister.NextDouble53Bits">
            <summary>
            Returns a random <see cref="T:System.Double"/> value with a 53-bit resolution in the half-open
            interval [0, 1).</summary>
            <returns>
            A pseudo-random <see cref="T:System.Double"/> value with a 53-bit resolution, greater than or
            equal to zero and less than one.</returns>
            <remarks>
            <b>NextDouble53Bits</b> calls <see cref="M:Tektosyne.MersenneTwister.NextUnsigned"/> twice to compute its return
            value, taking 27 bits from the first result and 26 bits from the second result.
            </remarks>
        </member>
        <member name="M:Tektosyne.MersenneTwister.NextUnsigned">
            <summary>
            Returns a random <see cref="T:System.UInt32"/> value.</summary>
            <returns>
            A pseudo-random <see cref="T:System.UInt32"/> value, greater than or equal to zero and less than
            or equal to <see cref="F:System.UInt32.MaxValue"/>.</returns>
            <remarks>
            <b>NextUnsigned</b> is the basic random number generation method of the <see
            cref="T:Tektosyne.MersenneTwister"/> class. All other RNG methods call <b>NextUnsigned</b> to
            compute their return values.</remarks>
        </member>
        <member name="T:Tektosyne.MutableTuple">
            <summary>
            Provides static methods for creating <see cref="T:Tektosyne.MutableTuple"/> instances.</summary>
            <remarks>
            <b>MutableTuple</b> offers static <b>Create</b> methods for all <see cref="T:Tektosyne.MutableTuple"/>
            variants to allow their instantation without having to specify generic type arguments.
            </remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple.Create``2(``0,``1)">
            <summary>
            Creates a new <see cref="T:Tektosyne.MutableTuple`2"/>.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.MutableTuple`2"/> containing the specified <paramref name="item1"/>
            and <paramref name="item2"/>.</returns>
            <remarks>
            <b>Create</b> allows you to create a new <see cref="T:Tektosyne.MutableTuple`2"/> without
            having to explicitly specify its generic type arguments.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple.Create``3(``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:Tektosyne.MutableTuple`3"/>.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.MutableTuple`3"/> containing the specified <paramref
            name="item1"/>, <paramref name="item2"/>, and <paramref name="item3"/>.</returns>
            <remarks>
            <b>Create</b> allows you to create a new <see cref="T:Tektosyne.MutableTuple`3"/> without
            having to explicitly specify its generic type arguments.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a new <see cref="T:Tektosyne.MutableTuple`4"/>.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <typeparam name="T4">
            The type of the fourth component.</typeparam>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
            <param name="item4">
            The fourth component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.MutableTuple`4"/> containing the specified <paramref
            name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, and <paramref
            name="item4"/>.</returns>
            <remarks>
            <b>Create</b> allows you to create a new <see cref="T:Tektosyne.MutableTuple`4"/> without
            having to explicitly specify its generic type arguments.</remarks>
        </member>
        <member name="T:Tektosyne.MutableTuple`2">
            <summary>
            Provides a mutable tuple of two arbitrary objects.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <remarks>
            <b>MutableTuple</b> resembles a standard <see cref="T:System.Tuple`2"/> but provides public
            setters for all component properties. This allows using <b>MutableTuple</b> in scenarios
            such as two-way data binding using WPF controls.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`2"/> class.</overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`2"/> class with default
            properties.</summary>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`2"/> class with the
            specified components.</summary>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</param>
        </member>
        <member name="P:Tektosyne.MutableTuple`2.Item1">
            <summary>
            Gets or sets the first component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</summary>
            <value>
            The first component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</value>
        </member>
        <member name="P:Tektosyne.MutableTuple`2.Item2">
            <summary>
            Gets or sets the second component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</summary>
            <value>
            The second component of the <see cref="T:Tektosyne.MutableTuple`2"/>.</value>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.MutableTuple`2"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the results of <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)"/>
            for the <see cref="P:Tektosyne.MutableTuple`2.Item1"/> and <see cref="P:Tektosyne.MutableTuple`2.Item2"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.MutableTuple`2"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            <see cref="P:Tektosyne.MutableTuple`2.Item1"/> and <see cref="P:Tektosyne.MutableTuple`2.Item2"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.op_Equality(Tektosyne.MutableTuple{`0,`1},Tektosyne.MutableTuple{`0,`1})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`2"/> instances have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`2"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`2"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.MutableTuple`2.Equals(Tektosyne.MutableTuple{`0,`1},Tektosyne.MutableTuple{`0,`1})"/>
            method to test the two <see cref="T:Tektosyne.MutableTuple`2"/> instances for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.op_Inequality(Tektosyne.MutableTuple{`0,`1},Tektosyne.MutableTuple{`0,`1})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`2"/> instances have different
            values.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`2"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`2"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.MutableTuple`2.Equals(Tektosyne.MutableTuple{`0,`1},Tektosyne.MutableTuple{`0,`1})"/>
            method to test the two <see cref="T:Tektosyne.MutableTuple`2"/> instances for value inequality.
            </remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`2"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.MutableTuple`2"/> instance and a specified
            object, which must be a <see cref="T:Tektosyne.MutableTuple`2"/>, have the same value.
            </summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.MutableTuple`2"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.MutableTuple`2"/>
            instance and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.MutableTuple`2"/>
            instance, or an instance of a derived class, <b>Equals</b> invokes the strongly-typed
            <see cref="M:Tektosyne.MutableTuple`2.Equals(Tektosyne.MutableTuple{`0,`1})"/> overload to test the two instances for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.Equals(Tektosyne.MutableTuple{`0,`1})">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.MutableTuple`2"/> have
            the same value.</summary>
            <param name="tuple">
            A <see cref="T:Tektosyne.MutableTuple`2"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="tuple"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="P:Tektosyne.MutableTuple`2.Item1"/> and <see cref="P:Tektosyne.MutableTuple`2.Item2"/>
            properties of the two <see cref="T:Tektosyne.MutableTuple`2"/> instances to test for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`2.Equals(Tektosyne.MutableTuple{`0,`1},Tektosyne.MutableTuple{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.MutableTuple`2"/> instances have the
            same value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`2"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`2"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.MutableTuple`2.Equals(Tektosyne.MutableTuple{`0,`1})"/> overload
            to test the two <see cref="T:Tektosyne.MutableTuple`2"/> instances for value equality.
            </remarks>
        </member>
        <member name="T:Tektosyne.MutableTuple`3">
            <summary>
            Provides a mutable tuple of three arbitrary objects.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <remarks>
            <b>MutableTuple</b> resembles a standard <see cref="T:System.Tuple`3"/> but provides public
            setters for all component properties. This allows using <b>MutableTuple</b> in scenarios
            such as two-way data binding using WPF controls.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`3"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`3"/> class with
            default properties.</summary>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`3"/> class with the
            specified components.</summary>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</param>
        </member>
        <member name="P:Tektosyne.MutableTuple`3.Item1">
            <summary>
            Gets or sets the first component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</summary>
            <value>
            The first component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</value>
        </member>
        <member name="P:Tektosyne.MutableTuple`3.Item2">
            <summary>
            Gets or sets the second component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</summary>
            <value>
            The second component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</value>
        </member>
        <member name="P:Tektosyne.MutableTuple`3.Item3">
            <summary>
            Gets or sets the third component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</summary>
            <value>
            The third component of the <see cref="T:Tektosyne.MutableTuple`3"/>.</value>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.MutableTuple`3"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the results of <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)"/>
            for the <see cref="P:Tektosyne.MutableTuple`3.Item1"/>, <see cref="P:Tektosyne.MutableTuple`3.Item2"/>, and <see cref="P:Tektosyne.MutableTuple`3.Item3"/> properties.
            </remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.MutableTuple`3"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            <see cref="P:Tektosyne.MutableTuple`3.Item1"/>, <see cref="P:Tektosyne.MutableTuple`3.Item2"/>, and <see cref="P:Tektosyne.MutableTuple`3.Item3"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.op_Equality(Tektosyne.MutableTuple{`0,`1,`2},Tektosyne.MutableTuple{`0,`1,`2})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`3"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`3"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`3"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.MutableTuple`3.Equals(Tektosyne.MutableTuple{`0,`1,`2},Tektosyne.MutableTuple{`0,`1,`2})"/> method to test the two <see cref="T:Tektosyne.MutableTuple`3"/>
            instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.op_Inequality(Tektosyne.MutableTuple{`0,`1,`2},Tektosyne.MutableTuple{`0,`1,`2})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`3"/> instances have different
            values.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`3"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`3"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.MutableTuple`3.Equals(Tektosyne.MutableTuple{`0,`1,`2},Tektosyne.MutableTuple{`0,`1,`2})"/> method to test the two <see cref="T:Tektosyne.MutableTuple`3"/>
            instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`3"/> instances have the same
            value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.MutableTuple`3"/> instance and a specified
            object, which must be a <see cref="T:Tektosyne.MutableTuple`3"/>, have the same value.
            </summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.MutableTuple`3"/>
            instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.MutableTuple`3"/>
            instance and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.MutableTuple`3"/>
            instance, or an instance of a derived class, <b>Equals</b> invokes the strongly-typed
            <see cref="M:Tektosyne.MutableTuple`3.Equals(Tektosyne.MutableTuple{`0,`1,`2})"/> overload to test the two instances for
            value equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.Equals(Tektosyne.MutableTuple{`0,`1,`2})">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.MutableTuple`3"/>
            have the same value.</summary>
            <param name="tuple">
            A <see cref="T:Tektosyne.MutableTuple`3"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="tuple"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="P:Tektosyne.MutableTuple`3.Item1"/>, <see cref="P:Tektosyne.MutableTuple`3.Item2"/>, and
            <see cref="P:Tektosyne.MutableTuple`3.Item3"/> properties of the two <see cref="T:Tektosyne.MutableTuple`3"/> instances
            to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`3.Equals(Tektosyne.MutableTuple{`0,`1,`2},Tektosyne.MutableTuple{`0,`1,`2})">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.MutableTuple`3"/> instances have the
            same value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`3"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`3"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.MutableTuple`3.Equals(Tektosyne.MutableTuple{`0,`1,`2})"/>
            overload to test the two <see cref="T:Tektosyne.MutableTuple`3"/> instances for value
            equality.</remarks>
        </member>
        <member name="T:Tektosyne.MutableTuple`4">
            <summary>
            Provides a mutable tuple of four arbitrary objects.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <typeparam name="T4">
            The type of the fourth component.</typeparam>
            <remarks>
            <b>MutableTuple</b> resembles a standard <see cref="T:System.Tuple`4"/> but provides
            public setters for all component properties. This allows using <b>MutableTuple</b> in
            scenarios such as two-way data binding using WPF controls.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`4"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`4"/> class with
            default properties.</summary>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.MutableTuple`4"/> class with the
            specified components.</summary>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
            <param name="item4">
            The fourth component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</param>
        </member>
        <member name="P:Tektosyne.MutableTuple`4.Item1">
            <summary>
            Gets or sets the first component of the <see cref="T:Tektosyne.MutableTuple`4"/>.
            </summary>
            <value>
            The first component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</value>
        </member>
        <member name="P:Tektosyne.MutableTuple`4.Item2">
            <summary>
            Gets or sets the second component of the <see cref="T:Tektosyne.MutableTuple`4"/>.
            </summary>
            <value>
            The second component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</value>
        </member>
        <member name="P:Tektosyne.MutableTuple`4.Item3">
            <summary>
            Gets or sets the third component of the <see cref="T:Tektosyne.MutableTuple`4"/>.
            </summary>
            <value>
            The third component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</value>
        </member>
        <member name="P:Tektosyne.MutableTuple`4.Item4">
            <summary>
            Gets or sets the third component of the <see cref="T:Tektosyne.MutableTuple`4"/>.
            </summary>
            <value>
            The fourth component of the <see cref="T:Tektosyne.MutableTuple`4"/>.</value>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.MutableTuple`4"/> instance.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the results of <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)"/>
            for the <see cref="P:Tektosyne.MutableTuple`4.Item1"/>, <see cref="P:Tektosyne.MutableTuple`4.Item2"/>, <see cref="P:Tektosyne.MutableTuple`4.Item3"/>, and <see
            cref="P:Tektosyne.MutableTuple`4.Item4"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see
            cref="T:Tektosyne.MutableTuple`4"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            <see cref="P:Tektosyne.MutableTuple`4.Item1"/>, <see cref="P:Tektosyne.MutableTuple`4.Item2"/>, <see cref="P:Tektosyne.MutableTuple`4.Item3"/>, and <see cref="P:Tektosyne.MutableTuple`4.Item4"/>
            properties.</returns>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.op_Equality(Tektosyne.MutableTuple{`0,`1,`2,`3},Tektosyne.MutableTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`4"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`4"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`4"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.MutableTuple`4.Equals(Tektosyne.MutableTuple{`0,`1,`2,`3},Tektosyne.MutableTuple{`0,`1,`2,`3})"/> method to test the two <see
            cref="T:Tektosyne.MutableTuple`4"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.op_Inequality(Tektosyne.MutableTuple{`0,`1,`2,`3},Tektosyne.MutableTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`4"/> instances have different
            values.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`4"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`4"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.MutableTuple`4.Equals(Tektosyne.MutableTuple{`0,`1,`2,`3},Tektosyne.MutableTuple{`0,`1,`2,`3})"/> method to test the two <see
            cref="T:Tektosyne.MutableTuple`4"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.MutableTuple`4"/> instances have the same
            value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.MutableTuple`4"/> instance and a specified
            object, which must be a <see cref="T:Tektosyne.MutableTuple`4"/>, have the same value.
            </summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.MutableTuple`4"/>
            instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.MutableTuple`4"/>
            instance and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see
            cref="T:Tektosyne.MutableTuple`4"/> instance, or an instance of a derived class,
            <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.MutableTuple`4.Equals(Tektosyne.MutableTuple{`0,`1,`2,`3})"/>
            overload to test the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.Equals(Tektosyne.MutableTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.MutableTuple`4"/>
            have the same value.</summary>
            <param name="tuple">
            A <see cref="T:Tektosyne.MutableTuple`4"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="tuple"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="P:Tektosyne.MutableTuple`4.Item1"/>, <see cref="P:Tektosyne.MutableTuple`4.Item2"/>, <see
            cref="P:Tektosyne.MutableTuple`4.Item3"/>, and <see cref="P:Tektosyne.MutableTuple`4.Item4"/> properties of the two <see
            cref="T:Tektosyne.MutableTuple`4"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.MutableTuple`4.Equals(Tektosyne.MutableTuple{`0,`1,`2,`3},Tektosyne.MutableTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.MutableTuple`4"/> instances have
            the same value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.MutableTuple`4"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.MutableTuple`4"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.MutableTuple`4.Equals(Tektosyne.MutableTuple{`0,`1,`2,`3})"/>
            overload to test the two <see cref="T:Tektosyne.MutableTuple`4"/> instances for value
            equality.</remarks>
        </member>
        <member name="T:Tektosyne.NaturalString">
            <summary>
            Provides a <see cref="T:System.String"/> with implicit natural sorting, using the sorting rules of
            the <see cref="F:System.StringComparison.CurrentCulture"/>.</summary>
            <remarks><para>
            <b>NaturalString</b> is an immmutable structure that relies on the <see
            cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String)"/> method to provide implicit natural
            sorting for a wrapped <see cref="T:System.String"/>, using the sorting rules of the <see
            cref="F:System.StringComparison.CurrentCulture"/>.
            </para><para>
            Use this structure when specifying an explicit <see cref="T:System.String"/> sorter is inconvenient.
            A similar structure, <see cref="T:Tektosyne.OrdinalString"/>, provides implicit natural sorting with
            <see cref="F:System.StringComparison.Ordinal"/> sorting rules.</para></remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.NaturalString"/> structure with the
            specified <see cref="T:System.String"/> value.</summary>
            <param name="value">
            The <see cref="T:System.String"/> value of the <see cref="T:Tektosyne.NaturalString"/>.</param>
        </member>
        <member name="F:Tektosyne.NaturalString.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.NaturalString"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.NaturalString"/> instance that was created with the
            default constructor.</remarks>
        </member>
        <member name="F:Tektosyne.NaturalString.Value">
            <summary>
            The <see cref="T:System.String"/> value of the <see cref="T:Tektosyne.NaturalString"/>.</summary>
            <remarks>
            <b>Value</b> may be a null reference or an empty string.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.GetHashCode">
            <summary>
            Returns the hash code for this instance of <see cref="T:Tektosyne.NaturalString"/>.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code for the current <see cref="T:Tektosyne.NaturalString"/>.</returns>
            <remarks>
            <b>GetHashCode</b> returns the result of <see cref="M:System.String.GetHashCode"/> for the
            current <see cref="F:Tektosyne.NaturalString.Value"/>, if not a null reference; otherwise, zero.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.NaturalString"/>.
            </summary>
            <returns>
            The result of the <see cref="M:Tektosyne.StringUtility.Validate(System.String)"/> for the value of the <see
            cref="F:Tektosyne.NaturalString.Value"/> property.</returns>
        </member>
        <member name="M:Tektosyne.NaturalString.op_Equality(Tektosyne.NaturalString,Tektosyne.NaturalString)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.NaturalString"/> objects have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.NaturalString.Equals(Tektosyne.NaturalString,Tektosyne.NaturalString)"/> method to
            test the two <see cref="T:Tektosyne.NaturalString"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.op_Inequality(Tektosyne.NaturalString,Tektosyne.NaturalString)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.NaturalString"/> objects have different values.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.NaturalString.Equals(Tektosyne.NaturalString,Tektosyne.NaturalString)"/> method to
            test the two <see cref="T:Tektosyne.NaturalString"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.op_GreaterThan(Tektosyne.NaturalString,Tektosyne.NaturalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.NaturalString"/> is greater than another
            specified <see cref="T:Tektosyne.NaturalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is greater than the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.NaturalString.CompareTo(Tektosyne.NaturalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.NaturalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.op_LessThan(Tektosyne.NaturalString,Tektosyne.NaturalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.NaturalString"/> is less than another
            specified <see cref="T:Tektosyne.NaturalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is less than the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.NaturalString.CompareTo(Tektosyne.NaturalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.NaturalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.op_GreaterThanOrEqual(Tektosyne.NaturalString,Tektosyne.NaturalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.NaturalString"/> is greater than or equal to
            another specified <see cref="T:Tektosyne.NaturalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is greater than or equal to the value
            of <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.NaturalString.CompareTo(Tektosyne.NaturalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.NaturalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.op_LessThanOrEqual(Tektosyne.NaturalString,Tektosyne.NaturalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.NaturalString"/> is less than or equal to
            another specified <see cref="T:Tektosyne.NaturalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is less than or equal to the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.NaturalString.CompareTo(Tektosyne.NaturalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.NaturalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.op_Implicit(System.String)~Tektosyne.NaturalString">
            <summary>
            Converts a <see cref="T:System.String"/> to the equivalent <see cref="T:Tektosyne.NaturalString"/>.</summary>
            <param name="value">
            The <see cref="T:System.String"/> to wrap in an <see cref="T:Tektosyne.NaturalString"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.NaturalString"/> wrapping the specified <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.NaturalString.op_Implicit(Tektosyne.NaturalString)~System.String">
            <summary>
            Converts a <see cref="T:Tektosyne.NaturalString"/> to the equivalent <see cref="T:System.String"/>.</summary>
            <param name="natural">
            The <see cref="T:Tektosyne.NaturalString"/> instance whose <see cref="F:Tektosyne.NaturalString.Value"/> property to extract.
            </param>
            <returns>
            The value of the <see cref="F:Tektosyne.NaturalString.Value"/> property of the specified <paramref
            name="natural"/> instance.</returns>
        </member>
        <member name="M:Tektosyne.NaturalString.System#IComparable#CompareTo(System.Object)">
            <overloads>
            Compares two <see cref="T:Tektosyne.NaturalString"/> objects and returns an indication of their
            relative values.</overloads>
            <summary>
            Compares this instance of <see cref="T:Tektosyne.NaturalString"/> and a specified object, which must
            be a <see cref="T:Tektosyne.NaturalString"/>, and returns an indication of their relative values.
            </summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this instance of <see cref="T:Tektosyne.NaturalString"/>.
            </param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of this instance and
            <paramref name="obj"/>, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description>The <see cref="F:Tektosyne.NaturalString.Value"/> property of this instance is less than that of
            <paramref name="obj"/>.</description>
            </item><item>
            <term>Zero</term>
            <description>The <see cref="F:Tektosyne.NaturalString.Value"/> property of this instance equals that of <paramref
            name="obj"/>.</description>
            </item><item>
            <term>Greater than zero</term><description><para>
            The <see cref="F:Tektosyne.NaturalString.Value"/> property of this instance is greater than that of <paramref
            name="obj"/>.
            </para><para>-or-</para><para>
            <paramref name="obj"/> is a null reference.</para></description>
            </item></list></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is neither a <see cref="T:Tektosyne.NaturalString"/> nor a null reference.
            </exception>
            <remarks><para>
            The specified <paramref name="obj"/> must be either a null reference or an instance of
            <b>NaturalString</b>.
            </para><para>
            <b>CompareTo</b> determines the relative order of the two instances by calling <see
            cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String)"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.CompareTo(Tektosyne.NaturalString)">
            <summary>
            Compares this instance and a specified <see cref="T:Tektosyne.NaturalString"/> and returns an
            indication of their relative values.</summary>
            <param name="natural">
            A <see cref="T:Tektosyne.NaturalString"/> to compare to this instance.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of this instance and
            <paramref name="natural"/>, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description>The <see cref="F:Tektosyne.NaturalString.Value"/> property of this instance is less than that of
            <paramref name="natural"/>.</description>
            </item><item>
            <term>Zero</term>
            <description>The <see cref="F:Tektosyne.NaturalString.Value"/> property of this instance equals that of <paramref
            name="natural"/>.</description>
            </item><item>
            <term>Greater than zero</term><description>
            The <see cref="F:Tektosyne.NaturalString.Value"/> property of this instance is greater than that of <paramref
            name="natural"/>.</description>
            </item></list></returns>
            <remarks>
            <b>CompareTo</b> determines the relative order of the two instances by calling <see
            cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String)"/>, using the sorting rules of the <see
            cref="F:System.StringComparison.CurrentCulture"/>.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.NaturalString"/> objects have the same value.
            </overloads>
            <summary>
            Determines whether this instance of <see cref="T:Tektosyne.NaturalString"/> and a specified object,
            which must be a <see cref="T:Tektosyne.NaturalString"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this instance of <see cref="T:Tektosyne.NaturalString"/>.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.NaturalString"/> instance
            and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.NaturalString"/> instance,
            <b>Equals</b> calls <see cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String)"/> to test
            the <see cref="F:Tektosyne.NaturalString.Value"/> properties of the two <see cref="T:Tektosyne.NaturalString"/> instances for
            value equality.</remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.Equals(Tektosyne.NaturalString)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.NaturalString"/> have the
            same value.</summary>
            <param name="natural">
            A <see cref="T:Tektosyne.NaturalString"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="natural"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String)"/> to test the <see
            cref="F:Tektosyne.NaturalString.Value"/> properties of the two <see cref="T:Tektosyne.NaturalString"/> instances for value
            equality, using the sorting rules of the <see cref="F:System.StringComparison.CurrentCulture"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.NaturalString.Equals(Tektosyne.NaturalString,Tektosyne.NaturalString)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.NaturalString"/> objects have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.NaturalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String)"/> to test the <see
            cref="F:Tektosyne.NaturalString.Value"/> properties of the two <see cref="T:Tektosyne.NaturalString"/> instances for value
            equality, using the sorting rules of the <see cref="F:System.StringComparison.CurrentCulture"/>.
            </remarks>
        </member>
        <member name="T:Tektosyne.OrdinalString">
            <summary>
            Provides a <see cref="T:System.String"/> with implicit natural sorting, using <see
            cref="F:System.StringComparison.Ordinal"/> sorting rules.</summary>
            <remarks><para>
            <b>OrdinalString</b> is an immmutable structure that relies on the <see
            cref="M:Tektosyne.StringUtility.CompareOrdinal(System.String,System.String)"/> method to provide implicit natural sorting for a
            wrapped <see cref="T:System.String"/>, using <see cref="F:System.StringComparison.Ordinal"/> sorting rules.
            </para><para>
            Use this structure when specifying an explicit <see cref="T:System.String"/> sorter is inconvenient.
            A similar structure, <see cref="T:Tektosyne.NaturalString"/>, provides implicit natural sorting with the
            sorting rules of the <see cref="F:System.StringComparison.CurrentCulture"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.OrdinalString"/> structure with the
            specified <see cref="T:System.String"/> value.</summary>
            <param name="value">
            The <see cref="T:System.String"/> value of the <see cref="T:Tektosyne.OrdinalString"/>.</param>
        </member>
        <member name="F:Tektosyne.OrdinalString.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.OrdinalString"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.OrdinalString"/> instance that was created with the
            default constructor.</remarks>
        </member>
        <member name="F:Tektosyne.OrdinalString.Value">
            <summary>
            The <see cref="T:System.String"/> value of the <see cref="T:Tektosyne.OrdinalString"/>.</summary>
            <remarks>
            <b>Value</b> may be a null reference or an empty string.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.GetHashCode">
            <summary>
            Returns the hash code for this instance of <see cref="T:Tektosyne.OrdinalString"/>.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code for the current <see cref="T:Tektosyne.OrdinalString"/>.</returns>
            <remarks>
            <b>GetHashCode</b> returns the result of <see cref="M:System.String.GetHashCode"/> for the
            current <see cref="F:Tektosyne.OrdinalString.Value"/>, if not a null reference; otherwise, zero.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.OrdinalString"/>.
            </summary>
            <returns>
            The result of the <see cref="M:Tektosyne.StringUtility.Validate(System.String)"/> for the value of the <see
            cref="F:Tektosyne.OrdinalString.Value"/> property.</returns>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_Equality(Tektosyne.OrdinalString,Tektosyne.OrdinalString)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.OrdinalString"/> objects have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.OrdinalString.Equals(Tektosyne.OrdinalString,Tektosyne.OrdinalString)"/> method to
            test the two <see cref="T:Tektosyne.OrdinalString"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_Inequality(Tektosyne.OrdinalString,Tektosyne.OrdinalString)">
            <summary>
            Determines whether two <see cref="T:Tektosyne.OrdinalString"/> objects have different values.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.OrdinalString.Equals(Tektosyne.OrdinalString,Tektosyne.OrdinalString)"/> method to
            test the two <see cref="T:Tektosyne.OrdinalString"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_GreaterThan(Tektosyne.OrdinalString,Tektosyne.OrdinalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.OrdinalString"/> is greater than another
            specified <see cref="T:Tektosyne.OrdinalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is greater than the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.OrdinalString.CompareTo(Tektosyne.OrdinalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.OrdinalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_LessThan(Tektosyne.OrdinalString,Tektosyne.OrdinalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.OrdinalString"/> is less than another
            specified <see cref="T:Tektosyne.OrdinalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is less than the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.OrdinalString.CompareTo(Tektosyne.OrdinalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.OrdinalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_GreaterThanOrEqual(Tektosyne.OrdinalString,Tektosyne.OrdinalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.OrdinalString"/> is greater than or equal to
            another specified <see cref="T:Tektosyne.OrdinalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is greater than or equal to the value
            of <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.OrdinalString.CompareTo(Tektosyne.OrdinalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.OrdinalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_LessThanOrEqual(Tektosyne.OrdinalString,Tektosyne.OrdinalString)">
            <summary>
            Determines whether a specified <see cref="T:Tektosyne.OrdinalString"/> is less than or equal to
            another specified <see cref="T:Tektosyne.OrdinalString"/>.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is less than or equal to the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.OrdinalString.CompareTo(Tektosyne.OrdinalString)"/> method to determine the
            relative values of the two <see cref="T:Tektosyne.OrdinalString"/> instances.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_Implicit(System.String)~Tektosyne.OrdinalString">
            <summary>
            Converts a <see cref="T:System.String"/> to the equivalent <see cref="T:Tektosyne.OrdinalString"/>.</summary>
            <param name="value">
            The <see cref="T:System.String"/> to wrap in an <see cref="T:Tektosyne.OrdinalString"/>.</param>
            <returns>
            A new <see cref="T:Tektosyne.OrdinalString"/> wrapping the specified <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Tektosyne.OrdinalString.op_Implicit(Tektosyne.OrdinalString)~System.String">
            <summary>
            Converts an <see cref="T:Tektosyne.OrdinalString"/> to the equivalent <see cref="T:System.String"/>.
            </summary>
            <param name="ordinal">
            The <see cref="T:Tektosyne.OrdinalString"/> instance whose <see cref="F:Tektosyne.OrdinalString.Value"/> property to extract.
            </param>
            <returns>
            The value of the <see cref="F:Tektosyne.OrdinalString.Value"/> property of the specified <paramref
            name="ordinal"/> instance.</returns>
        </member>
        <member name="M:Tektosyne.OrdinalString.System#IComparable#CompareTo(System.Object)">
            <overloads>
            Compares two <see cref="T:Tektosyne.OrdinalString"/> objects and returns an indication of their
            relative values.</overloads>
            <summary>
            Compares this instance of <see cref="T:Tektosyne.OrdinalString"/> and a specified object, which must
            be a <see cref="T:Tektosyne.OrdinalString"/>, and returns an indication of their relative values.
            </summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this instance of <see cref="T:Tektosyne.OrdinalString"/>.
            </param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of this instance and
            <paramref name="obj"/>, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description>The <see cref="F:Tektosyne.OrdinalString.Value"/> property of this instance is less than that of
            <paramref name="obj"/>.</description>
            </item><item>
            <term>Zero</term>
            <description>The <see cref="F:Tektosyne.OrdinalString.Value"/> property of this instance equals that of <paramref
            name="obj"/>.</description>
            </item><item>
            <term>Greater than zero</term><description><para>
            The <see cref="F:Tektosyne.OrdinalString.Value"/> property of this instance is greater than that of <paramref
            name="obj"/>.
            </para><para>-or-</para><para>
            <paramref name="obj"/> is a null reference.</para></description>
            </item></list></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is neither a <see cref="T:Tektosyne.OrdinalString"/> nor a null reference.
            </exception>
            <remarks><para>
            The specified <paramref name="obj"/> must be either a null reference or an instance of
            <b>OrdinalString</b>.
            </para><para>
            <b>CompareTo</b> determines the relative order of the two instances by calling <see
            cref="M:Tektosyne.StringUtility.CompareOrdinal(System.String,System.String)"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.CompareTo(Tektosyne.OrdinalString)">
            <summary>
            Compares this instance and a specified <see cref="T:Tektosyne.OrdinalString"/> and returns an
            indication of their relative values.</summary>
            <param name="ordinal">
            A <see cref="T:Tektosyne.OrdinalString"/> to compare to this instance.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of this instance and
            <paramref name="ordinal"/>, as follows:
            </para><list type="table"><listheader>
            <term>Return Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description>The <see cref="F:Tektosyne.OrdinalString.Value"/> property of this instance is less than that of
            <paramref name="ordinal"/>.</description>
            </item><item>
            <term>Zero</term>
            <description>The <see cref="F:Tektosyne.OrdinalString.Value"/> property of this instance equals that of <paramref
            name="ordinal"/>.</description>
            </item><item>
            <term>Greater than zero</term><description>
            The <see cref="F:Tektosyne.OrdinalString.Value"/> property of this instance is greater than that of <paramref
            name="ordinal"/>.</description>
            </item></list></returns>
            <remarks>
            <b>CompareTo</b> determines the relative order of the two instances by calling <see
            cref="M:Tektosyne.StringUtility.CompareOrdinal(System.String,System.String)"/>.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.OrdinalString"/> objects have the same value.
            </overloads>
            <summary>
            Determines whether this instance of <see cref="T:Tektosyne.OrdinalString"/> and a specified object,
            which must be a <see cref="T:Tektosyne.OrdinalString"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this instance of <see cref="T:Tektosyne.OrdinalString"/>.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.OrdinalString"/> instance
            and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.OrdinalString"/> instance,
            <b>Equals</b> calls <see cref="M:Tektosyne.StringUtility.CompareOrdinal(System.String,System.String)"/> to test the <see
            cref="F:Tektosyne.OrdinalString.Value"/> properties of the two <see cref="T:Tektosyne.OrdinalString"/> instances for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.Equals(Tektosyne.OrdinalString)">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.OrdinalString"/> have the
            same value.</summary>
            <param name="ordinal">
            A <see cref="T:Tektosyne.OrdinalString"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="ordinal"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.StringUtility.CompareOrdinal(System.String,System.String)"/> to test the <see
            cref="F:Tektosyne.OrdinalString.Value"/> properties of the two <see cref="T:Tektosyne.OrdinalString"/> instances for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.OrdinalString.Equals(Tektosyne.OrdinalString,Tektosyne.OrdinalString)">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.OrdinalString"/> objects have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.OrdinalString"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> calls <see cref="M:Tektosyne.StringUtility.CompareOrdinal(System.String,System.String)"/> to test the <see
            cref="F:Tektosyne.OrdinalString.Value"/> properties of the two <see cref="T:Tektosyne.OrdinalString"/> instances for value
            equality.</remarks>
        </member>
        <member name="T:Tektosyne.PropertyValueException">
            <summary>
            The exception that is thrown when a method call is invalid for the current value of a
            property.</summary>
            <remarks><para>
            <b>PropertyValueException</b> extends the <see cref="T:System.InvalidOperationException"/> class with
            two additional properties, <see cref="P:Tektosyne.PropertyValueException.PropertyName"/> and <see
            cref="P:Tektosyne.PropertyValueException.ActualValue"/>, holding the name and value of the property that
            caused the exception.
            </para><para>
            <b>PropertyValueException</b> duplicates the functionality of <see
            cref="T:System.ArgumentOutOfRangeException"/> for errors that are caused by invalid property values.
            In my experience, this is the most common reason for <b>InvalidOperationException</b>
            errors.</para></remarks>
        </member>
        <member name="M:Tektosyne.PropertyValueException.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:Tektosyne.PropertyValueException"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.PropertyValueException"/> class with
            default properties.</summary>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.PropertyValueException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.Message"/></term>
            <description>A localized message indicating an invalid property value.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.PropertyName"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.ActualValue"/></term>
            <description>A null reference.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.PropertyValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.PropertyValueException"/> class with the
            name of the property that caused the exception.</summary>
            <param name="propertyName">
            The name of the property that caused the exception.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.PropertyValueException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.PropertyValueException.ActualValue"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.Message"/></term>
            <description>A localized message indicating an invalid property value.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.PropertyName"/></term>
            <description>The specified <paramref name="propertyName"/>.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.PropertyValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.PropertyValueException"/> class with the
            specified error message and with the previous exception that is the cause of this <see
            cref="T:Tektosyne.PropertyValueException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current <see
            cref="T:Tektosyne.PropertyValueException"/>.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.PropertyValueException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>The specified <paramref name="innerException"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.Message"/></term>
            <description>The specified <paramref name="message"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.PropertyName"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.ActualValue"/></term>
            <description>A null reference.</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.PropertyValueException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.PropertyValueException"/> class with the
            name of the property that caused the exception and with the specified error message.
            </summary>
            <param name="propertyName">
            The name of the property that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.PropertyValueException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:Tektosyne.PropertyValueException.ActualValue"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.Message"/></term>
            <description>The specified <paramref name="message"/>, followed by the specified
            <paramref name="propertyName"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.PropertyName"/></term>
            <description>The specified <paramref name="propertyName"/>.</description>
            </item></list><para>
            If the specified <paramref name="message"/> is a null reference or an empty string, the
            <b>Message</b> property will contain a localized message indicating an invalid property
            value.</para></remarks>
        </member>
        <member name="M:Tektosyne.PropertyValueException.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.PropertyValueException"/> class with the
            name and value of the property that caused the exception and with the specified error
            message.</summary>
            <param name="propertyName">
            The name of the property that caused the exception.</param>
            <param name="actualValue">
            The value of the property that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks><para>
            The following table shows the initial property values for the new instance of <see
            cref="T:Tektosyne.PropertyValueException"/>:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Exception.InnerException"/></term>
            <description>A null reference.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.ActualValue"/></term>
            <description>The specified <paramref name="actualValue"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.Message"/></term>
            <description>The specified <paramref name="message"/>, followed by the specified
            <paramref name="propertyName"/> and <paramref name="actualValue"/>.</description>
            </item><item>
            <term><see cref="P:Tektosyne.PropertyValueException.PropertyName"/></term>
            <description>The specified <paramref name="propertyName"/>.</description>
            </item></list><para>
            If the specified <paramref name="message"/> is a null reference or an empty string, the
            <b>Message</b> property will contain a localized message indicating an invalid property
            value.</para></remarks>
        </member>
        <member name="M:Tektosyne.PropertyValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.PropertyValueException"/> class with
            serialized data.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object providing serialized object data for the <see
            cref="T:Tektosyne.PropertyValueException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for details.
            </para><para>
            The values of the <see cref="P:Tektosyne.PropertyValueException.ActualValue"/> and <see cref="P:Tektosyne.PropertyValueException.PropertyName"/> properties
            are deserialized from two additional fields, named "ActualValue" and "PropertyName".
            </para></remarks>
        </member>
        <member name="P:Tektosyne.PropertyValueException.ActualValue">
            <summary>
            Gets the value of the property that caused the exception.</summary>
            <value>
            The invalid property value that caused the <see cref="T:Tektosyne.PropertyValueException"/>.</value>
            <remarks>
            A <see cref="T:Tektosyne.PropertyValueException"/> should carry the invalid property value that
            caused the exception if it is relevant and cannot be inferred from the error <see
            cref="P:Tektosyne.PropertyValueException.Message"/>.</remarks>
        </member>
        <member name="P:Tektosyne.PropertyValueException.Message">
            <summary>
            Gets the error message, followed by the property name and value if available.</summary>
            <value>
            The error message passed to the constructor, followed by the <see cref="P:Tektosyne.PropertyValueException.PropertyName"/>
            if it is not a null reference or an empty string, and by the <see cref="P:Tektosyne.PropertyValueException.ActualValue"/>
            if it is not a null reference.</value>
            <remarks>
            The error message should be localized.</remarks>
        </member>
        <member name="P:Tektosyne.PropertyValueException.PropertyName">
            <summary>
            Gets the name of the property that caused the exception.</summary>
            <value>
            The name of the property that caused the <see cref="T:Tektosyne.PropertyValueException"/>.</value>
            <remarks>
            Every <see cref="T:Tektosyne.PropertyValueException"/> should carry the name of the property whose
            invalid value caused the exception. This name should not be localized.</remarks>
        </member>
        <member name="M:Tektosyne.PropertyValueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the data needed to serialize the
            exception.</summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that receives the serialized object data of
            the <see cref="T:Tektosyne.PropertyValueException"/>.</param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing contextual information about the
            source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is a null reference.</exception>
            <remarks><para>
            Please refer to <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> for details.
            </para><para>
            The values of the <see cref="P:Tektosyne.PropertyValueException.ActualValue"/> and <see cref="P:Tektosyne.PropertyValueException.PropertyName"/> properties
            are serialized to two additional fields, named "ActualValue" and "PropertyName".
            </para></remarks>
        </member>
        <member name="T:Tektosyne.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ActualValue">
            <summary>
              Looks up a localized string similar to Actual value was {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentConflict">
            <summary>
              Looks up a localized string similar to Argument conflicts with value of {0} argument..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentConflictSign">
            <summary>
              Looks up a localized string similar to Argument specifies conflicting signs..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentContainsDifferent">
            <summary>
              Looks up a localized string similar to Argument cannot contain object with different {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentContainsEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot contain an empty {0} object..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentContainsNegative">
            <summary>
              Looks up a localized string similar to Argument cannot contain negative values..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentContainsNotPositive">
            <summary>
              Looks up a localized string similar to Argument must contain positive values..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentContainsNull">
            <summary>
              Looks up a localized string similar to Argument cannot contain a null reference..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentContainsNullKey">
            <summary>
              Looks up a localized string similar to Argument cannot contain a key that is a null reference..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentContainsNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot contain a null reference or an empty object..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentCoordinatesInvalid">
            <summary>
              Looks up a localized string similar to Argument must specify valid coordinates..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentEquals">
            <summary>
              Looks up a localized string similar to Argument cannot equal {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentFalse">
            <summary>
              Looks up a localized string similar to Argument cannot be false..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentGreaterAndLess">
            <summary>
              Looks up a localized string similar to Argument cannot be greater than {0} and less than {1}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentGreaterValue">
            <summary>
              Looks up a localized string similar to Argument cannot be greater than {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentInCollection">
            <summary>
              Looks up a localized string similar to Argument already exists in collection..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentLessOrGreater">
            <summary>
              Looks up a localized string similar to Argument cannot be less than {0} or greater than {1}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentLessValue">
            <summary>
              Looks up a localized string similar to Argument cannot be less than {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentMultidimensional">
            <summary>
              Looks up a localized string similar to Argument cannot be multidimensional..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNegative">
            <summary>
              Looks up a localized string similar to Argument cannot be negative..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotDivisible">
            <summary>
              Looks up a localized string similar to Argument must be divisible by {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotEquals">
            <summary>
              Looks up a localized string similar to Argument must equal {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotGreaterValue">
            <summary>
              Looks up a localized string similar to Argument must be greater than {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotInCollection">
            <summary>
              Looks up a localized string similar to Argument was not found in collection..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotInTypes">
            <summary>
              Looks up a localized string similar to Argument must be one of these types: .
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotInValues">
            <summary>
              Looks up a localized string similar to Argument must have one of these values: .
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotLessLength">
            <summary>
              Looks up a localized string similar to Argument must be less than array length..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotLessValue">
            <summary>
              Looks up a localized string similar to Argument must be less than {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotNegative">
            <summary>
              Looks up a localized string similar to Argument must be negative..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotNeighbor">
            <summary>
              Looks up a localized string similar to Argument must specify a neighboring location..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotNull">
            <summary>
              Looks up a localized string similar to Argument must be a null reference..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotPositive">
            <summary>
              Looks up a localized string similar to Argument must be positive..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotReadOnly">
            <summary>
              Looks up a localized string similar to Argument must be read-only..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNotRooted">
            <summary>
              Looks up a localized string similar to Argument must be an absolute file path..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot be a null reference or an empty object..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentPositive">
            <summary>
              Looks up a localized string similar to Argument cannot be positive..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentPropertyConflict">
            <summary>
              Looks up a localized string similar to Argument conflicts with value of {0} property..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentPropertyInvalid">
            <summary>
              Looks up a localized string similar to Argument contains invalid {0} property..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentReadOnly">
            <summary>
              Looks up a localized string similar to Argument cannot be read-only..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentSectionLessCollection">
            <summary>
              Looks up a localized string similar to Argument section must be large enough for collection..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentSpecifiesInvalid">
            <summary>
              Looks up a localized string similar to Argument specifies invalid {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentTrue">
            <summary>
              Looks up a localized string similar to Argument cannot be true..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ArgumentTypeMismatch">
            <summary>
              Looks up a localized string similar to Argument must be of type {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.BooleanFlagUnclearable">
            <summary>
              Looks up a localized string similar to Value set to false, and Clearable is false..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonAbort">
            <summary>
              Looks up a localized string similar to Abort.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonCancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonHelp">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonIgnore">
            <summary>
              Looks up a localized string similar to Ignore.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonNo">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonOK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonRetry">
            <summary>
              Looks up a localized string similar to Retry.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ButtonYes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ClipboardCopy">
            <summary>
              Looks up a localized string similar to Clipboard Copy.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ClipboardCopyError">
            <summary>
              Looks up a localized string similar to Clipboard Copy Error.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ClipboardPaste">
            <summary>
              Looks up a localized string similar to Clipboard Paste.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ClipboardPasteError">
            <summary>
              Looks up a localized string similar to Clipboard Paste Error.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.CollectionEmpty">
            <summary>
              Looks up a localized string similar to Collection contains no elements..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.CollectionFixedSize">
            <summary>
              Looks up a localized string similar to Fixed-size collections cannot add or remove elements..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.CollectionReadOnly">
            <summary>
              Looks up a localized string similar to Read-only collections cannot be modified..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.CollectionUnique">
            <summary>
              Looks up a localized string similar to Unique-element collections cannot contain duplicate elements..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ControlRangeError">
             <summary>
               Looks up a localized string similar to The current value is not between {0} and {1}, and
            will be replaced with {0} or {1} unless corrected..
             </summary>
        </member>
        <member name="P:Tektosyne.Strings.ControlRangeInfo">
            <summary>
              Looks up a localized string similar to Enter a value between {0} and {1}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.CtorNotSupported">
            <summary>
              Looks up a localized string similar to Construction of this type is not supported..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.DictionaryKey">
            <summary>
              Looks up a localized string similar to Dictionary key was {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.DictionaryKeyMismatch">
            <summary>
              Looks up a localized string similar to Dictionary key differs from object key..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.EnumeratorIndex">
            <summary>
              Looks up a localized string similar to Enumerator is not on a collection element..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.EnumeratorVersion">
            <summary>
              Looks up a localized string similar to Enumerator invalidated by modification to collection..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.FormatAtColumn">
            <summary>
              Looks up a localized string similar to , column {0}.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.FormatAtLine">
            <summary>
              Looks up a localized string similar to  at line {0}.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.FormatCode">
            <summary>
              Looks up a localized string similar to  (Code {0}).
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.IKeyedValueKey">
            <summary>
              Looks up a localized string similar to IKeyedValue key was {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.InformationMemory">
             <summary>
               Looks up a localized string similar to System physical: {0} of {1} MB available. 
            System virtual: {2} of {3} MB available. 
            Process memory: {4} of {5} MB available. .
             </summary>
        </member>
        <member name="P:Tektosyne.Strings.KeyNotFound">
            <summary>
              Looks up a localized string similar to Collection does not contain key {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiAccessDenied">
            <summary>
              Looks up a localized string similar to Access denied..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiAmbiguousRecipient">
            <summary>
              Looks up a localized string similar to Ambiguous recipient..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiAttachmentNotFound">
            <summary>
              Looks up a localized string similar to Attachment not found..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiAttachmentOpenFailure">
            <summary>
              Looks up a localized string similar to Attachment open failure..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiAttachmentWriteFailure">
            <summary>
              Looks up a localized string similar to Attachment write failure..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiBadRecipType">
            <summary>
              Looks up a localized string similar to Invalid recipient type..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiDiskFull">
            <summary>
              Looks up a localized string similar to Insufficient disk space..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiFailure">
            <summary>
              Looks up a localized string similar to Unspecified MAPI error..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiInsufficientMemory">
            <summary>
              Looks up a localized string similar to Insufficient memory..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiInvalidEditFields">
            <summary>
              Looks up a localized string similar to Invalid edit fields parameter..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiInvalidMessage">
            <summary>
              Looks up a localized string similar to Invalid message identifier..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiInvalidRecips">
            <summary>
              Looks up a localized string similar to One or more invalid recipients..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiInvalidSession">
            <summary>
              Looks up a localized string similar to Invalid MAPI session handle..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiLoginFailure">
            <summary>
              Looks up a localized string similar to MAPI login failure..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiMessageInUse">
            <summary>
              Looks up a localized string similar to Message in use..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiNetworkFailure">
            <summary>
              Looks up a localized string similar to Network failure..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiNoMessages">
            <summary>
              Looks up a localized string similar to No messages found..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiNotSupported">
            <summary>
              Looks up a localized string similar to Unsupported operation..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiTextTooLarge">
            <summary>
              Looks up a localized string similar to Message text too large..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiTooManyFiles">
            <summary>
              Looks up a localized string similar to Too many file attachments..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiTooManyRecipients">
            <summary>
              Looks up a localized string similar to Too many recipients..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiTooManySessions">
            <summary>
              Looks up a localized string similar to Too many MAPI sessions..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiTypeNotSupported">
            <summary>
              Looks up a localized string similar to Type not supported..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiUnknown">
            <summary>
              Looks up a localized string similar to Unknown error code..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiUnknownRecipient">
            <summary>
              Looks up a localized string similar to Unknown recipient..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MapiUserAbort">
            <summary>
              Looks up a localized string similar to User aborted operation..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MenuAlt">
            <summary>
              Looks up a localized string similar to Alt+.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MenuControl">
            <summary>
              Looks up a localized string similar to Ctrl+.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MenuShift">
            <summary>
              Looks up a localized string similar to Shift+.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.MethodInvalidValue">
            <summary>
              Looks up a localized string similar to Method {0} returned an invalid value..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyAbstract">
            <summary>
              Looks up a localized string similar to Property not implemented on abstract class..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyDerived">
            <summary>
              Looks up a localized string similar to Property not implemented on derived class..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyEmpty">
            <summary>
              Looks up a localized string similar to Property cannot be empty..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyFalse">
            <summary>
              Looks up a localized string similar to Property cannot be false..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyInvalidValue">
            <summary>
              Looks up a localized string similar to Property has an invalid value..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyIsInValues">
            <summary>
              Looks up a localized string similar to Property cannot have one of these values: .
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyIsValue">
            <summary>
              Looks up a localized string similar to Property cannot be {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyName">
            <summary>
              Looks up a localized string similar to Property name: {0}.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNegative">
            <summary>
              Looks up a localized string similar to Property cannot be negative..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNotDivisible">
            <summary>
              Looks up a localized string similar to Property must be divisible by {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNotEmpty">
            <summary>
              Looks up a localized string similar to Property must be empty..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNotInValues">
            <summary>
              Looks up a localized string similar to Property must have one of these values: .
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNotNegative">
            <summary>
              Looks up a localized string similar to Property must be negative..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNotNull">
            <summary>
              Looks up a localized string similar to Property must be a null reference..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNotPositive">
            <summary>
              Looks up a localized string similar to Property must be positive..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNotValue">
            <summary>
              Looks up a localized string similar to Property must be {0}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNull">
            <summary>
              Looks up a localized string similar to Property cannot be a null reference..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyNullOrEmpty">
            <summary>
              Looks up a localized string similar to Property cannot be a null reference or an empty object..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyPositive">
            <summary>
              Looks up a localized string similar to Property cannot be positive..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertySet">
            <summary>
              Looks up a localized string similar to Property cannot be set..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertySetOnce">
            <summary>
              Looks up a localized string similar to Property cannot be set more than once..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.PropertyTrue">
            <summary>
              Looks up a localized string similar to Property cannot be true..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.SearchStructureCorrupted">
            <summary>
              Looks up a localized string similar to Search structure corrupted..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.SuccessSuccess">
            <summary>
              Looks up a localized string similar to Operation succeeded..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.SynchronizedNotImplemented">
            <summary>
              Looks up a localized string similar to Synchronized access is not implemented..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.TechnicalDetails">
            <summary>
              Looks up a localized string similar to Technical Details:.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ThreadForeground">
            <summary>
              Looks up a localized string similar to Method cannot execute on foreground thread..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.TypeMemberNotFound">
            <summary>
              Looks up a localized string similar to Member {0} not found in type {1}..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.TypeNotFound">
            <summary>
              Looks up a localized string similar to Type {0} not found..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.UnknownError">
            <summary>
              Looks up a localized string similar to Unknown error..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.ViewReadOnly">
            <summary>
              Looks up a localized string similar to Read-only views cannot be modified..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.XmlContentNotElement">
            <summary>
              Looks up a localized string similar to Content node must be an element tag..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.XmlContentNotElementName">
            <summary>
              Looks up a localized string similar to Content node must be an element tag named &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.XmlContentNotEmpty">
            <summary>
              Looks up a localized string similar to Content node must be empty..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.XmlContentNotText">
            <summary>
              Looks up a localized string similar to Content node must be simple text or CDATA block..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.XmlDocumentError">
            <summary>
              Looks up a localized string similar to An error occurred while parsing the XML document..
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.XmlError">
            <summary>
              Looks up a localized string similar to XML error.
            </summary>
        </member>
        <member name="P:Tektosyne.Strings.XmlSchemaError">
            <summary>
              Looks up a localized string similar to XML Schema error.
            </summary>
        </member>
        <member name="T:Tektosyne.StringUtility">
            <summary>
            Provides auxiliary methods for <b>System.String</b>.</summary>
        </member>
        <member name="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String)">
            <overloads>
            Compares two specified strings and returns an indication of their relative values,
            according to a natural sorting order.</overloads>
            <summary>
            Compares two specified strings and returns an indication of their relative values,
            according to a natural sorting order and using the sorting rules of the <see
            cref="F:System.StringComparison.CurrentCulture"/>.</summary>
            <param name="x">
            The first <see cref="T:System.String"/> to compare.</param>
            <param name="y">
            The second <see cref="T:System.String"/> to compare.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of <paramref name="x"/> and
            <paramref name="y"/>, as follows:
            </para><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item></list></returns>
            <remarks><para>
            <b>CompareNatural</b> is compatible with the <see cref="T:System.Comparison`1"/> delegate and
            can be passed to various sorting methods.
            </para><para>
            <b>CompareNatural</b> invokes the second <see cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String,System.StringComparison)"/> overload with the specified arguments, using the sorting rules of
            the <see cref="F:System.StringComparison.CurrentCulture"/>. Please see there for details.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String,System.StringComparison)">
            <summary>
            Compares two specified strings and returns an indication of their relative values,
            according to a natural sorting order and using the specified sorting rules.</summary>
            <param name="x">
            The first <see cref="T:System.String"/> to compare.</param>
            <param name="y">
            The second <see cref="T:System.String"/> to compare.</param>
            <param name="comparison">
            A <see cref="T:System.StringComparison"/> value indicating how sequences of non-digit characters
            should be compared.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of <paramref name="x"/> and
            <paramref name="y"/>, as follows:
            </para><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item></list></returns>
            <remarks><para>
            Either or both arguments may be null references or empty strings. A null reference is
            considered smaller than a valid string, whether empty or not, and two null references
            are considered equal. An empty string is considered smaller than a non-empty string, and
            two empty strings are considered equal.
            </para><para>
            Non-empty strings are broken into sequences of decimal digits and non-digit characters,
            as determined by <see cref="M:System.Char.IsDigit(System.Char)"/>. A digit sequence is considered greater than
            a non-digit sequence. Two digit sequences are compared by their numeric values which
            must fit in the <see cref="T:System.Int32"/> type. Two non-digit sequences are compared using the
            <see cref="M:System.String.Compare(System.String,System.String)"/> method with the specified <paramref name="comparison"/>
            options. The return value of <b>CompareNatural</b> is determined by the first pair of
            sequences that are not considered equal.</para></remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.CompareOrdinal(System.String,System.String)">
            <summary>
            Compares two specified strings and returns an indication of their relative values,
            according to a natural sorting order and using <see cref="F:System.StringComparison.Ordinal"/>
            sorting rules.</summary>
            <param name="x">
            The first <see cref="T:System.String"/> to compare.</param>
            <param name="y">
            The second <see cref="T:System.String"/> to compare.</param>
            <returns><para>
            An <see cref="T:System.Int32"/> value indicating the relative order of <paramref name="x"/> and
            <paramref name="y"/>, as follows:
            </para><list type="table"><listheader>
            <term>Value</term><description>Condition</description>
            </listheader><item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item><item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item><item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item></list></returns>
            <remarks><para>
            <b>CompareOrdinal</b> is compatible with the <see cref="T:System.Comparison`1"/> delegate and
            can be passed to various sorting methods.
            </para><para>
            <b>CompareOrdinal</b> invokes <see cref="M:Tektosyne.StringUtility.CompareNatural(System.String,System.String,System.StringComparison)"/> overload with the specified arguments and the value <see
            cref="F:System.StringComparison.Ordinal"/>. Please see there for details.</para></remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.IsRichText(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> contains text in Rich Text Format
            (RTF).</summary>
            <param name="value">
            The <see cref="T:System.String"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <paramref name="value"/> starts with the literal string
            "{\rtf"; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IsRichText</b> returns <c>false</c> if the specified <paramref name="value"/> is a
            null reference or an empty string.</remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.IsValidEmail(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> contains a valid e-mail address.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> to examine.</param>
            <returns>
            <c>true</c> if the specified <paramref name="value"/> contains a valid e-mail address;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>IsValidEmail</b> returns <c>false</c> if the specified <paramref name="value"/> is a
            null reference or an empty string.</remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.PackSpace(System.String)">
            <summary>
            Replaces each sequence of whitespace in the specified <see cref="T:System.String"/> with a single
            space character.</summary>
            <param name="value">
            The <see cref="T:System.String"/> whose whitespace sequences should be packed.</param>
            <returns>
            A copy of <paramref name="value"/> in which each sequence of whitespace has been
            replaced by a single space character.</returns>
            <remarks><para>
            <b>PackSpace</b> uses the <see cref="T:System.Text.RegularExpressions.Regex"/> expression "\s+" to identify sequences of
            whitespace. The replacement character is a standard space (Unicode character 32, SPACE).
            </para><para>
            <b>PackSpace</b> returns an empty string if <paramref name="value"/> is a null reference
            or an empty string.</para></remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.Validate(System.String)">
            <overloads>
            Returns the specified <see cref="T:System.String"/> if it is neither empty nor a null reference,
            otherwise a valid replacement text.</overloads>
            <summary>
            Returns the specified <see cref="T:System.String"/> if it is neither empty nor a null reference,
            otherwise a short debug text.</summary>
            <param name="value">
            The <see cref="T:System.String"/> to validate.</param>
            <returns>
            The literal string "(null)" if <paramref name="value"/> is a null reference; otherwise,
            the literal string "(empty)" if <paramref name="value"/> is an empty string; otherwise,
            the specified <paramref name="value"/>.</returns>
            <remarks>
            This <b>Validate</b> overload is intended for debugging.</remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.Validate(System.String,System.String)">
            <summary>
            Returns the specified <see cref="T:System.String"/> if it is neither empty nor a null reference,
            otherwise the specified replacement text.</summary>
            <param name="value">
            The <see cref="T:System.String"/> to validate.</param>
            <param name="replace">
            The <see cref="T:System.String"/> to return if <paramref name="value"/> is a null reference or an
            empty string.</param>
            <returns>
            The specified <paramref name="replace"/> text if <paramref name="value"/> is a null
            reference or an empty string; otherwise, the specified <paramref name="value"/>.
            </returns>
            <remarks>
            This <b>Validate</b> overload is intended for generating output visible to the user.
            </remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.Validate``1(``0)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the specified object if it is neither
            empty nor a null reference, otherwise a short debug text.</summary>
            <typeparam name="T">
            The type of the object to validate.</typeparam>
            <param name="value">
            The object to validate.</param>
            <returns>
            The literal string "(null)" if <paramref name="value"/> is a null reference; otherwise,
            the culture-invariant string representation of the specified <paramref name="value"/> if
            it is not an empty string; otherwise, the literal string "(empty)".</returns>
            <remarks>
            This <b>Validate</b> overload is intended for debugging.</remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.Validate``1(``0,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the specified object if it is neither
            empty nor a null reference, otherwise the specified replacement text.</summary>
            <typeparam name="T">
            The type of the object to validate.</typeparam>
            <param name="value">
            The object to validate.</param>
            <param name="replace">
            The <see cref="T:System.String"/> to return if <paramref name="value"/> is a null reference, or 
            its string representation is a null reference or an empty string.</param>
            <returns>
            The specified <paramref name="replace"/> text if <paramref name="value"/> is a null
            reference, or its string representation is a null reference or an empty string;
            otherwise, the culture-invariant string representation of the specified <paramref
            name="value"/>.</returns>
            <remarks>
            This <b>Validate</b> overload is intended for generating output visible to the user.
            </remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.ValidateCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents all elements in the specified collection,
            using a short debug text for null references and empty elements.</summary>
            <typeparam name="T">
            The type of all elements in the collection.</typeparam>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection whose elements to format.</param>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of all
            elements in the specified <paramref name="collection"/>.</returns>
            <remarks><para>
            <b>ValidateCollection</b> returns the literal string "(null)" if the specified <paramref
            name="collection"/> is a null reference.
            </para><para>
            Otherwise, <b>ValidateCollection</b> returns a comma-separated list of the string
            representations of all <paramref name="collection"/> elements, surrounded by square
            brackets. All elements are formatted using <see cref="M:Tektosyne.StringUtility.Validate``1(``0)"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.StringUtility.ValidOrNull(System.String,System.String)">
            <summary>
            Returns the specified <see cref="T:System.String"/> if it has any valid content, otherwise a null
            reference.</summary>
            <param name="value">
            The <see cref="T:System.String"/> to validate.</param>
            <param name="invalid">
            An optional <see cref="T:System.String"/> that should be considered invalid. The default is a
            null reference.</param>
            <returns>
            A null reference if <paramref name="value"/> is a null reference, an empty string, a
            string consisting only of white-space characters, or the specified <paramref
            name="invalid"/> text; otherwise, the specified <paramref name="value"/>.</returns>
            <remarks>
            <b>ValidOrNull</b> uses <see cref="F:System.StringComparison.Ordinal"/> sorting rules to compare
            the specified <paramref name="value"/> and <paramref name="invalid"/> text for equality,
            assuming <paramref name="invalid"/> is not a null reference.</remarks>
        </member>
        <member name="T:Tektosyne.ThrowHelper">
            <summary>
            Provides helper methods for throwing exceptions.</summary>
            <remarks><para>
            <b>ThrowHelper</b> provides several methods that merely throw the <see cref="T:System.Exception"/>
            indicated by the method name, with the specified arguments. The purpose of these methods is
            to help the JIT compiler generate more efficient machine code.
            </para><para>
            Every <c>throw</c> statement translates into a surprisingly large amount of machine code –
            around 30-60 extra bytes compared to an equivalent <b>ThrowHelper</b> call, depending on the
            target platform and optimization settings. Composing error messages with <see
            cref="M:System.String.Format(System.String,System.Object)"/> calls further increases the overhead.
            </para><para>
            This has two detrimental effects on methods that contain <c>throw</c> statements. First,
            they are much more likely to exceed the maximum code size for inlining. Second, they carry a
            significant amount of "dead" code that is never run during normal execution but may still
            consume system resources.
            </para><para>
            Using <b>ThrowHelper</b> calls instead of explicit <c>throw</c> statements will translate
            your methods into smaller machine code. This should improve overall throughput and may even
            render some methods eligible for inlining. Most <b>ThrowHelper</b> methods are marked with
            the <see cref="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining"/> option to help guide the JIT compiler.
            </para></remarks>
        </member>
        <member name="M:Tektosyne.ThrowHelper.Assert(System.Boolean)">
            <overloads>
            Throws an <see cref="T:Tektosyne.AssertionException"/> if the specified condition is <c>false</c>.
            </overloads>
            <summary>
            Throws an <see cref="T:Tektosyne.AssertionException"/> if the specified condition is <c>false</c>.
            </summary>
            <param name="condition">
            The condition to test.</param>
            <exception cref="T:Tektosyne.AssertionException">
            <paramref name="condition"/> is <c>false</c>.</exception>
            <remarks><para>
            <b>Assert</b> provides an alternative to the eponymous <see
            cref="T:System.Diagnostics.Debug"/> and <see cref="T:System.Diagnostics.Trace"/> methods
            that does not depend on the DEBUG and TRACE symbols, respectively, and that always
            responds to <paramref name="condition"/> failure by throwing an exception.
            </para><para>
            Unlike other <see cref="T:Tektosyne.ThrowHelper"/> methods, both <b>Assert</b> overloads may be
            inlined by the JIT compiler.</para></remarks>
        </member>
        <member name="M:Tektosyne.ThrowHelper.Assert(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:Tektosyne.AssertionException"/> with the specified error message if the
            specified condition is <c>false</c>.</summary>
            <param name="condition">
            The condition to test.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <exception cref="T:Tektosyne.AssertionException">
            <paramref name="condition"/> is <c>false</c>.</exception>
            <remarks>
            Please refer to <see cref="M:Tektosyne.ThrowHelper.Assert(System.Boolean)"/> for details.</remarks>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks>
            <b>ThrowArgumentException</b> reverses the order of <paramref name="paramName"/> and
            <paramref name="message"/> compared to the <see cref="T:System.ArgumentException"/> constructor,
            for conformance with other <see cref="T:Tektosyne.ThrowHelper"/> methods.</remarks>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentExceptionWithFormat(System.String,System.String,System.Object)">
            <overloads>
            Throws an <see cref="T:System.ArgumentException"/> with a formatted error message.</overloads>
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> with a formatted error message and a single
            argument.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentExceptionWithFormat(System.String,System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> with a formatted error message and two
            arguments.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="arg0">
            The first argument for the <paramref name="format"/> string.</param>
            <param name="arg1">
            The second argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentNullException(System.String)">
            <overloads>
            Throws an <see cref="T:System.ArgumentNullException"/>.</overloads>
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> with the specified parameter name.
            </summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentNullException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> with the specified parameter name and
            error message.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentNullOrEmptyException(System.String)">
            <summary>
            Throws an <see cref="T:Tektosyne.ArgumentNullOrEmptyException"/>.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="actualValue">
            The actual value of the parameter that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentOutOfRangeExceptionWithFormat(System.String,System.Object,System.String,System.Object)">
            <overloads>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a formatted error message.
            </overloads>
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a formatted error message and a
            single argument.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="actualValue">
            The actual value of the parameter that caused the exception.</param>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowArgumentOutOfRangeExceptionWithFormat(System.String,System.Object,System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a formatted error message and
            two arguments.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="actualValue">
            The actual value of the parameter that caused the exception.</param>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="arg0">
            The first argument for the <paramref name="format"/> string.</param>
            <param name="arg1">
            The second argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowAssertionException">
            <overloads>
            Throws an <see cref="T:Tektosyne.AssertionException"/>.</overloads>
            <summary>
            Throws an <see cref="T:Tektosyne.AssertionException"/>.</summary>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowAssertionException(System.String)">
            <summary>
            Throws an <see cref="T:Tektosyne.AssertionException"/> with the specified error message.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowAssertionException(System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:Tektosyne.AssertionException"/> with the specified error message and previous
            exception.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailException(System.String)">
            <overloads>
            Throws a <see cref="T:Tektosyne.DetailException"/>.</overloads>
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with the specified error message.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailException(System.String,System.Exception)">
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with the specified error message and previous
            exception.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailException(System.String,System.String)">
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with the specified error message and technical
            details.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="details">
            A message that provides technical details about the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailException(System.String,System.String,System.Exception)">
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with the specified error message, technical
            details, and previous exception.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <param name="details">
            A message that provides technical details about the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailExceptionWithFormat(System.String,System.Object)">
            <overloads>
            Throws a <see cref="T:Tektosyne.DetailException"/> with a formatted error message.</overloads>
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with a formatted error message.</summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailExceptionWithFormat(System.String,System.Object,System.Exception)">
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with a formatted error message and the specified
            previous exception.</summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailExceptionWithFormat(System.String,System.Object,System.String)">
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with a formatted error message and the specified
            technical details.</summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
            <param name="details">
            A message that provides technical details about the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowDetailExceptionWithFormat(System.String,System.Object,System.String,System.Exception)">
            <summary>
            Throws a <see cref="T:Tektosyne.DetailException"/> with a formatted error message and the specified
            technical details and previous exception.</summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
            <param name="details">
            A message that provides technical details about the exception.</param>
            <param name="innerException">
            The previous <see cref="T:System.Exception"/> that is the cause of the current exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowFileNotFoundException(System.String,System.String)">
            <summary>
            Throws a <see cref="T:System.IO.FileNotFoundException"/>.</summary>
            <param name="fileName">
            The name of the file that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
            <remarks>
            <b>ThrowFileNotFoundException</b> reverses the order of <paramref name="fileName"/> and
            <paramref name="message"/> compared to the <see cref="T:System.IO.FileNotFoundException"/>
            constructor, for conformance with other <see cref="T:Tektosyne.ThrowHelper"/> methods.</remarks>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowInvalidEnumArgumentException(System.String,System.Int32,System.Type)">
            <summary>
            Throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.</summary>
            <param name="paramName">
            The name of the parameter that caused the exception.</param>
            <param name="actualValue">
            The actual value of the parameter that caused the exception.</param>
            <param name="enumClass">
            The <see cref="T:System.Enum"/> type of the parameter that caused the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowInvalidOperationException(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowInvalidOperationExceptionWithFormat(System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> with a formatted error message.
            </summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowKeyMismatchException(System.Object,System.Object)">
            <summary>
            Throws a <see cref="T:Tektosyne.Collections.KeyMismatchException"/>.</summary>
            <param name="key">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> that was found or stored in a <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> associated with <paramref name="valueKey"/>.</param>
            <param name="valueKey">
            The <see cref="P:Tektosyne.Collections.IKeyedValue`1.Key"/> that was found or stored in an <see
            cref="T:Tektosyne.Collections.IKeyedValue`1"/> instance associated with <paramref name="key"/>.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowKeyNotFoundException(System.Object)">
            <summary>
            Throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.</summary>
            <param name="key">
            The key that was not found.</param>
            <remarks>
            <b>ThrowKeyNotFoundException</b> creates a localized error message that contains a
            string representation of the specified <paramref name="key"/>.</remarks>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowNotImplementedException(System.String)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowNotSupportedException(System.String)">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowObjectDisposedException(System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/>.</summary>
            <param name="objectName">
            The name of the disposed object. This argument may be a null reference.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowPropertyValueException(System.String,System.String)">
            <overloads>
            Throws a <see cref="T:Tektosyne.PropertyValueException"/>.</overloads>
            <summary>
            Throws a <see cref="T:Tektosyne.PropertyValueException"/> with the specified property name and error
            message.</summary>
            <param name="propertyName">
            The name of the property that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowPropertyValueException(System.String,System.Object,System.String)">
            <summary>
            Throws a <see cref="T:Tektosyne.PropertyValueException"/> with the specified property name and value
            and error message.</summary>
            <param name="propertyName">
            The name of the property that caused the exception.</param>
            <param name="actualValue">
            The actual value of the property that caused the exception.</param>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowPropertyValueExceptionWithFormat(System.String,System.Object,System.String,System.Object)">
            <summary>
            Throws a <see cref="T:Tektosyne.PropertyValueException"/> with the specified property name and value
            and formatted error message.</summary>
            <param name="propertyName">
            The name of the property that caused the exception.</param>
            <param name="actualValue">
            The actual value of the property that caused the exception.</param>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowTypeLoadException(System.String)">
            <summary>
            Throws a <see cref="T:System.TypeLoadException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowTypeLoadExceptionWithFormat(System.String,System.Object)">
            <summary>
            Throws a <see cref="T:System.TypeLoadException"/> with a formatted error message.</summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowXmlException(System.String)">
            <summary>
            Throws an <see cref="T:System.Xml.XmlException"/>.</summary>
            <param name="message">
            The error message that specifies the reason for the exception.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowXmlExceptionWithFormat(System.String,System.Object)">
            <overloads>
            Throws an <see cref="T:System.Xml.XmlException"/> with a formatted error message.</overloads>
            <summary>
            Throws an <see cref="T:System.Xml.XmlException"/> with a formatted error message and a single
            argument.</summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="argument">
            The argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowXmlExceptionWithFormat(System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.Xml.XmlException"/> with a formatted error message and two arguments.
            </summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="arg0">
            The first argument for the <paramref name="format"/> string.</param>
            <param name="arg1">
            The second argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="M:Tektosyne.ThrowHelper.ThrowXmlExceptionWithFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.Xml.XmlException"/> with a formatted error message and three arguments.
            </summary>
            <param name="format">
            A composite <see cref="M:System.String.Format(System.String,System.Object)"/> string for the error message that specifies the
            reason for the exception.</param>
            <param name="arg0">
            The first argument for the <paramref name="format"/> string.</param>
            <param name="arg1">
            The second argument for the <paramref name="format"/> string.</param>
            <param name="arg2">
            The second argument for the <paramref name="format"/> string.</param>
        </member>
        <member name="T:Tektosyne.ValueTuple">
            <summary>
            Provides static methods for creating <see cref="T:Tektosyne.ValueTuple"/> instances.</summary>
            <remarks>
            <b>ValueTuple</b> offers static <b>Create</b> methods for all <see cref="T:Tektosyne.ValueTuple"/>
            variants to allow their instantation without having to specify generic type arguments.
            </remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple.Create``2(``0,``1)">
            <summary>
            Creates a new <see cref="T:Tektosyne.ValueTuple`2"/>.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.ValueTuple`2"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.ValueTuple`2"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.ValueTuple`2"/> containing the specified <paramref name="item1"/> and
            <paramref name="item2"/>.</returns>
            <remarks>
            <b>Create</b> allows you to create a new <see cref="T:Tektosyne.ValueTuple`2"/> without having
            to explicitly specify its generic type arguments.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple.Create``3(``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:Tektosyne.ValueTuple`3"/>.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.ValueTuple`3"/> containing the specified <paramref name="item1"/>,
            <paramref name="item2"/>, and <paramref name="item3"/>.</returns>
            <remarks>
            <b>Create</b> allows you to create a new <see cref="T:Tektosyne.ValueTuple`3"/> without
            having to explicitly specify its generic type arguments.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a new <see cref="T:Tektosyne.ValueTuple`4"/>.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <typeparam name="T4">
            The type of the fourth component.</typeparam>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
            <param name="item4">
            The fourth component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
            <returns>
            A <see cref="T:Tektosyne.ValueTuple`4"/> containing the specified <paramref
            name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, and <paramref
            name="item4"/>.</returns>
            <remarks>
            <b>Create</b> allows you to create a new <see cref="T:Tektosyne.ValueTuple`4"/> without
            having to explicitly specify its generic type arguments.</remarks>
        </member>
        <member name="T:Tektosyne.ValueTuple`2">
            <summary>
            Provides an immutable tuple of two arbitrary objects.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <remarks>
            <b>ValueTuple</b> resembles a standard <see cref="T:System.Tuple`2"/> but is implemented as an
            immutable structure with read-only fields, not as a class with properties.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ValueTuple`2"/> structure.</summary>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.ValueTuple`2"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.ValueTuple`2"/>.</param>
        </member>
        <member name="F:Tektosyne.ValueTuple`2.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.ValueTuple`2"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.ValueTuple`2"/> instance that was created with
            the default constructor.</remarks>
        </member>
        <member name="F:Tektosyne.ValueTuple`2.Item1">
            <summary>
            The first component of the <see cref="T:Tektosyne.ValueTuple`2"/>.</summary>
        </member>
        <member name="F:Tektosyne.ValueTuple`2.Item2">
            <summary>
            The second component of the <see cref="T:Tektosyne.ValueTuple`2"/>.</summary>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.ValueTuple`2"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the results of <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)"/>
            for the <see cref="F:Tektosyne.ValueTuple`2.Item1"/> and <see cref="F:Tektosyne.ValueTuple`2.Item2"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.ValueTuple`2"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            <see cref="F:Tektosyne.ValueTuple`2.Item1"/> and <see cref="F:Tektosyne.ValueTuple`2.Item2"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.op_Equality(Tektosyne.ValueTuple{`0,`1},Tektosyne.ValueTuple{`0,`1})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`2"/> instances have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`2"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`2"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.ValueTuple`2.Equals(Tektosyne.ValueTuple{`0,`1})"/> method to test the two
            <see cref="T:Tektosyne.ValueTuple`2"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.op_Inequality(Tektosyne.ValueTuple{`0,`1},Tektosyne.ValueTuple{`0,`1})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`2"/> instances have different values.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`2"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`2"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.ValueTuple`2.Equals(Tektosyne.ValueTuple{`0,`1})"/> method to test the two
            <see cref="T:Tektosyne.ValueTuple`2"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`2"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.ValueTuple`2"/> instance and a specified object,
            which must be a <see cref="T:Tektosyne.ValueTuple`2"/>, have the same value.</summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.ValueTuple`2"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.ValueTuple`2"/> instance
            and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.ValueTuple`2"/>
            instance, <b>Equals</b> invokes the strongly-typed <see
            cref="M:Tektosyne.ValueTuple`2.Equals(Tektosyne.ValueTuple{`0,`1})"/> overload to test the two instances for value equality.
            </remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.Equals(Tektosyne.ValueTuple{`0,`1})">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.ValueTuple`2"/> have the
            same value.</summary>
            <param name="tuple">
            A <see cref="T:Tektosyne.ValueTuple`2"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="tuple"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.ValueTuple`2.Item1"/> and <see cref="F:Tektosyne.ValueTuple`2.Item2"/>
            properties of the two <see cref="T:Tektosyne.ValueTuple`2"/> instances to test for value
            equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`2.Equals(Tektosyne.ValueTuple{`0,`1},Tektosyne.ValueTuple{`0,`1})">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.ValueTuple`2"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`2"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`2"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.ValueTuple`2.Equals(Tektosyne.ValueTuple{`0,`1})"/> overload to
            test the two <see cref="T:Tektosyne.ValueTuple`2"/> instances for value equality.</remarks>
        </member>
        <member name="T:Tektosyne.ValueTuple`3">
            <summary>
            Provides an immutable tuple of three arbitrary objects.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <remarks>
            <b>ValueTuple</b> resembles a standard <see cref="T:System.Tuple`3"/> but is implemented as an
            immutable structure with read-only fields, not as a class with properties.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ValueTuple`3"/> structure.</summary>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</param>
        </member>
        <member name="F:Tektosyne.ValueTuple`3.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.ValueTuple`3"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.ValueTuple`3"/> instance that was created with
            the default constructor.</remarks>
        </member>
        <member name="F:Tektosyne.ValueTuple`3.Item1">
            <summary>
            The first component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</summary>
        </member>
        <member name="F:Tektosyne.ValueTuple`3.Item2">
            <summary>
            The second component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</summary>
        </member>
        <member name="F:Tektosyne.ValueTuple`3.Item3">
            <summary>
            The third component of the <see cref="T:Tektosyne.ValueTuple`3"/>.</summary>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.ValueTuple`3"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the results of <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)"/>
            for the <see cref="F:Tektosyne.ValueTuple`3.Item1"/>, <see cref="F:Tektosyne.ValueTuple`3.Item2"/>, and <see cref="F:Tektosyne.ValueTuple`3.Item3"/> properties.
            </remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Tektosyne.ValueTuple`3"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            <see cref="F:Tektosyne.ValueTuple`3.Item1"/>, <see cref="F:Tektosyne.ValueTuple`3.Item2"/>, and <see cref="F:Tektosyne.ValueTuple`3.Item3"/> properties.</returns>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.op_Equality(Tektosyne.ValueTuple{`0,`1,`2},Tektosyne.ValueTuple{`0,`1,`2})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`3"/> instances have the same value.
            </summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`3"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`3"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.ValueTuple`3.Equals(Tektosyne.ValueTuple{`0,`1,`2})"/> method to test the
            two <see cref="T:Tektosyne.ValueTuple`3"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.op_Inequality(Tektosyne.ValueTuple{`0,`1,`2},Tektosyne.ValueTuple{`0,`1,`2})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`3"/> instances have different
            values.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`3"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`3"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.ValueTuple`3.Equals(Tektosyne.ValueTuple{`0,`1,`2})"/> method to test the
            two <see cref="T:Tektosyne.ValueTuple`3"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`3"/> instances have the same value.
            </overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.ValueTuple`3"/> instance and a specified
            object, which must be a <see cref="T:Tektosyne.ValueTuple`3"/>, have the same value.
            </summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.ValueTuple`3"/> instance.
            </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.ValueTuple`3"/>
            instance and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.ValueTuple`3"/>
            instance, <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.ValueTuple`3.Equals(Tektosyne.ValueTuple{`0,`1,`2})"/> overload to test the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.Equals(Tektosyne.ValueTuple{`0,`1,`2})">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.ValueTuple`3"/> have
            the same value.</summary>
            <param name="tuple">
            A <see cref="T:Tektosyne.ValueTuple`3"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="tuple"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.ValueTuple`3.Item1"/>, <see cref="F:Tektosyne.ValueTuple`3.Item2"/>, and
            <see cref="F:Tektosyne.ValueTuple`3.Item3"/> properties of the two <see cref="T:Tektosyne.ValueTuple`3"/> instances to
            test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`3.Equals(Tektosyne.ValueTuple{`0,`1,`2},Tektosyne.ValueTuple{`0,`1,`2})">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.ValueTuple`3"/> instances have the
            same value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`3"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`3"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.ValueTuple`3.Equals(Tektosyne.ValueTuple{`0,`1,`2})"/> overload
            to test the two <see cref="T:Tektosyne.ValueTuple`3"/> instances for value equality.
            </remarks>
        </member>
        <member name="T:Tektosyne.ValueTuple`4">
            <summary>
            Provides an immutable tuple of four arbitrary objects.</summary>
            <typeparam name="T1">
            The type of the first component.</typeparam>
            <typeparam name="T2">
            The type of the second component.</typeparam>
            <typeparam name="T3">
            The type of the third component.</typeparam>
            <typeparam name="T4">
            The type of the fourth component.</typeparam>
            <remarks>
            <b>ValueTuple</b> resembles a standard <see cref="T:System.Tuple`4"/> but is implemented as
            an immutable structure with read-only fields, not as a class with properties.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Tektosyne.ValueTuple`4"/> structure.
            </summary>
            <param name="item1">
            The first component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
            <param name="item2">
            The second component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
            <param name="item3">
            The third component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
            <param name="item4">
            The fourth component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</param>
        </member>
        <member name="F:Tektosyne.ValueTuple`4.Empty">
            <summary>
            An empty read-only <see cref="T:Tektosyne.ValueTuple`4"/> instance.</summary>
            <remarks>
            <b>Empty</b> contains a <see cref="T:Tektosyne.ValueTuple`4"/> instance that was created
            with the default constructor.</remarks>
        </member>
        <member name="F:Tektosyne.ValueTuple`4.Item1">
            <summary>
            The first component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</summary>
        </member>
        <member name="F:Tektosyne.ValueTuple`4.Item2">
            <summary>
            The second component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</summary>
        </member>
        <member name="F:Tektosyne.ValueTuple`4.Item3">
            <summary>
            The third component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</summary>
        </member>
        <member name="F:Tektosyne.ValueTuple`4.Item4">
            <summary>
            The fourth component of the <see cref="T:Tektosyne.ValueTuple`4"/>.</summary>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tektosyne.ValueTuple`4"/> instance.</summary>
            <returns>
            An <see cref="T:System.Int32"/> hash code.</returns>
            <remarks>
            <b>GetHashCode</b> combines the results of <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)"/>
            for the <see cref="F:Tektosyne.ValueTuple`4.Item1"/>, <see cref="F:Tektosyne.ValueTuple`4.Item2"/>, <see cref="F:Tektosyne.ValueTuple`4.Item3"/>, and <see
            cref="F:Tektosyne.ValueTuple`4.Item4"/> properties.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see
            cref="T:Tektosyne.ValueTuple`4"/>.</summary>
            <returns>
            A <see cref="T:System.String"/> containing the culture-invariant string representations of the
            <see cref="F:Tektosyne.ValueTuple`4.Item1"/>, <see cref="F:Tektosyne.ValueTuple`4.Item2"/>, <see cref="F:Tektosyne.ValueTuple`4.Item3"/>, and <see cref="F:Tektosyne.ValueTuple`4.Item4"/>
            properties.</returns>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.op_Equality(Tektosyne.ValueTuple{`0,`1,`2,`3},Tektosyne.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`4"/> instances have the same
            value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`4"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`4"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.ValueTuple`4.Equals(Tektosyne.ValueTuple{`0,`1,`2,`3})"/> method to test
            the two <see cref="T:Tektosyne.ValueTuple`4"/> instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.op_Inequality(Tektosyne.ValueTuple{`0,`1,`2,`3},Tektosyne.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`4"/> instances have different
            values.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`4"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`4"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is different from the value of
            <paramref name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This operator invokes the <see cref="M:Tektosyne.ValueTuple`4.Equals(Tektosyne.ValueTuple{`0,`1,`2,`3})"/> method to test
            the two <see cref="T:Tektosyne.ValueTuple`4"/> instances for value inequality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.Equals(System.Object)">
            <overloads>
            Determines whether two <see cref="T:Tektosyne.ValueTuple`4"/> instances have the same
            value.</overloads>
            <summary>
            Determines whether this <see cref="T:Tektosyne.ValueTuple`4"/> instance and a specified
            object, which must be a <see cref="T:Tektosyne.ValueTuple`4"/>, have the same value.
            </summary>
            <param name="obj">
            An <see cref="T:System.Object"/> to compare to this <see cref="T:Tektosyne.ValueTuple`4"/>
            instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is another <see cref="T:Tektosyne.ValueTuple`4"/>
            instance and its value is the same as this instance; otherwise, <c>false</c>.</returns>
            <remarks>
            If the specified <paramref name="obj"/> is another <see cref="T:Tektosyne.ValueTuple`4"/>
            instance, <b>Equals</b> invokes the strongly-typed <see cref="M:Tektosyne.ValueTuple`4.Equals(Tektosyne.ValueTuple{`0,`1,`2,`3})"/> overload to test the two instances for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.Equals(Tektosyne.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether this instance and a specified <see cref="T:Tektosyne.ValueTuple`4"/>
            have the same value.</summary>
            <param name="tuple">
            A <see cref="T:Tektosyne.ValueTuple`4"/> to compare to this instance.</param>
            <returns>
            <c>true</c> if the value of <paramref name="tuple"/> is the same as this instance;
            otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> compares the values of the <see cref="F:Tektosyne.ValueTuple`4.Item1"/>, <see cref="F:Tektosyne.ValueTuple`4.Item2"/>, <see
            cref="F:Tektosyne.ValueTuple`4.Item3"/>, and <see cref="F:Tektosyne.ValueTuple`4.Item4"/> properties of the two <see
            cref="T:Tektosyne.ValueTuple`4"/> instances to test for value equality.</remarks>
        </member>
        <member name="M:Tektosyne.ValueTuple`4.Equals(Tektosyne.ValueTuple{`0,`1,`2,`3},Tektosyne.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Determines whether two specified <see cref="T:Tektosyne.ValueTuple`4"/> instances have the
            same value.</summary>
            <param name="x">
            The first <see cref="T:Tektosyne.ValueTuple`4"/> to compare.</param>
            <param name="y">
            The second <see cref="T:Tektosyne.ValueTuple`4"/> to compare.</param>
            <returns>
            <c>true</c> if the value of <paramref name="x"/> is the same as the value of <paramref
            name="y"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            <b>Equals</b> invokes the non-static <see cref="M:Tektosyne.ValueTuple`4.Equals(Tektosyne.ValueTuple{`0,`1,`2,`3})"/>
            overload to test the two <see cref="T:Tektosyne.ValueTuple`4"/> instances for value
            equality.</remarks>
        </member>
        <member name="T:Tektosyne.Xml.XmlUtility">
            <summary>
            Provides auxiliary methods for <b>System.Xml</b>.</summary>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.CreateReaderSettings">
            <overloads>
            Creates standard <see cref="T:System.Xml.XmlReaderSettings"/>.</overloads>
            <summary>
            Creates standard <see cref="T:System.Xml.XmlReaderSettings"/> without a schema.</summary>
            <returns>
            A new <see cref="T:System.Xml.XmlReaderSettings"/> object with standard options.</returns>
            <remarks><para>
            <b>CreateReaderSettings</b> simplifies the process of creating <see
            cref="T:System.Xml.XmlReaderSettings"/> with commonly used options. The following properties are
            explicitly set on the new instance, with the others remaining at their default values:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.IgnoreComments"/></term>
            <description><c>true</c></description>
            </item><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions"/></term>
            <description><c>true</c></description>
            </item><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/></term>
            <description><c>true</c></description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.CreateReaderSettings(System.String)">
            <summary>
            Creates standard <see cref="T:System.Xml.XmlReaderSettings"/> with the specified schema.</summary>
            <param name="schemaUri">
            The URI that specifies the schema to load.</param>
            <returns>
            A new <see cref="T:System.Xml.XmlReaderSettings"/> object with standard options that validates 
            against the specified <paramref name="schemaUri"/>.</returns>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="schemaUri"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaException">
            <paramref name="schemaUri"/> does not specify a valid XML schema.</exception>
            <remarks><para>
            <b>CreateReaderSettings</b> simplifies the process of creating <see
            cref="T:System.Xml.XmlReaderSettings"/> with commonly used options that validates against a schema.
            The following properties are explicitly set on the new instance, with the others
            remaining at their default values:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.IgnoreComments"/></term>
            <description><c>true</c></description>
            </item><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions"/></term>
            <description><c>true</c></description>
            </item><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/></term>
            <description><c>true</c></description>
            </item><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.Schemas"/></term>
            <description>Contains one element with the specified <paramref name="schemaUri"/> and
            the default target namespace defined in the schema.</description>
            </item><item>
            <term><see cref="P:System.Xml.XmlReaderSettings.ValidationType"/></term>
            <description><see cref="F:System.Xml.ValidationType.Schema"/></description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.CreateWriterSettings">
            <summary>
            Creates standard <see cref="T:System.Xml.XmlWriterSettings"/>.</summary>
            <returns>
            A new <see cref="T:System.Xml.XmlWriterSettings"/> object with standard options.</returns>
            <remarks><para>
            <b>CreateWriterSettings</b> simplifies the process of creating <see
            cref="T:System.Xml.XmlWriterSettings"/> with commonly used options. The following properties are
            explicitly set on the new instance, with the others remaining at their default values:
            </para><list type="table"><listheader>
            <term>Property</term><description>Value</description>
            </listheader><item>
            <term><see cref="P:System.Xml.XmlWriterSettings.Encoding"/></term>
            <description><see cref="P:System.Text.Encoding.UTF8"/></description>
            </item><item>
            <term><see cref="P:System.Xml.XmlWriterSettings.Indent"/></term>
            <description><c>true</c></description>
            </item><item>
            <term><see cref="P:System.Xml.XmlWriterSettings.IndentChars"/></term>
            <description>Two space characters (Unicode character 32, SPACE).</description>
            </item></list></remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.GetXmlMessage(System.Exception)">
            <summary>
            Extracts the message of the specified <see cref="T:System.Exception"/>, prepending the error
            location if it is an <see cref="T:System.Xml.XmlException"/> or <see cref="T:System.Xml.Schema.XmlSchemaException"/>.
            </summary>
            <param name="exception">
            The <see cref="T:System.Exception"/> object whose error message to extract.</param>
            <returns>
            A <see cref="T:System.String"/> containing the error location (if available) and <see
            cref="P:System.Exception.Message"/> of the specified <paramref name="exception"/>, or an empty
            string if <paramref name="exception"/> is a null reference.</returns>
            <remarks><para>
            <b>GetXmlMessage</b> provides a convenient way to extract the additional error
            information provided by <see cref="T:System.Xml.XmlException"/> and <see cref="T:System.Xml.Schema.XmlSchemaException"/>,
            namely the error location returned by the <see cref="P:System.Xml.XmlException.LineNumber"/> and <see
            cref="P:System.Xml.XmlException.LinePosition"/> properties.
            </para><para>
            If the specified <paramref name="exception"/> is of either type and specifies a
            <b>LineNumber</b> greater than zero, <b>GetXmlMessage</b> prepends a localized error
            location statement to the <see cref="P:System.Exception.Message"/> specified by <paramref
            name="exception"/>. Otherwise, only the <b>Message</b> is returned.</para></remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.MoveToEndElement(System.Xml.XmlReader)">
            <summary>
            Moves the specified <see cref="T:System.Xml.XmlReader"/> to the next element end tag.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> to move.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <remarks><para>
            <b>MoveToEndElement</b> returns immediately if the <see cref="P:System.Xml.XmlReader.ReadState"/> of
            the specified <paramref name="reader"/> is not <b>ReadState.Interactive</b>.
            </para><para>
            Otherwise, <b>MoveToEndElement</b> calls <see cref="M:System.Xml.XmlReader.MoveToContent"/> to skip
            over any white space, comments, and processing instructions, and then repositions
            <paramref name="reader"/> as follows, depending on content of the current node:
            </para><list type="table"><listheader>
            <term>Current Node</term><description>New Position</description>
            </listheader><item>
            <term>Empty element tag (<see cref="P:System.Xml.XmlReader.IsEmptyElement"/> is <c>true</c>)</term>
            <description>Unchanged</description>
            </item><item>
            <term>End tag (<b>XmlNodeType.EndElement</b>)</term>
            <description>Unchanged</description>
            </item><item>
            <term>Start tag (<b>XmlNodeType.Element</b>)</term>
            <description>Next element end tag of the same depth (effectively skips over any child
            nodes of the current node)</description>
            </item><item>
            <term>Other</term><description>Next element end tag of any depth</description>
            </item></list></remarks>
            <example><para>
            Note that standard methods such as <see cref="M:System.Xml.XmlReader.Skip"/> or <see
            cref="M:System.Xml.XmlReader.ReadOuterXml"/> do not position the <see cref="T:System.Xml.XmlReader"/> on the next
            end tag, but rather on the node <em>following</em> the next end tag, making them
            difficult to use in common loops such as this:
            </para><code>
            while (reader.Read() &amp;&amp; reader.IsStartElement()) {
            
                if (reader.Name == "DontLikeThisNode") {
                    // ERROR: loop will miss next start tag!
                    reader.Skip();
                }
                else if (reader.Name == "DontLikeThatEither") {
                    // OK: loop will hit next start tag
                    MoveToEndElement(reader);
                }
            }</code></example>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.MoveToStartElement(System.Xml.XmlReader,System.String)">
            <summary>
            Moves the specified <see cref="T:System.Xml.XmlReader"/> to the next content node which must be an
            element start tag of the specified name.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> to move to the element start tag with the specified
            <paramref name="name"/>.</param>
            <param name="name">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the expected start tag (<b>XmlNodeType.Element</b>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="name"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.Xml.XmlException">
            The next content node was not a start element tag (<b>XmlNodeType.Element</b>), or its
            name was not <paramref name="name"/>.</exception>
            <remarks>
            <b>MoveToStartElement</b> calls <see cref="M:System.Xml.XmlReader.IsStartElement"/> with the
            specified <paramref name="name"/> to test the node type and name of the next content
            node returned by the specified <paramref name="reader"/>. If the test fails,
            <b>MoveToStartElement</b> throws an <see cref="T:System.Xml.XmlException"/> indicating the expected
            name; otherwise, it returns silently.</remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsBoolean(System.Xml.XmlReader,System.String,System.Boolean@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into a <see cref="T:System.Boolean"/> value.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.Boolean"/> value read from <paramref name="attribute"/>, if
            found; otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="attribute"/> does not represent a <see cref="T:System.Boolean"/> value.
            </exception>
            <remarks>
            <b>ReadAttributeAsBoolean</b> does not move the specified <paramref name="reader"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsByte(System.Xml.XmlReader,System.String,System.Byte@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into a <see cref="T:System.Byte"/> value.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.Byte"/> value read from <paramref name="attribute"/>, if found;
            otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="attribute"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="attribute"/> represents a number less than <see cref="F:System.Byte.MinValue"/>
            or <see cref="F:System.Byte.MaxValue"/>.</exception>
            <remarks>
            <b>ReadAttributeAsByte</b> does not move the specified <paramref name="reader"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsDouble(System.Xml.XmlReader,System.String,System.Double@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into a <see cref="T:System.Double"/> value.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.Double"/> value read from <paramref name="attribute"/>, if found;
            otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="attribute"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="attribute"/> represents a number less than <see cref="F:System.Double.MinValue"/>
            or <see cref="F:System.Double.MaxValue"/>.</exception>
            <remarks>
            <b>ReadAttributeAsDouble</b> does not move the specified <paramref name="reader"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsEnum``1(System.Xml.XmlReader,System.String,``0@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into an enumeration value of the specified type.</summary>
            <typeparam name="T">
            The <see cref="T:System.Enum"/> that defines the valid values for <paramref name="attribute"/>.
            Any underlying type is acceptable, and the <see cref="T:System.Enum"/> may have the <see
            cref="T:System.FlagsAttribute"/>.</typeparam>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <typeparamref name="T"/> value read from <paramref name="attribute"/>, if
            found; otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="attribute"/> does not contain one or more of the named constants defined
            for <typeparamref name="T"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <remarks><para>
            <b>ReadAttributeAsEnum</b> does not move the specified <paramref name="reader"/>.
            </para><para>
            The contents of the specified <paramref name="attribute"/> are converted into a 
            <typeparamref name="T"/> value using the <see cref="M:System.Enum.Parse(System.Type,System.String)"/> method of the <see
            cref="T:System.Enum"/> class. The operation is case-sensitive.
            </para><para>
            If <typeparamref name="T"/> carries the <see cref="T:System.FlagsAttribute"/>, the specified
            <paramref name="attribute"/> may contain multiple <typeparamref name="T"/> values, and
            <b>ReadAttributeAsEnum</b> will return a bitwise combination of these values. The named
            constants in <paramref name="attribute"/> must be separated either by a comma followed
            by whitespace (the default string representation of a bit field <see cref="T:System.Enum"/>), or
            just by whitespace (the delimiter used by the <c>xsd:list</c> type of XML Schema).
            </para></remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsInt16(System.Xml.XmlReader,System.String,System.Int16@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into an <see cref="T:System.Int16"/> value.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.Int16"/> value read from <paramref name="attribute"/>, if found;
            otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="attribute"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="attribute"/> represents a number less than <see cref="F:System.Int16.MinValue"/>
            or <see cref="F:System.Int16.MaxValue"/>.</exception>
            <remarks>
            <b>ReadAttributeAsInt16</b> does not move the specified <paramref name="reader"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsInt32(System.Xml.XmlReader,System.String,System.Int32@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into an <see cref="T:System.Int32"/> value.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.Int32"/> value read from <paramref name="attribute"/>, if found;
            otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="attribute"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="attribute"/> represents a number less than <see cref="F:System.Int32.MinValue"/>
            or <see cref="F:System.Int32.MaxValue"/>.</exception>
            <remarks>
            <b>ReadAttributeAsInt32</b> does not move the specified <paramref name="reader"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsInt64(System.Xml.XmlReader,System.String,System.Int64@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into an <see cref="T:System.Int64"/> value.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.Int64"/> value read from <paramref name="attribute"/>, if found;
            otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="attribute"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="attribute"/> represents a number less than <see cref="F:System.Int64.MinValue"/>
            or <see cref="F:System.Int64.MaxValue"/>.</exception>
            <remarks>
            <b>ReadAttributeAsInt64</b> does not move the specified <paramref name="reader"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsSingle(System.Xml.XmlReader,System.String,System.Single@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/> and converts it
            into a <see cref="T:System.Single"/> value.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.Single"/> value read from <paramref name="attribute"/>, if found;
            otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="attribute"/> is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="attribute"/> represents a number less than <see cref="F:System.Single.MinValue"/>
            or <see cref="F:System.Single.MaxValue"/>.</exception>
            <remarks>
            <b>ReadAttributeAsSingle</b> does not move the specified <paramref name="reader"/>.
            </remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadAttributeAsString(System.Xml.XmlReader,System.String,System.String@)">
            <summary>
            Reads the specified attribute from the specified <see cref="T:System.Xml.XmlReader"/>.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <param name="attribute">
            The <see cref="P:System.Xml.XmlReader.Name"/> of the XML attribute to read.</param>
            <param name="value">
            Returns the <see cref="T:System.String"/> value read from <paramref name="attribute"/>, if found;
            otherwise, this parameter remains unchanged.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:Tektosyne.ArgumentNullOrEmptyException">
            <paramref name="attribute"/> is a null reference or an empty string.</exception>
            <remarks><para>
            <b>ReadAttributeAsString</b> does not move the specified <paramref name="reader"/>.
            </para><para>
            If the specified <paramref name="attribute"/> is found, its <see cref="T:System.String"/> value
            is interned before assignment to <paramref name="value"/>.</para></remarks>
        </member>
        <member name="M:Tektosyne.Xml.XmlUtility.ReadTextElement(System.Xml.XmlReader)">
            <summary>
            Reads a text-only element and stops at the end element tag.</summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> from which to read.</param>
            <returns>
            The text contained in the element that was read from the specified <paramref
            name="reader"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is a null reference.</exception>
            <exception cref="T:System.Xml.XmlException">
            <paramref name="reader"/> is not positioned on or before a start element tag
            (<b>XmlNodeType.Element</b>) that contains only simple text and/or CDATA blocks
            (<b>XmlNodeType.Text</b> and <b>XmlNodeType.CDATA</b>).</exception>
            <remarks><para>
            <b>ReadTextElement</b> calls <see cref="M:System.Xml.XmlReader.IsStartElement"/> to position the
            specified <paramref name="reader"/> on the next content node. If that node is an empty
            element, <b>ReadTextElement</b> returns an empty string without further moving the
            <paramref name="reader"/>.
            </para><para>
            Otherwise, <b>ReadTextElement</b> concatenates any adjacent simple text and CDATA blocks
            (<b>XmlNodeType.Text</b> and <b>XmlNodeType.CDATA</b>) until the matching end element
            tag is found (<b>XmlNodeType.EndElement</b>), and then returns the concatenated text.
            </para><para>
            <b>ReadTextElement</b> differs from the standard library method <see
            cref="M:System.Xml.XmlReader.ReadElementString"/> in the position of <paramref name="reader"/> when
            the method returns. <b>ReadElementString</b> moves its <paramref name="reader"/> to the
            node <em>following</em> the end tag, making it difficult to use in loops of the form
            <c>while (reader.Read())</c>, as described in <see cref="M:Tektosyne.Xml.XmlUtility.MoveToEndElement(System.Xml.XmlReader)"/>.
            </para></remarks>
        </member>
    </members>
</doc>
